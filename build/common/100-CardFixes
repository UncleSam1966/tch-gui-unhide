echo [$SCRIPT]: Fix DSL disabled status on Broadband card and add upload/download stats
sed \
 -e '/sys.eth.port.@eth4.status/a \  dsl0_enabled      = "uci.xdsl.xdsl.@dsl0.enabled",' \
 -e '/"DSL disconnected"/a \      elseif wan_data["dsl0_enabled"] == "0" then' \
 -e '/"DSL disconnected"/a \        html[#html+1] = ui_helper.createSimpleLight("0", "DSL disabled")' \
 -e '/ngx.ctx.session/i \local wan_intf ="wan"' \
 -e '/ngx.ctx.session/i \local wan6_intf ="wan6"' \
 -e '/ngx.ctx.session/i \local content_wan = {' \
 -e '/ngx.ctx.session/i \  wwan_ipaddr = "rpc.network.interface.@wwan.ipaddr",' \
 -e '/ngx.ctx.session/i \  wwan_ip6addr = "rpc.network.interface.@wwan.ip6addr",' \
 -e '/ngx.ctx.session/i \}' \
 -e '/ngx.ctx.session/i \content_helper.getExactContent(content_wan)' \
 -e '/ngx.ctx.session/i \if content_wan.wwan_ipaddr:len() ~= 0 or content_wan.wwan_ip6addr:len() ~= 0 then' \
 -e '/ngx.ctx.session/i \  wan_intf = "wwan"' \
 -e '/ngx.ctx.session/i \end' \
 -e '/ngx.ctx.session/i \local content_rpc = {' \
 -e '/ngx.ctx.session/i \  uptime = "rpc.network.interface.@" .. wan_intf .. ".uptime",' \
 -e '/ngx.ctx.session/i \  tx_bytes = "rpc.network.interface.@" .. wan_intf .. ".tx_bytes",' \
 -e '/ngx.ctx.session/i \  rx_bytes = "rpc.network.interface.@" .. wan_intf .. ".rx_bytes",' \
 -e '/ngx.ctx.session/i \}' \
 -e '/ngx.ctx.session/i \content_helper.getExactContent(content_rpc)' \
 -e '/ngx.ctx.session/i \local function bytes2string(s_bytes)' \
 -e '/ngx.ctx.session/i \  if s_bytes=="" then' \
 -e '/ngx.ctx.session/i \    return "0<small>B</small>"' \
 -e '/ngx.ctx.session/i \  else' \
 -e '/ngx.ctx.session/i \    local bytes = tonumber(s_bytes)' \
 -e '/ngx.ctx.session/i \    local kb = bytes/1024' \
 -e '/ngx.ctx.session/i \    local mb = kb/1024' \
 -e '/ngx.ctx.session/i \    local gb = mb/1024' \
 -e '/ngx.ctx.session/i \    if gb >= 1 then' \
 -e '/ngx.ctx.session/i \      return format("%.2f", gb) .. "<small>GB</small>"' \
 -e '/ngx.ctx.session/i \    elseif mb >= 1 then' \
 -e '/ngx.ctx.session/i \      return format("%.2f", mb) .. "<small>MB</small>"' \
 -e '/ngx.ctx.session/i \    elseif kb >= 1 then' \
 -e '/ngx.ctx.session/i \      return format("%.2f", kb) .. "<small>KB</small>"' \
 -e '/ngx.ctx.session/i \    else' \
 -e '/ngx.ctx.session/i \      return s_bytes .. "<small>B</small>"' \
 -e '/ngx.ctx.session/i \    end' \
 -e '/ngx.ctx.session/i \  end' \
 -e '/ngx.ctx.session/i \end' \
 -e '/ngx.print(html)/i \      if tonumber(content_rpc.rx_bytes) and tonumber(content_rpc.tx_bytes) then' \
 -e '/ngx.print(html)/i \        html[#html+1] = format("<p class=\\"subinfos\\"><i class=\\"icon-download\\"></i> %s <i class=\\"icon-upload\\"></i> %s %s/<i>d</i></p>", bytes2string(content_rpc.rx_bytes), bytes2string(content_rpc.tx_bytes), bytes2string((content_rpc.rx_bytes+content_rpc.tx_bytes)/(content_rpc.uptime/86400)))' \
 -e '/ngx.print(html)/i \      end' \
 -i /www/cards/002_broadband.lp

echo [$SCRIPT]: Fix Internet card bug and bridge detection
sed \
 -e '/^local untaint_mt/a local dyntab_helper = require("web.dyntab_helper")' \
 -e 's/\(^local mode_active =\)\( "".*\)/\1 dyntab_helper.process(imh).current.name/' \
 -e '/^local mode_active = "default"/d' \
 -e '/mode_active = "uci.network.config.wan_mode"/,/wan_proto = "uci.network.interface.@wan.proto"/d' \
 -e 's/if content_mode.mode_active ~= "" then/if mode_active == "" then/' \
 -e "/-- Get current mode by 'wan_mode'/,/--'wan_mode' not there, then get @wan.proto/d" \
 -e 's/mode_active = content_mode.wan_proto/mode_active = mode_default/' \
 -i /www/cards/003_internet.lp

echo [$SCRIPT]: Add DHCPv6 Server status to LAN card 
sed \
 -e '/local dhcpState$/a local dhcp6State_text = ""' \
 -e '/local dhcpState$/a local dhcp6State' \
 -e '/@lan.dhcpv4/a \    dhcpv6State = "uci.dhcp.dhcp.@lan.dhcpv6",' \
 -e '/@lan.dhcpv4/a \    dhcpv4Proto = "uci.network.interface.@lan.proto",' \
 -e '/localdevmask = /d' \
 -e 's/localdevIP = "uci/localdevIP = "rpc/' \
 -e 's/dhcpState/dhcp4State/g' \
 -e 's/DHCP enabled/DHCPv4 enabled/' \
 -e 's/DHCP disabled/DHCPv4 disabled/' \
 -e '/getExactContent/a if mapParams["dhcpv6State"] == "" or mapParams["dhcpv6State"] == "server" then' \
 -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 enabled"' \
 -e '/getExactContent/a \    dhcp6State = "1"' \
 -e '/getExactContent/a else' \
 -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 disabled"' \
 -e '/getExactContent/a \    dhcp6State = "0"' \
 -e '/getExactContent/a end' \
 -e '/createSimpleLight/a \            ui_helper.createSimpleLight(dhcp6State, dhcp6State_text),' \
 -e 's/and netmask is <strong>%s<\/strong>/\(<strong>%s<\/strong>\)/' \
 -e 's/localdevmask/dhcpv4Proto/' \
 -e '/^\\$/d' \
 -i /www/cards/005_LAN.lp

echo [$SCRIPT]: Fix bug in relay setup card 
sed \
 -e '/getExactContent/a \ ' \
 -e '/getExactContent/a local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\)\(.*\)\( then\)/if not server_addr or \(server_addr\2\)\3/' \
 -e 's/\r//' \
 -i /www/cards/018_relaysetup.lp

echo [$SCRIPT]: Enable cards in Bridge Mode
# https://www.crc.id.au/hacking-the-technicolor-tg799vac-and-unlocking-features/#mozTocId685948
sed -e '/if info.bridged then/,/end/d' -i /www/lua/cards_limiter.lua

