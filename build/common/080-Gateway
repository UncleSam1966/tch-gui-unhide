SERIAL=$(uci get env.var.serial)
echo [$SCRIPT]: Change config export filename from config.bin to $VARIANT-$SERIAL-$VERSION@YYMMDD.bin
sed \
  -e "s/=config.bin/=$VARIANT-$SERIAL-$VERSION@\" .. os.date(\"%Y%m%d\") .. \".bin/" \
  -i /www/docroot/modals/gateway-modal.lp
echo [$SCRIPT]: Add reset/upgrade warnings
sed \
  -e '/local basic =/i local lose_root_warning = { alert = { class = "alert-info", style = "margin-bottom:5px;" }, }' \
  -e '/T"Reset"/i\    html[#html + 1] = ui_helper.createAlertBlock(T"Root access <i>should</i> be preserved when using the <b><i class=\\"icon-bolt\\" style=\\"width:auto;\\">\</i> Reset</b> button. You can use the <i>reset-to-factory-defaults-with-root</i> utility script from the command line to have more control over the factory reset and still retain root access.", lose_root_warning)' \
  -e '/T"Upgrade"/i\          html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Upgrading firmware using this method will cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script with the -f option from the command line to upgrade to the firmware and still retain root access.", lose_root_warning)' \
  -i /www/docroot/modals/gateway-modal.lp
echo [$SCRIPT]: Add tch-gui-unhide version to gateway modal and remove Global Information heading
sed \
  -e '/"uci.versioncusto.override.fwversion_override"/a\   unhide_version = "rpc.gui.UnhideVersion",' \
  -e '/"Serial Number"/i\    html[#html + 1] = ui_helper.createLabel(T"tch-gui-unhide Version", content["unhide_version"], basic)' \
  -e '/Global Information/d' \
  -i /www/docroot/modals/gateway-modal.lp
echo [$SCRIPT]: Allow hostname to be changed via GUI
sed \
  -e '/uci.system.system.@system\[0\].timezone/i\   system_hostname = "uci.system.system.@system[0].hostname",' \
  -e '/system_timezone = function/i\  system_hostname = function(value, object, key)\
    local valid, helpmsg = post_helper.validateNonEmptyString(value)\
    if valid then\
      if string.match(value, "^[a-zA-Z0-9%-]+$") then\
        if #value > 63 then\
          valid, helpmsg = nil, T"Host Name must be less than 64 characters"\
        end\
      else\
        valid, helpmsg = nil, T"Host Name contains invalid characters"\
      end\
    end\
    return valid, helpmsg\
  end,' \
  -e '/^local system_data/i\local old_hostname = proxy.get("uci.system.system.@system[0].hostname")[1].value' \
  -e '/^local system_data/a\if old_hostname ~= system_data["system_hostname"] and not system_helpmsg["system_hostname"] and ngx.req.get_method() == "POST" and ngx.req.get_post_args().action == "SAVE" then\
  local dns\
  for _,dns in pairs(proxy.get("uci.dhcp.dnsmasq.@main.hostname.")) do\
    if dns.value == old_hostname then\
      proxy.set(dns.path.."value",untaint(system_data["system_hostname"]))\
      proxy.apply()\
      break\
    end\
  end\
end' \
  -e '/MAC Address/a\    html[#html + 1] = ui_helper.createInputText(T"Host Name","system_hostname",system_data["system_hostname"],nil,system_helpmsg["system_hostname"])' \
  -i /www/docroot/modals/gateway-modal.lp
sed \
  -e 's|\(/etc/init.d/dnsmasq reload\)|\1;/etc/init.d/system reload|' \
  -i /usr/share/transformer/commitapply/uci_system.ca

echo [$SCRIPT]: Add option to disable/enable NTP Server
sed \
  -e '/uci.system.system.@system\[0\].timezone/i\   system_ntpserver = "uci.system.ntp.enable_server",' \
  -e '/system_timezone = function/i\  system_ntpserver = post_helper.validateBoolean,' \
  -e '/createInputSelect(T"Current Timezone"/a\    html[#html + 1] = ui_helper.createSwitch(T"Enable NTP Server", "system_ntpserver", system_data["system_ntpserver"], basic)' \
  -e '/elseif ngx.req.get_method() == "GET"/i\  if ngx.req.get_post_args().system_ntpserver == "0" then\
    local dhcp = {}\
    local baseDHCPOptions = "uci.dhcp.dhcp.@lan.dhcp_option."\
    content_helper.addListContent(dhcp,{ options = baseDHCPOptions })\
    for i,v in ipairs(dhcp.options) do\
      if v:find("^42,") == 1 then\
        proxy.del(baseDHCPOptions.."@"..i..".")\
        proxy.apply()\
        break\
      end\
    end\
  end' \
  -i /www/docroot/modals/gateway-modal.lp

echo [$SCRIPT]: Allow additional NTP servers to be added
sed \
  -e 's/NTP servers/NTP Servers/' \
  -e 's/Server name/Server Name/' \
  -e 's/Add new/Add/' \
  -e "/createMsg/a\  canAdd = true," \
  -e "s/maxEntries = 3,/maxEntries = 6,/" \
  -i /www/docroot/modals/gateway-modal.lp

if [ "$MINIFY" = y ]; then
  echo [$SCRIPT]: Pre-minify fixes
  [ "$DEBUG" = "V" ] && echo "[$SCRIPT]: - Fixing /www/docroot/modals/gateway-modal.lp"
  sed \
    -e 's|\(var retain_contact_mode = "default"\)\\|\1;\\|' \
    -e "s|\(ngx.print('\" + data.errorcode + \")\")\)\\\\|\1;\\\\|" \
    -e 's|\(toobig_msg.addClass("hide");\)|;\1|' \
    -i /www/docroot/modals/gateway-modal.lp
fi

if [ "$UPDATE_BTN" = y ]; then
  echo [$SCRIPT]: Add update available button
  sed \
    -e '/uci.version.version.@version\[0\].timestamp/a\    updatable = "rpc.gui.UpdateAvailable",' \
    -e '/isBridgedMode/i\        if cui.updatable == "1" then' \
    -e "/isBridgedMode/i\          html[#html + 1] = '<div data-toggle=\"modal\" class=\"btn\" data-remote=\"/modals/tch-gui-unhide-update-modal.lp\" data-id=\"tch-gui-unhide-update-modal\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<i class=\"icon-info-sign orange\"></i>&nbsp;'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Update Available\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</div>'" \
    -e '/isBridgedMode/i\        end' \
    -e '/local getargs/a\if getargs and getargs.ignore_update then' \
    -e '/local getargs/a\  local proxy = require("datamodel")' \
    -e '/local getargs/a\  proxy.set("rpc.gui.IgnoreCurrentRelease", getargs.ignore_update)' \
    -e '/local getargs/a\end' \
    -i /www/docroot/gateway.lp
else
  echo [$SCRIPT]: Update available button will NOT be shown in GUI
fi

echo [$SCRIPT]: Add auto-refresh management, chart library, and wait indicator when opening modals
sed \
  -e '/<title>/i\    <script src="/js/tch-gui-unhide.js"></script>\\' \
  -e '/<title>/i\    <script src="/js/chart-min.js"></script>\\' \
  -i /www/docroot/gateway.lp

echo [$SCRIPT]: Improve performance of card loading
sed \
  -e 's/\(local cards = require("cards")\)/\1.cards()/' \
  -e 's/_,v in pairs(cards.cards())/k=1,#cards,1/' \
  -e '/lp.include(v)/i\         local v = cards[k]' \
  -i /www/docroot/gateway.lp

echo [$SCRIPT]: Add improved debugging when errors cause cards to fail to load
sed \
  -e '/local cards/a\        local xpcall = xpcall' \
  -e '/lp.include(v)/i\         local success,msg = xpcall(function()' \
  -e '/lp.include(v)/a\         end, function(err)' \
  -e '/lp.include(v)/a\          ngx.print("<pre>", debug.traceback(err),"</pre>")' \
  -e '/lp.include(v)/a\          ngx.log(ngx.ERR, debug.traceback(err))' \
  -e '/lp.include(v)/a\         end)' \
  -i /www/docroot/gateway.lp

if [ "$DEBUG" = "V" ]; then
  echo [$SCRIPT]: Log card loading times
  sed \
    -e '/gettext.textdomain/a\local gettime = require("socket").gettime' \
    -e '/gettext.textdomain/a\local log = require("tch.logger").new("gateway.lp",7)' \
    -e '/gettext.textdomain/a\log:notice("Invoked!")' \
    -e '/gettext.textdomain/a\local debug_started = gettime()' \
    -e '/local cards/i\        log:notice("Elapsed time before loading cards: %.4f sec",gettime()-debug_started)' \
    -e '/local cards/i\        debug_started = gettime()' \
    -e '/local cards/a\        log:notice("Loading card info took %.4f sec",gettime()-debug_started)' \
    -e '/lp.include(v)/i\          local started = gettime()' \
    -e '/lp.include(v)/a\          log:notice("Card %s loaded in %.4f sec",v,gettime()-started)' \
    -i /www/docroot/gateway.lp
fi

echo [$SCRIPT]: Remove unnecessary variable retrievals
sed \
  -e '/uidefault\.nsplink/,/uidefault\.alwaysadvanced/d' \
  -e "s/'); *ngx.print( *cui.advanced *); *ngx.print('/1/" \
  -i /www/docroot/gateway.lp

echo [$SCRIPT]: Remove Sign in button when using default user and default user is admin
sed \
  -e "/\"signin\"/i\if session:getusername() ~= \"admin\" then" \
  -e "/\"signin\"/,/<\/a>/ s/'<\/a>'/&\nend/" \
  -i /www/docroot/gateway.lp

echo [$SCRIPT]: Fix uptime on basic Broadband tab
sed -e 's/days > 1/days > 0/' -i /www/docroot/broadband.lp

