RESTORE=n
WRAPPER=n
YES=n
FIX_FW_UPG='u'

FILENAME=$(basename $0)

CARDS=""
update_cards() {
  MODAL=""
  case "$2" in
    c)  MODAL="contentsharing-modal.lp";;
    m)  MODAL="usermgr-modal.lp";;
    n)  MODAL="nat-alg-helper-modal.lp";;
    p)  MODAL="printersharing-modal.lp";;
    q)  MODAL="qos-queue-modal.lp";;
    r)  MODAL="relay-modal.lp";;
    s)  MODAL="system-modal.lp";;
    t)  MODAL="tod-modal.lp";;
    x)  MODAL="xdsl-low-modal.lp";;
    A)  for PARAM in c m n p q r s t x; do update_cards $1 $PARAM; done
        if [ $1 = I ]; then MODAL="ALL"; fi;;
    *)  if [ ! -z "$2" -a -f "/www/docroot/modals/$2" ]
        then
          MODAL=$2
        else
          echo "[$SCRIPT]: WARNING - Ignored unknown card include/exclude option $2"
        fi;;
  esac
  if [ ! -z "$MODAL" ]; then
    CARDS=${1}${MODAL}$(echo $CARDS | sed -e "s/[IX]$MODAL//")
  fi
}

while getopts Wt:s:Tryun:x:i:c:h:lf: option
do
 case "${option}" in
   W) WRAPPER=y;;
   l) KEEP_LP=y;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPG='y';; n|N) FIX_FW_UPG='n';; u|U) FIX_FW_UPG='u';; *) FIX_FW_UPG='u'; echo 'WARNING: -f valid options are y, n, or u';; esac;;
   t) case "$(echo ${OPTARG} | tr "GNOPLT" "gnoplt" | sed 's/\(.\)\(.*\)/\1/')" in
        g) THEME=night; COLOR=green; KEEP_LP=n; echo WARNING: -tg deprecated. Use -tn -cg in future;; 
        n) THEME=night; COLOR=blue; KEEP_LP=n;;
        o) THEME=night; COLOR=orange; KEEP_LP=n; echo WARNING: -to deprecated. Use -tn -co in future;; 
        p) THEME=night; COLOR=purple; KEEP_LP=n; echo WARNING: -tp deprecated. Use -tn -cp in future;; 
        l) THEME=light; COLOR=monochrome; KEEP_LP=n;;
        *) THEME=Telstra; COLOR=blue; KEEP_LP=y;;
      esac;;
   c) case "$(echo ${OPTARG} | tr "BGMOP" "bgmop" | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;; 
        g) COLOR=green;; 
        o) COLOR=orange;; 
        p) COLOR=purple;; 
        *) COLOR=monochrome;;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   T) THEME_ONLY=y;;
   h) case "$(echo ${OPTARG} | tr "DSN" "dsn" | sed 's/\(.\)\(.*\)/\1/')" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        *) TITLE="$VARIANT-$MAC";;
      esac;;
   r) RESTORE=y;;
   n) update_cards 'I' $OPTARG;;
   x) update_cards 'X' $OPTARG;;
   y) YES=y;;
   u) RESULT=$(curl -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo "[tch-gui-unhide] GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else 
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]
                then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo "[tch-gui-unhide] Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]
                then
                  chmod +x $FILENAME
                  echo "[tch-gui-unhide] Successfully updated $FILENAME."
                  return 0
                else
                  echo "[tch-gui-unhide] Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo "[tch-gui-unhide] Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo "[tch-gui-unhide] GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   ?) echo "Optional parameters:"
      echo " -t l|n|t       : Set a light (l), night (n), or default Telstra (t) theme"
      echo "                    (Default is current setting, or Telstra if no theme has been applied)"
      echo " -c b|o|g|p|m   : Set the theme highlight colour"
      echo "                    b=blue o=orange g=green p=purple m=monochrome"
      echo "                    (Default is current setting, or (m) for light theme or (b) for night theme)"
      echo " -i y|n         : Show (y) or hide (n) the card icons"
      echo " -                  (Default is current setting, or n for light theme and y for night theme)"
      echo " -l             : Keep the Telstra landing page"
      echo " -T             : Apply theme ONLY - bypass all other processing"
      echo " -h d|s|n       : Set the browser tabs title to $VARIANT-$MAC (s), $VARIANT (d) or $HOSTNAME (n)"
      echo "                    (Default is current setting or $VARIANT-$MAC if not previously applied)"
      echo " -f u|y|n       : Firmware upgrade in the web GUI - u=Leave unchanged (Default) y=Enable n=Disable"
      echo " -x c|m|n|p|q|r|s|t|x|A :"
      echo "                  Exclude specific cards. Use -x multiple times to specify multiple cards or use -xA for all of these cards:"
      echo "                    c=Content Sharing m=Management n=NAT Helpers p=Printer Sharing q=QoS r=Relay Setup s=System Extras t=Time of Day x=xDSL config"
      echo "                    You can also specify the full name of a modal file (e.g. -x mmpbx-info-modal.lp). Be aware that this may not work for all cards."
      echo " -n c|m|n|p|q|r|s|t|x|A : "
      echo "                  Include specific cards that were previously excluded (use -n multiple times to specify multiple cards or use -nA)"
      echo "                    -nA will also include any cards excluded by specifying the full modal name. -nA overrides all -x parameters."
      echo " -y             : Bypass confirmation prompt (answers 'y')"
      echo " -r             : Restore changed GUI files to their original state (config changes are NOT restored)"
      echo " -u             : Check for and download any updates to $FILENAME"
      if [ $WRAPPER = y ]; then
      echo " -U             : Download the latest release, including utility scripts (will overwrite all existing script versions)."
      echo "                    When specifying the -U option, it must be the ONLY parameter specifed."
      fi
      echo 
      echo "NOTE: Theme (-t) and excluded/included cards (-x/-n) do not need to be re-specified when re-running the script: current state"
      echo "      will be 'remembered' between executions (unless you execute with the -r option, which will remove all state information)"
      echo
      exit;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

if [ $THEME_ONLY = n ]; then
