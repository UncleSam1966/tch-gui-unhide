local cronfile = "/etc/crontabs/root"
local cron_cache = {
  active, -- count of enabled tasks
  tbl,
  time_check, -- time tbl was refreshed
  refresh, -- line to refresh in the file
  reload -- force reload
}
local function checkCron()
  local active = 0
  local res = {}
  local time = os.time()

  -- Use the cron_cache for subsequent request
  if cron_cache.tbl and not cron_cache.reload and ( time - cron_cache.time_check ) < 30 then
    return cron_cache.tbl
  end

  local f = io.open(cronfile,"r")
  local line
  for line in f:lines() do
    if line ~= "" then
      local enabled, minute, hour, day, month, weekday, command = line:match("([# ]*)([0-9-%*-%--%/,]+) ([0-9-%*-%--%/,]+) ([0-9-%*-%--%/,]+) ([0-9-%*-%--%/,]+) ([0-9-%*-%--%/,]+) (.*)")
      if enabled:gsub("%s","") == "#" then
        enabled = "0"
      else
        active = active + 1
        enabled = "1"
      end
      res[#res+1] = {
        enabled = enabled,
        minute = minute,
        hour = hour,
        day = day,
        month = month,
        weekday = weekday,
        command = command,
      }
    end
  end
  f:close()

  cron_cache.active = tostring(active)
  cron_cache.tbl = res
  cron_cache.time_check = time
  cron_cache.refresh = nil
  cron_cache.reload = nil

  return res
end

local function writeLine(fd,tbl)
  if (tbl.enabled == "0") then
    fd:write("#")
  end
  fd:write(tbl.minute.." ")
  fd:write(tbl.hour.." ")
  fd:write(tbl.day.." ")
  fd:write(tbl.month.." ")
  fd:write(tbl.weekday.." ")
  fd:write(tbl.command.."\n")
end

local function editCron(param, value, key)
  checkCron()

  cron_cache.tbl[tonumber(key)][param] = value
  if not cron_cache.refresh then
    cron_cache.refresh = key
  end

  return true
end

local GUI_CRON_ = {
  objectType = {
    name = "rpc.gui.cron.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      ActiveNumberOfEntries = {
        access = "readOnly",
        type = "int"
      },
      writecrontab = {
        access = "readWrite",
        type = "boolean"
      },
    }
  }
}

GUI_CRON_.get = {
  ActiveNumberOfEntries = function()
    checkCron()
    return cron_cache.active
  end,
  writecrontab = "0",
}

GUI_CRON_.set = {
  writecrontab = function(mapping,param,value,key)
    if value == "1" then
      local cronTbl = checkCron()
      local f = io.open(cronfile,"w+")
      local l
      for _,l in pairs(cronTbl) do
        writeLine(f,l)
      end
      f:close()
      os.execute("/etc/init.d/cron restart")
      cron_cache.reload = true
    end
    return true
  end
}

register(GUI_CRON_)

local GUI_CRON_i_ = {
  objectType = {
    name = "rpc.gui.cron.entries.@.",
    access = "readWrite",
    numEntriesParameter = "CronNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      command = {
        access = "readWrite",
        type = "string",
      },
      minute = {
        access = "readWrite",
        type = "string",
      },
      hour = {
        access = "readWrite",
        type = "string",
      },
      day = {
        access = "readWrite",
        type = "string",
      },
      month = {
        access = "readWrite",
        type = "string",
      },
      weekday = {
        access = "readWrite",
        type = "string",
      },
      enabled = {
        access = "readWrite",
        type = "boolean",
      }
    }
  }
}

GUI_CRON_i_.entries = function(mapping)
  local res = {}
  local key
  for key in pairs(checkCron()) do
    res[#res+1]=tostring(key)
  end
  return res
end

GUI_CRON_i_.get = function(mapping, param, key)
  return checkCron()[tonumber(key)][param] or ""
end

GUI_CRON_i_.set = {
  minute = function(mapping,param,value,key)
    if not value:match("[0-9-%*-%--%/,]+") then
      return nil, "Minute can only contain 0-9, commas, -, / and *"
    end
    return editCron(param,value,key)
  end,
  hour = function(mapping,param,value,key)
    if not value:match("[0-9-%*-%--%/,]+") then
      return nil, "Hour can only contain 0-9, commas, -, / and *"
    end
    return editCron(param,value,key)
  end,
  day = function(mapping,param,value,key)
    if not value:match("[0-9-%*-%--%/,]+") then
      return nil, "Day can only contain 0-9, commas, -, / and *"
    end
    return editCron(param,value,key)
  end,
  month = function(mapping,param,value,key)
    if not value:match("[0-9-%*-%--%/,]+") then
      return nil, "Month can only contain 0-9, commas, -, / and *"
    end
    return editCron(param,value,key)
  end,
  weekday = function(mapping,param,value,key)
    if not value:match("[0-7-%*-%--%/,]+") then
      return nil, "Weekday can only contain 0-7, commas, -, / and *"
    end
    return editCron(param,value,key)
  end,
  command = function(mapping,param,value,key)
    return editCron(param,value,key)
  end,
  enabled = function(mapping,param,value,key)
    return editCron(param,value,key)
  end,
}

GUI_CRON_i_.add = function(mapping)
  local tbl = checkCron()
  local index = #tbl + 1
  local line = {
    enabled = "0",
    minute = "*",
    hour = "*",
    day = "*",
    month = "*",
    weekday = "*",
    command = "echo ID_RULE "..index,
  }

  local f = io.open(cronfile,"a")
  writeLine(f,line)
  f:close()

  cron_cache.reload = true

  return "@"..tostring(index)
end

GUI_CRON_i_.delete = function(mapping, key)
  checkCron()

  cron_cache.tbl[tonumber(key)] = nil

  local f = io.open(cronfile,"w+")
  local line
  for _,line in pairs(cron_cache.tbl) do
    writeLine(f,line)
  end
  f:close()
  os.execute("/etc/init.d/cron restart")

  cron_cache.reload = true

  return true
end

register(GUI_CRON_i_)
