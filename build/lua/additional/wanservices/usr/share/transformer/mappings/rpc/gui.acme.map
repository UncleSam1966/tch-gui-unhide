local GUI_ACME_ = {
  objectType = {
    name = "rpc.gui.acme.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      enabled = {
        access = "readWrite",
        type = "int"
      },
      log = {
        access = "readOnly",
        type = "string"
      },
    }
  }
}

local function isEnabled()
  local cmd = io.popen("grep -c 'acme-ipsec.sh' /etc/crontabs/root","r")
  local state = cmd:read("*n")
  cmd:close()
  return state
end

GUI_ACME_.get = {
  enabled = function() 
    return tostring(isEnabled())
  end,
  log = function()
    local cmd = io.popen("/sbin/logread -e \"acme.*\\[$(date +'%a %b %d')\" | tail -n 20 | sed -e 's/.\\[[0-9;]*m//g' -e 's/^\\(.*acme.*\\)\\(\\[.*\\)/\\2/'","r")
    local status = cmd:read("*a")
    cmd:close()
    return status
  end,
}

GUI_ACME_.set = {
  enabled = function(mapping, param, value)
    local state = isEnabled()
    if value == "1" then
      if state == 0 then
        os.execute("/usr/bin/logger -t rpc.gui.acme -p user.info \"[$(date +'%a %b %d %T %Z %Y')] Spawning background execution of certificate issue/renewal...\"")
        os.execute("/root/.acme.sh/acme-ipsec.sh -C -y &")
      end
      return true
    else
      if state == 1 then
        os.execute("sed -e '/acme-ipsec.sh/d' -i /etc/crontabs/root && /etc/init.d/cron restart")
      end
      return true
    end
  end,
}

register(GUI_ACME_)
