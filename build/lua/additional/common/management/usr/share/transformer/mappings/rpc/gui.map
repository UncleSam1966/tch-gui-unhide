local format,match = string.format,string.match
local curl_cmd = "curl -qskL"
local base_url = "https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master"
local release_version_cmd = format("%s -r0-9 -m5 %s/VERSION.txt",curl_cmd,base_url)
local current_version = "" -- Set by build script
local current_version_date = match(current_version,"(%d%d%d%d%.%d%d%.%d%d)@.*")
local ignored_release_version_file = "/etc/tch-gui-unhide.ignored_release"

local release_version = {
  date = nil,
  lastRetrieved = nil,
}

local function getIgnoredReleaseVersionDate()
  local version = ""
  local file = io.open(ignored_release_version_file,"r")
  if file then
    version = file:read()
    file:close()
  end
  return version
end

local function getReleaseVersionDate()
  local time = os.time()

  if release_version.lastRetrieved and ( time - release_version.lastRetrieved ) < 600 then
    return release_version.date
  end

  local curl = io.popen(release_version_cmd,"r")
  if curl then
    local v = match(curl:read(),"^%d%d%d%d%.%d%d%.%d%d$")
    curl:close()
    if v then
      release_version.date = v
      release_version.lastRetrieved = time
    end
  end

  return release_version.date
end

local function download(rel_path,filename)
  os.execute(format("logger -t tch-gui-unhide -p user.debug Downloading %s/%s%s",base_url,rel_path,filename))
  local cmd = format("%s -m5 -o /dev/null -w '%%{http_code}' %s/%s%s",curl_cmd,base_url,rel_path,filename)
  local response_code
  local curl,errmsg = io.popen(cmd,"r")
  if curl then
    response_code = curl:read("*n")
    curl:close()
    if response_code == 200 then
      cmd = format("%s -o/tmp/%s -w '%%{http_code}' %s/%s%s",curl_cmd,filename,base_url,rel_path,filename)
      curl,errmsg = io.popen(cmd,"r")
      if curl then
        response_code = curl:read("*n")
        curl:close()
        if response_code == 200 then
          os.execute(format("chmod +x /tmp/%s",filename))
          return true
        end
      end
    end
    return nil,tostring(response_code)
  end
  return nil,errmsg
end

local GUI_ = {
  objectType = {
    name = "rpc.gui.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      IgnoreCurrentRelease = {
        access = "readWrite",
        type = "boolean"
      },
      UnhideVersion = {
        access = "readOnly",
        type = "string"
      },
      UpdateAvailable = {
        access = "readOnly",
        type = "boolean"
      },
      UpdateNow = {
        access = "readWrite",
        type = "string"
      },
    }
  }
}

GUI_.get = {
  IgnoreCurrentRelease = function()
    if getReleaseVersionDate() == getIgnoredReleaseVersionDate() then
      return "1"
    else
      return "0"
    end
  end,
  UnhideVersion = function()
    return current_version
  end,
  UpdateAvailable = function()
    local release_version_date = getReleaseVersionDate()
    if release_version_date and release_version_date > current_version_date and release_version_date ~= getIgnoredReleaseVersionDate() then
      return "1"
    else
      return "0"
    end
  end,
  UpdateNow = function()
    return ""
  end,
}

GUI_.set = {
  IgnoreCurrentRelease = function(_,_,value,_)
    local file,err_msg = io.open(ignored_release_version_file,"w")
    if file then
      if value == "1" then
        file:write(getReleaseVersionDate())
      else
        file:write("")
      end
      file:close()
      return true
    else
      return nil,"Failed to persist ignored release version: " .. err_msg,"error"
    end
  end,
  UpdateNow = function(_,_,value,_)
    local pgrep = io.popen("grep '/tmp/tch-gui-unhide-' | grep -v grep | wc -l","r")
    local procs = pgrep:read("*n")
    pgrep:close()
    if procs > 0 then
      return nil,"Upgrade already running?"
    end
    local okay,response_code = download("",format("tch-gui-unhide-%s",value))
    if okay then
      okay,response_code = download("extras/src/",".extras")
      if okay then
        local extras = io.open("/tmp/.extras","r")
        if extras then
          for file in extras:lines() do
            if file ~= "" then
              okay,response_code = download("extras/",file)
              if not okay then
                os.execute(format("logger -t tch-gui-unhide -p user.warn Download of %s FAILED (Response code=%s)",file,response_code))
              end
            end
          end
          extras:close()
        end
      else
        os.execute(format("logger -t tch-gui-unhide -p user.warn Download of extras list FAILED (Response code=%s)",response_code))
      end
      os.execute(format("cd /tmp; sh ./tch-gui-unhide-%s -y 2>&1 | logger -t tch-gui-unhide -p user.info",value))
      os.execute("rm /tmp/.extras /tmp/tch-gui-unhide-*")
      return true
    end
    return nil,format("Download of tch-gui-unhide-%s FAILED (Response code=%s)",value,response_code)
  end,
}

register(GUI_)
