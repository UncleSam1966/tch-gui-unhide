local procTable = {}
local cmd = "/usr/bin/top -b -n 1"

local GUI_PROC_ = {
  objectType = {
    name = "rpc.gui.proc.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      filter = {
        access = "readWrite",
        type = "string"
      }
    }
  }
}

GUI_PROC_.get = {
  filter = ""
}

GUI_PROC_.set = {
  filter = function(_,_,_,_)
  end
}

register(GUI_PROC_)


local GUI_PROC_i_ = {
  objectType = {
    name = "rpc.gui.proc.processes.@.",
    access = "readOnly",
    numEntriesParameter = "ProcNumberOfEntries",
    minEntries = 0,
    maxEntries = 999,
    parameters = {
      process = {
        access = "readOnly",
        type = "unsignedInt",
      },
      parent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      user = {
        access = "readOnly",
        type = "string",
      },
      state = {
        access = "readOnly",
        type = "string",
      },
      resident_set_size = {
        access = "readOnly",
        type = "unsignedInt",
      },
      resident_set_percent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      virtual_memory_size = {
        access = "readOnly",
        type = "unsignedInt",
      },
      virtual_memory_percent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      cpu = {
        access = "readOnly",
        type = "unsignedInt",
      },
      command = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_PROC_i_.entries = function(_)
  local k = #procTable
  for i=0,k do procTable[i]=nil end
  k = 0


  local rss = {}
  local status = io.popen("grep ^VmRSS /proc/[0-9]*/status",'r')
  for proc in status:lines() do
    local pid,vmrss = proc:match("^/proc/(%d+)/status:VmRSS:%s+(%d+) kB$")
    if tonumber(pid) then
      rss[pid] = vmrss
    end
  end
  status:close()

  local total = nil
  local top = io.popen(cmd,'r')
  for proc in top:lines() do
    if not proc:find(cmd,1,true) then
      local pid,ppid,user,stat,vsz,vszpct,cpu = proc:match("([0-9]+) +([0-9]+) +([^ ]+) +(....) +([0-9]+[m]*) +([0-9]+)%% +([0-9]+)%%")
      if tonumber(pid) then
        k = k + 1
        procTable[string.format("%03d",k)] = {
          process = pid,
          parent = ppid,
          user = user,
          state = stat,
          resident_set_size = rss[pid] or "",
          resident_set_percent = tostring(math.modf((rss[pid] or 0)*100/total)),
          virtual_memory_size = vsz,
          virtual_memory_percent = vszpct,
          cpu = cpu,
          command = proc:sub(43),
        }
      elseif not total then
        local used,free = proc:match("^Mem:%s+(%d+)K used,%s+(%d+)K free")
        if used and free then
          total = tonumber(used) + tonumber(free)
        end
      end
    end
  end
  top:close()

  local res = {}
  for proc in pairs(procTable) do
    res[#res+1] = proc
  end
  return res
end

GUI_PROC_i_.get = function(_,param,key)
  local value = procTable[key][param]
  if not value then
    if (param == "user" or param == "state" or param == "command") then
      value = ""
    else
      value = "0"
    end
  end
  return value
end

register(GUI_PROC_i_)
