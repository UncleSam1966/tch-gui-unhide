#!/bin/sh

DATE_VERSION=$(date +%Y.%m.%d)
FULL_VERSION=$(date +%Y.%m.%d@%H:%M)

while getopts v: option
do
  case $option in
    v)  echo $OPTARG | grep -q -E '^[0-9][0-9][0-9][0-9]\.[0-1][0-9]\.[0-3][0-9]$'
        if [ $? -eq 1 ]; then
          echo "ERROR: -v option requires a parameter in the format YYYY.MM.DD"
          exit
        else
          DATE_VERSION="$OPTARG"
          FULL_VERSION="$DATE_VERSION@$(date +%H:%M)"
          echo "Overriding Release - using $FULL_VERSION"
        fi;;
  esac
done
shift $((OPTIND-1))

DIR=$(pwd)

echo Cleaning up..
rm -rf /tmp/tch-gui-unhide /tmp/*.b64

echo Fixing line endings...
DOS=$(find . -type f | xargs file | grep CRLF | cut -d: -f1 | xargs)
if [ ! -z "$DOS" ]
then
  for f in $DOS
  do
    dos2unix $f
  done
  find . -name 'd2utmp*' -exec rm -f {} \;
fi

echo Combining source files into single tree...
mkdir -p /tmp/tch-gui-unhide/common
tar --exclude README.md -cf - -C lua/ansuel/ .  | tar -xf - -C /tmp/tch-gui-unhide/common/
tar --exclude README.md -cf - -C lua/additional/ .  | tar -xf - -C /tmp/tch-gui-unhide/common/
for d in $(ls -d lua/stock/[0-9]*)
do
  mkdir -p /tmp/tch-gui-unhide/$(basename $d)
  tar --exclude README.md -cf - -C $d .  | tar -xf - -C /tmp/tch-gui-unhide/$(basename $d)/
done

TARGET=common/075-Enable-Ajax-Modals
echo Updating $TARGET...
rm $TARGET
for a in $(find /tmp/tch-gui-unhide/common/*/www/docroot/ajax -type f)
do
  AJAX=$(basename $a)
  RULE="$(basename $a .lua | sed -e 's/-//g')ajax"
  echo "if [ \"\$(uci -q get web.$RULE)\" != \"rule\" ]" >> $TARGET
  echo "then" >> $TARGET
  echo "  echo [\$SCRIPT]: Enabling $AJAX" >> $TARGET
  echo "  uci add_list web.ruleset_main.rules='$RULE'" >> $TARGET
  echo "  uci set web.$RULE='rule'" >> $TARGET
  echo "  uci set web.$RULE.target='/ajax/$AJAX'" >> $TARGET
  echo "  uci set web.$RULE.normally_hidden='1'" >> $TARGET
  echo "  uci add_list web.$RULE.roles='admin'" >> $TARGET
  echo "  uci commit web" >> $TARGET
  echo "  SRV_nginx=\$(( \$SRV_nginx + 4 ))" >> $TARGET
  echo "fi" >> $TARGET
done
echo "" >> $TARGET

echo Updating rpc.gui.UnhideVersion...
sed -e "s/current_version = \"\"/current_version = \"$FULL_VERSION\"/" -i $(find /tmp/tch-gui-unhide/common -name gui.map)

echo Fixing file and directory attributes...
find /tmp/tch-gui-unhide/ -type d -exec chmod 755 {} \;
find /tmp/tch-gui-unhide/ -type f -name '*.map' -exec chmod 644 {} \;
find /tmp/tch-gui-unhide/ -type f -name '*.lp'  -exec chmod 644 {} \;
find /tmp/tch-gui-unhide/ -type f -name '*.lua' -exec chmod 644 {} \;
for d in $(find /tmp/tch-gui-unhide/ -type d -name 'init.d' -o -name 'sbin')
do
  chmod 755 $d/*
done

echo Building bzipped Base64 tar images...
for d in $(ls /tmp/tch-gui-unhide/common)
do
  if [ -d /tmp/tch-gui-unhide/common/$d ]
  then
    cd /tmp/tch-gui-unhide/common/$d
    echo "echo [\$SCRIPT]: Deploy modified $d GUI code" > /tmp/$d.b64
    echo "echo $(tar --owner=root --group=root -cf - * | bzip2 | base64 | tr -d "$IFS") | base64 -d | bzcat | tar -xf - -C /" >> /tmp/$d.b64
    echo >> /tmp/$d.b64
    cd $DIR
  fi
done
echo "echo [\$SCRIPT]: Deploy theme files" > /tmp/themes.b64
echo "echo $(tar --owner=root --group=root --mode=644 --transform='s/^\./www/' --exclude=README.md --exclude=./ -cf - -C themes . | bzip2 | base64 | tr -d "$IFS") | base64 -d | bzcat | tar -xf - -C /" >> /tmp/themes.b64
echo "" >> /tmp/themes.b64
for d in $(ls -d /tmp/tch-gui-unhide/[0-9]*)
do
  if [ -d $d ]
  then
    cd $d
    FW=$(basename $d)
    TARGET=/tmp/$FW.b64
    if [ -f $d/.source ]
    then
      echo "echo [\$SCRIPT]: Importing stock GUI code from $(cat $d/.source | xargs) into $FW" > $TARGET
    else
      echo "echo [\$SCRIPT]: Importing stock GUI code" > $TARGET
    fi
    echo "echo $(tar --exclude .source --owner=root --group=root -cf - * | bzip2 | base64 | tr -d "$IFS") | base64 -d | bzcat | tar -xf - -C /" >> $TARGET
    echo >> $TARGET
    cd $DIR
  fi
done

for MAJOR in $(ls -d */ | grep -E '^[1-2]' | cut -d/ -f1)
do
  TARGET=../tch-gui-unhide-$MAJOR
  
  if [ ! -z "$1" -a "$1" != "$MAJOR" ]
  then
    continue
  fi

  for f in .delete-me ${TARGET}*
  do
    if [ -f $f ]
    then
      echo Removing $f...
      rm -f $f
    fi
  done

  echo Writing $TARGET...
  echo "#!/bin/sh" > $TARGET
  echo "echo 000@\$(date +%H:%M:%S): Built for firmware version $MAJOR - Release $DATE_VERSION" >> $TARGET
  echo "RELEASE='$FULL_VERSION'" >> $TARGET

  for s in $(find common $MAJOR -type f -a ! -name .do-not-delete -exec sh -c 'echo $(basename {})/$(dirname {})' \; | sort)
  do
    FILENAME="$(echo $s | cut -d/ -f1)"
    SEQUENCE="$(echo $FILENAME | cut -d- -f1)"
    DIRECTORY="$(echo $s | cut -d/ -f2-)"
    if [ $FILENAME = "055-Additional" ]
    then
      for b in $(cat "$DIRECTORY/$FILENAME")
      do
        sed -e "s/\[\$SCRIPT\]/$SEQUENCE@\$(date +%H:%M:%S)/" /tmp/$b.b64 >> $TARGET
      done
      IMPORTS=$(ls /tmp/$MAJOR*.b64 2>/dev/null)
      if [ ! -z "$IMPORTS" ]
      then
        for b in $IMPORTS
        do
          FW_TARGET=$(basename $b .b64)
          echo "echo \"\$VERSION\" | grep -q \"^$FW_TARGET\"" >> $TARGET
          echo "if [ \$? -eq 0 ]; then" >> $TARGET
          sed -e "s/\[\$SCRIPT\]/$SEQUENCE@\$(date +%H:%M:%S)/" $b >> $TARGET
          echo "fi" >> $TARGET
        done
      fi
    else
      if [ $FILENAME = "165-Themes" ]
      then
        sed -e "s/\[\$SCRIPT\]/$SEQUENCE@\$(date +%H:%M:%S)/" /tmp/themes.b64 >> $TARGET
      elif [ $FILENAME = "200-Services" ]
      then
        echo "if [ \$THEME_ONLY = n ]; then" >> $TARGET
        echo "  MKTING_VERSION=\$(uci get version.@version[0].marketing_name)" >> $TARGET
        echo "  for l in \$(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)" >> $TARGET
        echo "  do" >> $TARGET
        echo "    echo $SEQUENCE@\$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in \$l" >> $TARGET
        echo "    sed -e \"s/\(current_year); ngx.print('\)/\\\1 \[tch-gui-unhide $DATE_VERSION for FW Version $MAJOR (\$MKTING_VERSION)\]/\" -i \$l" >> $TARGET
        echo "  done" >> $TARGET
        echo "fi" >> $TARGET
        echo >> $TARGET
      fi
      sed -e "s/\[\$SCRIPT\]/$SEQUENCE@\$(date +%H:%M:%S)/" -e 's/\r$//' "$DIRECTORY/$FILENAME" >> $TARGET
    fi
  done
done

echo Cleaning up..
rm -rf /tmp/tch-gui-unhide/common /tmp/*.b64
echo Build Complete @ $(date +%H:%M:%S) for version $FULL_VERSION
