#!/bin/sh

DATE_VERSION=$(date +%Y.%m.%d)
FULL_VERSION=$(date +%Y.%m.%d@%H:%M)

while getopts v: option
do
  case $option in
    v)  echo $OPTARG | grep -q -E '^[0-9][0-9][0-9][0-9]\.[0-1][0-9]\.[0-3][0-9]$'
        if [ $? -eq 1 ]; then
          echo "ERROR: -v option requires a parameter in the format YYYY.MM.DD"
          exit
        else
          DATE_VERSION="$OPTARG"
          FULL_VERSION="$DATE_VERSION@$(date +%H:%M)"
          echo "Overriding Release - using $FULL_VERSION"
        fi;;
  esac
done
shift $((OPTIND-1))

DIR=$(pwd)

echo Cleaning up..
rm -rf /tmp/additional ../additional/*.b64

echo Building Base64 tar images...
mkdir /tmp/additional
tar --exclude README.md --exclude '*.b64' --exclude '*.new'  -cf - -C ../ansuel/ .  | tar -xf - -C /tmp/additional/
tar --exclude README.md --exclude '*.b64' --exclude '*.new'  -cf - -C ../additional/ .  | tar -xf - -C /tmp/additional/

TARGET=common/075-Enable-Ajax-Modals
rm $TARGET
for a in $(find /tmp/additional/*/www/docroot/ajax -type f)
do
  AJAX=$(basename $a)
  RULE="$(basename $a .lua | sed -e 's/-//g')ajax"
  echo "if [ \"\$(uci -q get web.$RULE)\" != \"rule\" ]" >> $TARGET
  echo "then" >> $TARGET
  echo "  echo [\$SCRIPT]: Enabling $AJAX" >> $TARGET
  echo "  uci add_list web.ruleset_main.rules='$RULE'" >> $TARGET
  echo "  uci set web.$RULE='rule'" >> $TARGET
  echo "  uci set web.$RULE.target='/ajax/$AJAX'" >> $TARGET
  echo "  uci set web.$RULE.normally_hidden='1'" >> $TARGET
  echo "  uci add_list web.$RULE.roles='admin'" >> $TARGET
  echo "  uci commit web" >> $TARGET
  echo "  SRV_nginx=\$(( \$SRV_nginx + 4 ))" >> $TARGET
  echo "fi" >> $TARGET
done
echo "" >> $TARGET

sed -e "s/current_version = \"\"/current_version = \"$FULL_VERSION\"/" -i $(find /tmp/additional -name gui.map)

for d in $(ls /tmp/additional)
do
  if [ -d /tmp/additional/$d ]
  then
    cd /tmp/additional/$d
    for f in $(find . -type f -name "*.lp" -o -name "*.lua")
    do
      sed -e 's/^[ \t]*//g' -e 's/[ \t]*$//' -e 's/\r$//' -i $f
      chmod -x $f
    done
    echo "echo [\$SCRIPT]: Deploy modified $d GUI code" > $DIR/../additional/$d.b64
    echo "echo $(tar --owner=root --group=root -czf - * | base64 | tr -d "$IFS") | base64 -d | tar -xzf - -C /" >> $DIR/../additional/$d.b64
    echo >> $DIR/../additional/$d.b64
    cd $DIR
  fi
done
echo "echo [\$SCRIPT]: Deploy theme files" > ../additional/themes.b64
echo "echo $(tar --owner=root --group=root --mode=644 --transform='s/^\./www/' --exclude=README.md --exclude=./ -czf - -C ../themes . | base64 | tr -d "$IFS") | base64 -d | tar -xzf - -C /" >> ../additional/themes.b64
echo "" >> ../additional/themes.b64

for f in $(find . -mindepth 2 -type d | cut -c3- | tr '/' '-')
do
  MAJOR=$(echo $f | cut -d- -f1)
  MINOR=$(echo $f | cut -d- -f2)
  TARGET=../tch-gui-unhide-$MAJOR.$MINOR
  
  if [ ! -z "$1" -a "$1" != "$MAJOR.$MINOR" ]
  then
    continue
  fi

  echo Writing $TARGET...
  echo "#!/bin/sh" > $TARGET
  echo "echo 000@\$(date +%H:%M:%S): Built for firmware version $MAJOR.$MINOR - Release $DATE_VERSION" >> $TARGET
  echo "RELEASE='$FULL_VERSION'" >> $TARGET

  for s in $(find . -mindepth 2 -type f -a ! -name .do-not-delete -exec sh -c 'echo $(basename {})$(dirname {} | cut -c2-)' \; | sort)
  do
    echo $s | grep -q -E "(common$|${MAJOR}$|${MAJOR}/${MINOR}$)"
    if [ $? -eq 0 ]
    then
      FILENAME="$(echo $s | cut -d/ -f1)"
      SEQUENCE="$(echo $FILENAME | cut -d- -f1)"
      DIRECTORY="$(echo $s | cut -d/ -f2-)"
      if [ $FILENAME = "060-Additional" ]
      then
        for b in $(cat "$DIRECTORY/$FILENAME")
        do
          sed -e "s/\[\$SCRIPT\]/$SEQUENCE@\$(date +%H:%M:%S)/" ../additional/$b.b64 >> $TARGET
        done
      else
        if [ $FILENAME = "165-Themes" ]
        then
          sed -e "s/\[\$SCRIPT\]/$SEQUENCE@\$(date +%H:%M:%S)/" ../additional/themes.b64 >> $TARGET
        elif [ $FILENAME = "200-Services" ]
        then
          echo "if [ \$THEME_ONLY = n ]; then" >> $TARGET
          echo "  for l in \$(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)" >> $TARGET
          echo "  do" >> $TARGET
          echo "    echo $SEQUENCE@\$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in \$l" >> $TARGET
          echo "    sed -e \"s/\(current_year); ngx.print('\)/\\\1 \[tch-gui-unhide $DATE_VERSION for FW Version $MAJOR.$MINOR\]/\" -i \$l" >> $TARGET
          echo "  done" >> $TARGET
          echo "fi" >> $TARGET
          echo >> $TARGET
        fi
        sed -e "s/\[\$SCRIPT\]/$SEQUENCE@\$(date +%H:%M:%S)/" -e 's/\r$//' "$DIRECTORY/$FILENAME" >> $TARGET
      fi
    fi
  done
done

echo Cleaning up..
rm -rf /tmp/additional ../additional/*.b64
echo Build Complete @ $(date +%H:%M:%S) for version $FULL_VERSION
