local dkjson = require("dkjson")
local lfs = require("lfs")
local uci_helper = mapper("ucihelper")
local socket = require("socket")
local adding = {
  black = nil, 
  white = nil,
}

local adblock_cache = {
  status = "",
  version = "",
  overall_domains = "",
  last_rundate = "",
  updated = 0,
}

local function adblockIsRunning()
  local cmd = io.popen("/usr/bin/pgrep adblock | wc -l", "r")
  local procs = cmd:read("*n")
  cmd:close()
  return (procs ~= 0)
end

local function getRuntimeStatusFilename()
  local rtfile = uci_helper.get_from_uci({config="adblock",sectionname="extra",option="adb_rtfile"})
  if not rtfile or rtfile == "" then
    rtfile = "/tmp/adb_runtime.json"
  end
  return rtfile
end

local function getRuntimeStatusJSON()
  local f = io.open(getRuntimeStatusFilename(),"r")
  local j = f:read("*a")
  f:close()
  return j
end

local function getAdblockCachedValue(param,level)
  local rtfile = getRuntimeStatusFilename()
  local modified = lfs.attributes(rtfile,"modification")
  if modified then
    if modified > adblock_cache.updated then
      while (adblockIsRunning()) do
        socket.sleep(2)
      end
      local j = getRuntimeStatusJSON()
      if j and j ~= "" then
        local json = dkjson.decode(j)
        adblock_cache["status"] = json.data.adblock_status
        adblock_cache["version"] = json.data.adblock_version
        adblock_cache["overall_domains"] = json.data.overall_domains
        adblock_cache["last_rundate"] = json.data.last_rundate
        adblock_cache["updated"] = modified
      else
        socket.sleep(2)
        return getAdblockCachedValue(param,level+1)
      end
    end
  else
    local enabled = uci_helper.get_from_uci({config="adblock",sectionname="global",option="adb_enabled"})
    if enabled and enabled == "1" then
      adblock_cache["status"] = "enabled"
    else
      adblock_cache["status"] = "disabled"
    end
    adblock_cache["version"] = "unknown"
    adblock_cache["overall_domains"] = "unknown"
    adblock_cache["last_rundate"] = "unknown"
  end
  if param == "query" then
    return ""
  end
  return adblock_cache[param]
end

local GUI_ADBLOCK_ = {
  objectType = {
    name = "rpc.gui.adblock.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      status = {
        access = "readOnly",
        type = "string"
      },
      version = {
        access = "readOnly",
        type = "string"
      },
      overall_domains = {
        access = "readOnly",
        type = "boolean"
      },
      last_rundate = {
        access = "readOnly",
        type = "boolean"
      },
      query = {
        access = "readWrite",
        type = "string"
      },
    }
  }
}

GUI_ADBLOCK_.get = function(mapping,param,key)
  return getAdblockCachedValue(param,1)
end

GUI_ADBLOCK_.set = {
  query = function(mapping,param,value,key)
    if value == "" then
      return false
    end
    local cmd = io.popen("/etc/init.d/adblock query " .. value, "r")
    local result = cmd:read("*a")
    cmd:close()
    return nil, result
  end,
}

register(GUI_ADBLOCK_)

local format = string.format
local filepattern = "/etc/adblock/adblock.%slist"

local function readList(list)
  local hosts,keys = {},{}
  local f,errmsg = io.open(format(filepattern,list))
  if f then
    local host
    for host in f:lines() do
      local index = #hosts+1
      hosts[index] = host
      keys[index] = tostring(index)
    end
    f:close()
    if adding[list] then
      if adding[list] == #keys then
        adding[list] = nil
      else
        keys[#keys+1]=tostring(adding[list])
      end
    end
  else 
    return nil,nil,errmsg
  end
  return hosts,keys
end

local function writeList(list,hosts)
  local f,errmsg,k,v = io.open(format(filepattern,list),"w+")
  if f then
    for k,v in pairs(hosts) do
      if v then
        f:write(v)
        f:write("\n")
      end
    end
    f:close()
    os.execute("/etc/init.d/adblock reload")
  else
    return nil,errmsg
  end
  return true
end

local function listEntries(list)
  local _,keys = readList(list)
  return keys
end

local function addToList(list)
  local hosts,_,errmsg = readList(list)
  if hosts then
    adding[list] = #hosts+1
    return "@"..tostring(adding[list])
  end
  return nil,errmsg
end

local function deleteFromList(list,key)
  local hosts,_,errmsg = readList(list)
  if hosts then
    hosts[tonumber(key)] = nil
    return writeList(list,hosts)
  end
  return nil,errmsg
end

local function getListValue(list,param,key)
  if param == "host" then
    local hosts = readList(list)
    return hosts[tonumber(key)] or ""
  else
    return nil,"Invalid param " .. param
  end
end

local function setListValue(list,param,value,key)
  if param == "host" then
    local hosts,_,errmsg = readList(list)
    if hosts then
      hosts[tonumber(key)] = value
      return writeList(list,hosts)
    end
    return nil,errmsg
  else
    return nil,"Invalid param " .. param
  end
end

local GUI_ADBLOCK_BLACKLIST_i_ = {
  objectType = {
    name = "rpc.gui.adblock.blacklist.@.",
    access = "readWrite",
    numEntriesParameter = "BlackListNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      host = {
        access = "readWrite",
        type = "string",
      },
    }
  }
}

GUI_ADBLOCK_BLACKLIST_i_.entries = function(mapping)
  return listEntries("black")
end

GUI_ADBLOCK_BLACKLIST_i_.add = function(mapping)
  return addToList("black")
end

GUI_ADBLOCK_BLACKLIST_i_.delete = function(mapping,key)
  return deleteFromList("black",key)
end

GUI_ADBLOCK_BLACKLIST_i_.get = function(mapping,param,key)
  return getListValue("black",param,key)
end

GUI_ADBLOCK_BLACKLIST_i_.set = function(mapping,param,value,key)
  return setListValue("black",param,value,key)
end

register(GUI_ADBLOCK_BLACKLIST_i_)

local GUI_ADBLOCK_WHITELIST_i_ = {
  objectType = {
    name = "rpc.gui.adblock.whitelist.@.",
    access = "readWrite",
    numEntriesParameter = "WhiteListNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      host = {
        access = "readWrite",
        type = "string",
      },
    }
  }
}

GUI_ADBLOCK_WHITELIST_i_.entries = function(mapping)
  return listEntries("white")
end

GUI_ADBLOCK_WHITELIST_i_.add = function(mapping)
  return addToList("white")
end

GUI_ADBLOCK_WHITELIST_i_.delete = function(mapping,key)
  return deleteFromList("white",key)
end

GUI_ADBLOCK_WHITELIST_i_.get = function(mapping,param,key)
  return getListValue("white",param,key)
end

GUI_ADBLOCK_WHITELIST_i_.set = function(mapping,param,value,key)
  return setListValue("white",param,value,key)
end

register(GUI_ADBLOCK_WHITELIST_i_)
