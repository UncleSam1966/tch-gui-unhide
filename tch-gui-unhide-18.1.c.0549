#!/bin/sh
echo 000@$(date +%H:%M:%S): Built for firmware version 18.1.c.0549 - Release 2021.05.16
RELEASE='2021.05.16@09:54'
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on various pages https://hack-technicolor.readthedocs.io/en/stable/

TARGET_VERSION=""
for x in $(basename $0 | tr '-' "$IFS")
do 
  TARGET_VERSION=$x
done
echo "$TARGET_VERSION" | grep -q '\.'
if [ $? -eq 1 ]
then
  echo "ERROR: Unable to determine Target Version!"
  echo "       Did the script get renamed??"
  echo "       Aborting..."
  exit 1
fi
SCRIPT=$(basename $0 | sed "s/-$TARGET_VERSION//")

DFLT_USR=$(uci -q get web.uidefault.defaultuser)
FW_UPGRD=$(uci -q get web.uidefault.upgradefw)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC=$(uci -q get env.var.ssid_mac_postfix_r0)
HOSTNAME=$(uci -q get system.@system[0].hostname)
tmpTITLE="$(grep 'title>.*</title' /www/docroot/gateway.lp | cut -d'>' -f2 | cut -d'<' -f1)"
echo $tmpTITLE | grep -q ngx.print
if [ $? -eq 1 ]; then
  TITLE="$tmpTITLE"
else
  TITLE=""
fi

if [ -f /usr/tch-gui-unhide.theme ]; then
  mv /usr/tch-gui-unhide.theme /etc/tch-gui-unhide.theme
fi
if [ -f /etc/tch-gui-unhide.theme ]; then
  . /etc/tch-gui-unhide.theme
fi
if [ -z "$THEME" ]; then
  KEEPLP=n
  grep -q 'body{background-color:#353c42;' /www/docroot/css/gw.css
  if [ $? -eq 0 ]; then
    THEME=night
  else
    grep -q 'body{background-color:#fff;' /www/docroot/css/gw.css
    if [ $? -eq 0 ]; then
      THEME=light
    else
      THEME=telstra
      grep -q 'body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color' /www/docroot/css/gw-telstra.css
      if [ $? -eq 1 -a -f /www/snippets/tabs-home.lp ]; then
        grep -q 'T"Boost Your Wi-Fi"' /www/snippets/tabs-home.lp
        if [ $? -eq 1 ]; then
          KEEPLP=y
        else
          KEEPLP=n
        fi
      fi
    fi
  fi
  case "$(grep '.smallcard .header{background-color:#......;}' /www/docroot/css/gw.css  | cut -d# -f2 | cut -d\; -f1)" in
    "005c32") COLOR=green;;
    "662e91") COLOR=purple;;
    "f36523") COLOR=orange;;
    "008fd5") COLOR=blue;;
    "272c30") COLOR=monochrome;;
    *) if [ $THEME = light ]; then COLOR=monochrome; else COLOR=blue; fi;;
  esac
  ICONS="$(grep '.card_bg:after{visibility:' /www/docroot/css/gw.css | cut -d: -f3 | cut -d\; -f1)"
fi

grep -q 'rpc.gui.pwd.@' /www/docroot/modals/mmpbx-profile-modal.lp
if [ $? -eq 0 ]; then
  SIP_PWDS=y
else
  SIP_PWDS=n
fi

INSTALLED_RELEASE="$(grep -o -m 1 -E '[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]@[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' /usr/share/transformer/mappings/rpc/gui.map 2>/dev/null)"

grep -q 'rpc.gui.UpdateAvailable' /www/docroot/gateway.lp
if [ $? -eq 0 ]; then
  UPDATE_BTN=y
else
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp
  if [ $? -eq 0 ]; then
    UPDATE_BTN=n
  else
    UPDATE_BTN=y
  fi
fi

FIX_DFLT_USR=n
FIX_FW_UPGRD=n
if [ "$(uci -q get dropbear.lan.enable)" = "1" -a "$(uci -q get dropbear.lan.PasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootLogin)" = "1" ]; then
  FIX_SSH=n
else
  FIX_SSH=y
fi
if [ "$(uci -q get system.config.export_plaintext)" = "1" -a "$(uci -q get system.config.export_unsigned)" = "1" -a "$(uci -q get system.config.import_plaintext)" = "1" -a "$(uci -q get system.config.import_unsigned)" = "1" ]; then
  FIX_CFG_PORT=n
else
  FIX_CFG_PORT=y
fi
echo "$(uci -q get web.parentalblock.roles)" | grep -q "admin"
if [ $? -eq 0 ]; then
  FIX_PARENT_BLK=n
else
  FIX_PARENT_BLK=y
fi

# Keep count of changes so we know whether to restart services
SRV_cron=0
SRV_dropbear=0
SRV_nginx=0
SRV_power=0
SRV_system=0
SRV_transformer=0

check_pwr_setting() {
  section="$1"
  option="$2"
  text="$3"
  if [ -z "$(uci -q get power.$section.$option)" ]; then
    pwrctl show | grep "$text" | grep -q DISABLED
    uci set power.$section.$option="$?"
    SRV_power=$(( $SRV_power + 1 ))
  fi
}

apply_service_changes() {
  if [ $SRV_transformer -gt 0 ]; then
    # Need to stop watchdog whilst we restart transformer, because if it does not find /var/run/transformer.pid, it will reboot the system!
    /etc/init.d/watchdog-tch stop
    /etc/init.d/transformer restart
    /etc/init.d/watchdog-tch start
  fi
  [ $SRV_cron -gt 0 ] && /etc/init.d/cron restart
  [ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear restart
  [ $SRV_system -gt 0 ] && /etc/init.d/system reload
  [ $SRV_nginx -gt 0 ] && /etc/init.d/nginx restart

  if [ -z "$(uci -q get power.cpu)" ];then
    uci set power.cpu='cpu'
  fi

  if [ -z "$(uci -q get power.cpu.cpuspeed)" ]; then
    case "$(pwrctl show | grep "CPU Speed Divisor" | tr -s " " | cut -d" " -f4)" in
      1) uci set power.cpu.cpuspeed="1";;
      2) uci set power.cpu.cpuspeed="2";;
      4) uci set power.cpu.cpuspeed="4";;
      5) uci set power.cpu.cpuspeed="8";;
      *) uci set power.cpu.cpuspeed="256";;
    esac
    SRV_power=$(( $SRV_power + 1 ))
  fi
  check_pwr_setting "cpu" "wait" "CPU Wait"
  check_pwr_setting "ethernet" "ethapd" "Auto Power"
  check_pwr_setting "ethernet" "eee" "Energy Efficient Ethernet"
  check_pwr_setting "ethernet" "autogreeen" "AutoGreeen"
  check_pwr_setting "ethernet" "dgm" "Deep Green Mode"
  [ $SRV_power -gt 0 ] && uci commit power
}

RESTORE=n
WRAPPER=n
YES=n
THEME_ONLY='n'

FILENAME=$(basename $0)

while getopts :c:d:f:h:i:l:p:rt:uv:yTVW option
do
 case "${option}" in
   c) case "$(echo ${OPTARG} | tr "BGMOPR" "bgmopr" | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;; 
        g) COLOR=green;; 
        o) COLOR=orange;; 
        p) COLOR=purple;; 
        r) COLOR=red;; 
        *) COLOR=monochrome;;
      esac;;
   d) case "${OPTARG}" in y|Y) FIX_DFLT_USR=y; DFLT_USR='admin';; n|N) FIX_DFLT_USR=y; DFLT_USR='';;  *) echo 'WARNING: -d valid options are y or n';; esac;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPGRD=y; FW_UPGRD='1';;     n|N) FIX_FW_UPGRD=y; FW_UPGRD='0';; *) echo 'WARNING: -f valid options are y or n';; esac;;
   h) case "${OPTARG}" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        s) TITLE="$VARIANT-$MAC";;
        *) TITLE="$OPTARG";;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   l) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then KEEPLP=y; else KEEPLP=n; fi;;
   p) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then SIP_PWDS=y; else SIP_PWDS=n; fi;;
   r) RESTORE=y;;
   t) case "${OPTARG}" in
        g) THEME=night; COLOR=green; KEEPLP=n; echo WARNING: -tg deprecated. Use -tn -cg in future;; 
        o) THEME=night; COLOR=orange; KEEPLP=n; echo WARNING: -to deprecated. Use -tn -co in future;; 
        p) THEME=night; COLOR=purple; KEEPLP=n; echo WARNING: -tp deprecated. Use -tn -cp in future;; 
        l) THEME=light; COLOR=monochrome; KEEPLP=n;;
        m) THEME=telstramodern; COLOR=blue; KEEPLP=y;;
        n) THEME=night; COLOR=blue; KEEPLP=n;;
        *) THEME=telstra; COLOR=blue; KEEPLP=y;;
      esac;;
   u) RESULT=$(curl -m 5 -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else 
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]
                then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo "002@$(date +%H:%M:%S): Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]
                then
                  chmod +x $FILENAME
                  echo "002@$(date +%H:%M:%S): Successfully updated $FILENAME."
                  return 0
                else
                  echo "002@$(date +%H:%M:%S): Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo "002@$(date +%H:%M:%S): Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   v) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then UPDATE_BTN=y; else UPDATE_BTN=n; fi;;
   y) YES=y;;
   T) THEME_ONLY=y;;
   V) LATEST_RELEASE=$(curl -m 1 -q -s -k -L -r0-9 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt)
      echo "002@$(date +%H:%M:%S): This Release       $RELEASE"
      if [ -z "$INSTALLED_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Installed Release  NOT INSTALLED"
      else
        echo "002@$(date +%H:%M:%S): Installed Release  $INSTALLED_RELEASE"
      fi
      if [ -z "$LATEST_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Latest Release     UNKNOWN (No internet access?)"
      else
        echo "002@$(date +%H:%M:%S): Latest Release     $LATEST_RELEASE"
      fi
      exit;;      
   W) WRAPPER=y;;
   ?) echo "Optional parameters:"
      echo " Control Options:"
      echo " -d y|n         : Enable (y) or Disable (n) Default user (i.e. GUI access without password)"
      echo "                    (Default is current setting)"
      echo " -f y|n         : Enable (y) or Disable (n) firmware upgrade in the web GUI"
      echo "                    (Default is current setting)"
      echo " -p y|n         : Use decrypted text (y) or masked password (n) field for SIP Profile passwords"
      echo "                    (Default is current setting i.e (n) by default)"
      echo " -v y|n         : Enable (y) check for new releases and show 'Update Available' button in GUI, or Disable (n)"
      echo "                    (Default is current setting or (y) for first time installs)"
      echo " Theme Options:"
      echo " -c b|o|g|p|r|m : Set the theme highlight colour"
      echo "                    b=blue o=orange g=green p=purple r=red m=monochrome"
      echo "                    (Default is current setting, or (m) for light theme or (b) for night theme)"
      echo " -h d|s|n|\"txt\" : Set the browser tabs title (Default is current setting)"
      echo "                    (d)=$VARIANT (s)=$VARIANT-$MAC (n)=$HOSTNAME (\"txt\")=Specified \"txt\""
      echo " -i y|n         : Show (y) or hide (n) the card icons"
      echo "                    (Default is current setting, or (n) for light theme and (y) for night theme)"
      echo " -l y|n         : Keep the Telstra landing page (y) or de-brand the landing page (n)"
      echo "                    (Default is current setting, or (n) if no theme has been applied)"
      echo " -t l|n|t|m     : Set a light (l), night (n), or Telstra-branded Classic (t) or Modern (m) theme"
      echo "                    (Default is current setting, or Telstra Classic if no theme has been applied)"
      echo " -T             : Apply theme ONLY - bypass all other processing"
      echo " Update Options:"
      echo " -u             : Check for and download any changes to this script (may be newer than latest release version)"
      echo "                    When specifying the -u option, it must be the ONLY parameter specifed."
      if [ $WRAPPER = y ]; then
      echo " -U             : Download the latest release, including utility scripts (will overwrite all existing script versions)."
      echo "                    When specifying the -U option, it must be the ONLY parameter specifed."
      fi
      echo " Miscellaneous Options:"
      echo " -r             : Restore changed GUI files to their original state (config changes are NOT restored)"
      echo "                    When specifying the -r option, it must be the ONLY parameter specifed."
      echo " -y             : Bypass confirmation prompt (answers 'y')"
      echo " -V             : Show the release number of this script, the current installed release, and the latest available release on GitHub"
      echo 
      echo "NOTE #1: Theme (-t) does not need to be re-specified when re-running the script: current state will be 'remembered'"
      echo "         between executions (unless you execute with the -r option, which will remove all state information)"
      echo "NOTE #2: Use tch-gui-unhide-cards to set card order and visibility"
      echo
      exit;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

if [ $THEME_ONLY = n ]; then
restore_www() {
  # File deployed to incorect location by releases prior to 2021.02.06
  if [ -f /usr/share/transformer/mappings/iperf.map ]; then
    rm /usr/share/transformer/mappings/iperf.map
  fi
  # Need to remove existing version or it doesn't get replaced?? 
  if [ -f /usr/sbin/traffichistory.lua ]; then
    if [ "$1" = "V" ]; then
      echo 010@$(date +%H:%M:%S): Removing file /usr/sbin/traffichistory.lua
    fi
    rm /usr/sbin/traffichistory.lua
  fi
  grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
  if [ $? -eq 0 ]; then
    sed -e '/traffichistory.lua/d' -i /etc/crontabs/root
    SRV_cron=$(( $SRV_cron + 1 ))
  fi
  # Add individual files to be restored here
  for t in /etc/init.d/power
  do
    s=/rom$t
    if [ -f $s ]; then
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        echo 010@$(date +%H:%M:%S): Restoring file $t
        cp -f -p "$s" "$t"
      fi
    fi
  done
  # Add directories to be restored here
  for d in www/cards www/docroot www/lua www/snippets usr/share/transformer/commitapply usr/share/transformer/mappings/rpc usr/share/transformer/mappings/uci
  do
    echo 010@$(date +%H:%M:%S): Restoring directory /$d
    for s in $(find /rom/$d -type f | grep -v -E \(/rom/www/docroot/help\))
    do
      if [ "$s" = "/rom/www/cards/010_lte.lp" ]
      then
        t="/www/cards/003_lte.lp"
      else
        t=$(echo "$s" | cut -c5-)
      fi
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        if [ "$1" = "V" ]; then
          echo 014@$(date +%H:%M:%S): Restoring file $t
        fi
        cp -f -p "$s" "$t"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done

    for f in $(find /$d -type f ! -path '/www/docroot/help*' ! -name '003_lte.lp')
    do
      if [ ! -f "/rom$f" -a -f "$f" ]; then
        if [ "$1" = "V" ]; then
          echo 019@$(date +%H:%M:%S): Removing file $f
        fi
        rm -f "$f"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done
  done
}

if [ $RESTORE = y ]; then
  restore_www V
  for f in /etc/tch-gui-unhide.ignored_release /etc/tch-gui-unhide.theme
  do
    if [ -f "$f" ]
    then
      echo 019@$(date +%H:%M:%S): Removing $f
      rm "$f"
    fi
  done
  for d in /www/docroot/css/light /www/docroot/css/night /www/docroot/css/telstra /www/docroot/img/light /www/docroot/img/night /www/docroot/css/Telstra
  do
    if [ -d "$d" ]
    then
      echo 019@$(date +%H:%M:%S): Removing empty directory $d
      rmdir "$d"
    fi
  done
  for s in $(uci show web | grep normally_hidden | cut -d. -f2)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry web.$s
    uci -q delete web.$s
    uci -q del_list web.ruleset_main.rules="$s"
    SRV_nginx=$(( $SRV_nginx + 2 ))
  done
  for s in $(uci show web | grep '=card' | cut -d= -f1)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry $s
    uci -q delete $s
    SRV_nginx=$(( $SRV_nginx + 1 ))
  done
  RULES=$(uci get web.ruleset_main.rules)
  for s in $(echo $RULES | tr " " "\n" | grep -v dumaos | sort -u)
  do
    TARGET=$(uci -q get web.$s.target)
    if [ ! -z "$TARGET" -a ":$TARGET" != ":/" -a ! -f /www/docroot$TARGET -a ! -f /www$TARGET -a ! -f /www/docroot/ajax$TARGET ]; then
      echo 019@$(date +%H:%M:%S): Removing config entry web.$s
      uci -q delete web.$s
      uci -q del_list web.ruleset_main.rules="$s"
      SRV_nginx=$(( $SRV_nginx + 2 ))
    else
      ROLE=$(uci -q get web.$s.roles)
      if [ ! -z "$ROLE" -a "$ROLE" = "nobody" ]; then
        echo 019@$(date +%H:%M:%S): Resetting admin role on config entry web.$s.roles
        uci -q delete web.$s.roles
        uci add_list web.$s.roles="admin"
        SRV_nginx=$(( $SRV_nginx + 2 ))
      fi
    fi
  done
  uci commit web
  sed -e '/lua_shared_dict *TGU_MbPS/d' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
  apply_service_changes
  echo "************************************************************"
  echo "* Restore complete. You should clear your browser cache of *"
  echo "* images and files to make sure you can see the changes.   *"
  echo "* NOTE: No config changes have been restored, except to    *"
  echo "*       remove added entries to display hidden modals.     *"
  echo "************************************************************"
  exit
fi

VERSION=$(uci get version.@version[0].version | cut -d- -f1)
if [ "$VERSION" = "$TARGET_VERSION" ]
then
  echo 020@$(date +%H:%M:%S): Current version matches target \($TARGET_VERSION\)
else
  echo 020@$(date +%H:%M:%S): WARNING: This script was developed for the $TARGET_VERSION firmware.
  echo 020@$(date +%H:%M:%S): It MAY work on your $VARIANT with $VERSION firmware, but it also may not.
  echo 020@$(date +%H:%M:%S): If you still wish to proceed, reply FORCE \(in capitals as shown\).
  read
  if [ "$REPLY" != "FORCE" ]
  then
    echo 020@$(date +%H:%M:%S): Good choice.
    exit
  fi
fi

echo "030@$(date +%H:%M:%S): This script will perform the following actions:"
if [ $FIX_SSH = y ]; then
echo "030@$(date +%H:%M:%S):  - Properly enable SSH access over LAN"
fi
echo "030@$(date +%H:%M:%S):  - Preserve the password files and SSH configuration to prevent root loss on RTFD"
if [ $FIX_CFG_PORT = y ]; then
echo "030@$(date +%H:%M:%S):  - Enable unsigned configuration export/import in the web GUI"
fi
if [ $FIX_FW_UPGRD = y ]; then
if [ "$FW_UPGRD" = "1" ]; then
echo "030@$(date +%H:%M:%S):  - Enable firmware upgrade in the web GUI"
else
echo "030@$(date +%H:%M:%S):  - DISABLE firmware upgrade in the web GUI"
fi
fi
if [ $FIX_DFLT_USR = y ]; then
if [ "$DFLT_USR" = "admin" ]; then
echo "030@$(date +%H:%M:%S):  - ENABLE the default user in the web GUI (i.e. GUI access without password)"
else
echo "030@$(date +%H:%M:%S):  - Disable the default user in the web GUI"
fi
fi
if [ $FIX_PARENT_BLK = y ]; then
echo "030@$(date +%H:%M:%S):  - Ensure admin role can administer the parental block"
fi
if [ -z "$INSTALLED_RELEASE" ]; then
echo "030@$(date +%H:%M:%S):  - Install tch-gui-unhide release $RELEASE"
else
echo "030@$(date +%H:%M:%S):  - Replace tch-gui-unhide release $INSTALLED_RELEASE with $RELEASE"
fi
echo "030@$(date +%H:%M:%S):  - Allow editing of various settings that are not exposed in the stock GUI"
echo "030@$(date +%H:%M:%S):  - Unhide various cards and tabs contained in the stock GUI that are normally hidden"
echo "030@$(date +%H:%M:%S):  - Add new cards and screens, and modified cards and screens from the Ansuel tch-nginx-gui"
echo "030@$(date +%H:%M:%S):  - The GUI screens will be prettied up a bit and the $THEME theme applied with $COLOR highlights and $ICONS card icons"
if [ -f /www/docroot/landingpage.lp ]; then
echo "030@$(date +%H:%M:%S):  - The Telstra Landing Page will be $(echo $KEEPLP | sed -e 's/y/left UNCHANGED/' -e 's/n/themed and de-branded/')"
fi
if [ ! -z "$TITLE" ]; then
echo "030@$(date +%H:%M:%S):  - The browser tabs titles will be set to $TITLE"
fi
if [ "$SIP_PWDS" = y ]; then
echo "030@$(date +%H:%M:%S):  - SIP Profile passwords will be decrypted and displayed in text fields rather than password fields"
fi
if [ "$UPDATE_BTN" = y ]; then
echo "030@$(date +%H:%M:%S):  - New release checking is ENABLED and 'Update Available' will be shown in GUI when new version released"
else
echo "030@$(date +%H:%M:%S):  - New release checking is DISABLED! 'Update Available' will NOT be shown in GUI when new version released"
fi

echo 030@$(date +%H:%M:%S): If you wish to proceed, enter y otherwise just press [Enter] to stop.
if [ $YES = y ]; then
  REPLY=y
else
  read
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

echo 030@$(date +%H:%M:%S): IMPORTANT NOTE - You can restore changed GUI files to their original state by running: $0 -r

# Package repository for Homeware 18 moved 31/03/2021 (Quick fix in case de-telstra not run)
if [ $(grep -c 'www.macoers.com/repository' /etc/opkg/customfeeds.conf) -gt 0 ]; then
  echo 040@$(date +%H:%M:%S): Fixing opkg repository
  sed -e 's|www.macoers.com/repository|repository.macoers.com|' -i /etc/opkg/customfeeds.conf
fi

if [ $FIX_SSH = y ]; then
  echo 040@$(date +%H:%M:%S): Properly enabling SSH access over LAN
  # We need to enable this properly as you can enable/disable via the GUI, and if done
  # without allowing password auth and root login, it can accidently prevent SSH access
  uci set dropbear.lan.enable='1'
  uci set dropbear.lan.PasswordAuth='on'
  uci set dropbear.lan.RootPasswordAuth='on'
  uci set dropbear.lan.RootLogin='1'
  uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
fi
  
if [ $FIX_CFG_PORT = y ]; then
  echo 040@$(date +%H:%M:%S): Enabling unsigned configuration export/import in the web GUI
  uci set system.config.export_plaintext='1'
  uci set system.config.export_unsigned='1'
  uci set system.config.import_plaintext='1'
  uci set system.config.import_unsigned='1'
  uci commit system
  SRV_system=$(( $SRV_system + 4 ))
fi

if [ $FIX_FW_UPGRD = y ]; then
  if [ $FW_UPGRD = 1 ]; then
    echo 040@$(date +%H:%M:%S): Enabling firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='1'
    uci set web.uidefault.upgradefw_role='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  else
    echo 040@$(date +%H:%M:%S): DISABLING firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='0'
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
  uci commit web
fi

if [ $FIX_DFLT_USR = y ]; then
  if [ "$DFLT_USR" = "admin" ]; then
    echo 040@$(date +%H:%M:%S): Enabling the default user in the web GUI
    uci set web.default.default_user='usr_admin'
    uci set web.uidefault.defaultuser='admin'
  else
    echo 040@$(date +%H:%M:%S): Disabling the default user in the web GUI
    uci -q delete web.default.default_user
    uci -q delete web.uidefault.defaultuser
  fi
  uci commit web
  SRV_web=$(( $SRV_web + 2 ))
fi

if [ $FIX_PARENT_BLK = y ]; then
  echo 040@$(date +%H:%M:%S): Ensuring admin role can administer the parental block
  uci -q del_list web.parentalblock.roles='admin'
  uci add_list web.parentalblock.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

grep -q -E "lua_shared_dict *TGU_MbPS" /etc/nginx/nginx.conf
if [ $? -eq 1 ]; then
  echo 040@$(date +%H:%M:%S): Creating shared dictionary for throughput calculations
  sed -e '/^http/a\    lua_shared_dict TGU_MbPS 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

echo 040@$(date +%H:%M:%S): Preserving password files and SSH configuration to prevent root loss on RTFD
for f in /etc/passwd /etc/shadow /etc/config/dropbear /etc/dropbear/* /etc/rc.d/*dropbear
do
  grep -q -E "^$f$" /etc/rtfd_persistent_filelist.conf
  if [ $? -eq 1 ]
  then
    echo "$f">>/etc/rtfd_persistent_filelist.conf
  fi
done

echo 050@$(date +%H:%M:%S): Ensuring card sequence and visibility is up to date
ALLCARDRULES="$(uci show web | grep =card)"
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="${CARDFILE#*_}"
  CARDRULE="card_$(basename $CARD .lp)"
  MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
  HIDDEN=$(uci -q get web.${CARDRULE}.hide)
  if [ -z "$MODAL" ]
  then
    MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
  fi
  MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
  if [ ! -z "$MODALRULE" -a "$(uci -q get web.$MODALRULE.roles)" != "admin" ]
  then
    echo "050@$(date +%H:%M:%S):  - Converting $CARD card visibility from modal-based visibility"
    HIDDEN=1
    uci -q delete web.$MODALRULE.roles
    uci add_list web.$MODALRULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  if [ -z "$HIDDEN" -o \( "$HIDDEN" != "0" -a "$HIDDEN" != "1" \) ]
  then
    HIDDEN=0
  fi
  uci set web.${CARDRULE}=card
  uci set web.${CARDRULE}.card="$(basename $CARDFILE)"
  uci set web.${CARDRULE}.modal="$MODALRULE"
  uci set web.${CARDRULE}.hide="$HIDDEN"
  SRV_nginx=$(( $SRV_nginx + 4 ))
done
uci commit web

# Do the restore
restore_www
echo 050@$(date +%H:%M:%S): Pre-update restore completed

echo 060@$(date +%H:%M:%S): Deploy modified iperf GUI code
echo H4sIAAAAAAAAA+2UvU7DMBCAM0fKO1ieWqkNTmInExMzEw8QheCWSGls2c6AUN8d2xG0VPQP2iDEfYvj8+l81ndKr9VNcGWIpWDMr5bd1X8nWUGLIrWJRUASQkkWIHbtxhy9NpVCKFBCmEN5x87/KL31r58rxa84Bef7Txhh4H8MNv6Nqjq9EGrFL/1HON8/JbQA/2Pwtf9VJWXTLfVlBuEk/9TmZEWSp6n1z3KWgP8xOOK/r5ufz8D5/nOagf9ROMF/I7laxDb03Tuc4JzSvf4ZyT/7T0ma5QEil3zoPv65/1bUVYtq0S2aZelNo1uE/QeOwiicz5GdgdgHotDNBVcTbENlYkSCp7Hiy0Ybru58iftKTraLTXdrxMNpFA4X+1g5xOzFr1GI0Mduu9DMnWhem0Z0mw591LxIvhMS0uXp94oIYamEEXiG8BPXppRCGbfhXfXYcuxy1lG4ds0eeOJDs5Itd0/cbnuKovC3LQIAAAAAAAAAAAAAAAAAAAAAAADAwBuC/9IzACgAAA== | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified broadband GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified devices GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified eco GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified firewall GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified gateway GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified internet GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified iproutes GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified lte GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified management GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified multiap GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified qos GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified system GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified telephony GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified theme GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified tod GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified wireless GUI code
echo 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 | base64 -d | tar -xzf - -C /

if [ -f /www/docroot/booster.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local lp = require("web.lp")/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    -e 's#/booster.lp#/modals/wireless-boosters-boosters-modal.lp#' \
    /www/docroot/booster.lp > /www/docroot/modals/wireless-boosters-boosters-modal.lp
fi
if [ -f /www/docroot/boosterstatus.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster status screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/require("web.content_helper")/a local ui_helper = require("web.ui_helper")' \
    -e '/local type_convert/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#networkmap span12#networkmap#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/boosterstatus.lp > /www/docroot/modals/wireless-boosters-status-modal.lp
fi
if [ -f /www/docroot/wifidevices.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster Wi-Fi devices screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local content =/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/wifidevices.lp > /www/docroot/modals/wireless-boosters-devices-modal.lp
fi

grep -q swshaper /usr/share/transformer/mappings/uci/qos.map
if [ $? -eq 1 ]; then
  echo 066@$(date +%H:%M:%S): Configure transformer for QoS shaping
  sed \
    -e 's/"force_pcp" }/"force_pcp", "swshaper" }/' \
    -e '$a \\' \
    -e '$a \--uci.qos.swshaper' \
    -e '$a \local qos_swshaper = {' \
    -e '$a \  config = config_qos,' \
    -e '$a \  type = "swshaper",' \
    -e '$a \  options = { "enable", "max_bit_rate" }' \
    -e '$a \}' \
    -e '$a \mapper("uci_1to1").registerNamedMultiMap(qos_swshaper)' \
    -i /usr/share/transformer/mappings/uci/qos.map
  SRV_transformer=$(( $SRV_transformer + 1 ))
fi

echo 066@$(date +%H:%M:%S): Importing Traffic Monitor into Diagnostics
sed \
  -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
  -e '/^local attributes/i \    ngx.print(ui_helper.createHeader(T"Diagnostics", false, false, nil, nil) )' \
  -e '/"tabs-services/i <div class="modal-body update">\\' \
  -e '/^<div class="container toplevel">/d' \
  -e '/^<div class="row">/d' \
  -e '/^<div class="span11">/d' \
  -e '/^<fieldset>/,/^\\/d' \
  -e '/^<\/script>/a <\/script>\\' \
  -e '/^<\/script>/a <\/div>\\' \
  -e '/^<\/script>/,/^\\/d' \
  -e 's|tabs-services|tabs-diagnostics|' \
  -e 's|lp.include("footer.lp")|ngx.print(ui_helper.createFooter())|' \
  -e 's|800px;|900px;margin:0 auto;|' \
  -e 's|traffic.lp|modals/diagnostics-traffic-modal.lp|' \
  -e 's|<a href="%s" target="_self">|<a href="#" data-remote="%s">|' \
  -e 's|@wwan.up")\[1\].value|@wwan.up")|' \
  -e 's|if wwan_up|if wwan_up and wwan_up[1].value|' \
  /www/docroot/traffic.lp > /www/docroot/modals/diagnostics-traffic-modal.lp

echo 067@$(date +%H:%M:%S): Creating QoS Reclassify Rules modal
sed \
  -e 's/\(classify[\.-_%]\)/re\1/g' \
  -e 's/Classify/Reclassify/' \
  /www/docroot/modals/qos-classify-modal.lp > /www/docroot/modals/qos-reclassify-modal.lp

if [ -f /etc/init.d/cwmpd ]
then
  echo 070@$(date +%H:%M:%S): CWMP found - Leaving in GUI
else
  echo 070@$(date +%H:%M:%S): CWMP not found - Removing from GUI
  rm /www/cards/090_cwmpconf.lp
  rm /www/docroot/modals/cwmpconf-modal.lp
  uci -q delete web.cwmpconfmodal
  uci -q del_list web.ruleset_main.rules=cwmpconfmodal
  uci -q delete web.card_cwmpconf
fi

if [ $(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | wc -l) -eq 0 ]
then
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs not found - Removing from GUI
  rm /www/cards/010_fon.lp
  rm /www/docroot/modals/fon-modal.lp
  uci -q delete web.fon
  uci -q delete web.fonmodal
  uci -q del_list web.ruleset_main.rules=fon
  uci -q del_list web.ruleset_main.rules=fonmodal
  uci -q delete web.card_fon
else
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs FOUND - Leaving in GUI
fi

# Check all modals are enabled, except:
#  - diagnostics-airiq-modal.lp (requires Flash player)
#  - mmpbx-sipdevice-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - mmpbx-statistics-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - speedservice-modal.lp
#  - wireless-qrcode-modal.lp (fails with a nil password index error)
echo 070@$(date +%H:%M:%S): Checking modal visibility
for f in $(ls /www/docroot/modals | grep -E -v \(diagnostics-airiq-modal.lp\|mmpbx-sipdevice-modal.lp\|mmpbx-statistics-modal.lp\|speedservice-modal.lp\|wireless-qrcode-modal.lp\) )
do
  MODAL=$(basename $f)
  uci show web | grep -q "/modals/$MODAL"
  if [ $? -eq 1 ]
  then
    CREATE_RULE=y
    RULE=$(basename $f .lp | sed -e 's/-//g')
  else
    CREATE_RULE=n
    RULE=$(uci show web | grep "/modals/$MODAL" | grep -m 1 -v card_ | cut -d. -f2)
  fi
  if [ $CREATE_RULE = y ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL
    uci add_list web.ruleset_main.rules=$RULE
    uci set web.$RULE=rule
    uci set web.$RULE.target=/modals/$MODAL
    uci set web.$RULE.normally_hidden='1'
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL 
    uci -q delete web.$RULE.roles
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
done
uci commit web

echo 070@$(date +%H:%M:%S): Processing any additional cards
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="$(basename $CARDFILE)"
  CARDRULE=$(uci show web | grep "^web\.card_.*${CARDFILE#*_}" | cut -d. -f2)
  if [ -z "$CARDRULE" -o -z "$(uci -q get web.${CARDRULE}.modal)" ]
  then
    CARDRULE="card_$(basename ${CARDFILE#*_} .lp)"
    MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
    if [ -z "$MODAL" ]
    then
      MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
    fi
    MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
    uci set web.${CARDRULE}=card
    uci set web.${CARDRULE}.card="$CARD"
    uci set web.${CARDRULE}.modal="$MODALRULE"
    uci set web.${CARDRULE}.hide='0'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  fi
done

if [ "$(uci -q get web.broadbandstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling broadband-status.lua
  uci add_list web.ruleset_main.rules='broadbandstatusajax'
  uci set web.broadbandstatusajax='rule'
  uci set web.broadbandstatusajax.target='/ajax/broadband-status.lua'
  uci set web.broadbandstatusajax.normally_hidden='1'
  uci add_list web.broadbandstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.networkthroughputajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling network-throughput.lua
  uci add_list web.ruleset_main.rules='networkthroughputajax'
  uci set web.networkthroughputajax='rule'
  uci set web.networkthroughputajax.target='/ajax/network-throughput.lua'
  uci set web.networkthroughputajax.normally_hidden='1'
  uci add_list web.networkthroughputajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.devicesstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling devices-status.lua
  uci add_list web.ruleset_main.rules='devicesstatusajax'
  uci set web.devicesstatusajax='rule'
  uci set web.devicesstatusajax.target='/ajax/devices-status.lua'
  uci set web.devicesstatusajax.normally_hidden='1'
  uci add_list web.devicesstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.vendorajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling vendor.lua
  uci add_list web.ruleset_main.rules='vendorajax'
  uci set web.vendorajax='rule'
  uci set web.vendorajax.target='/ajax/vendor.lua'
  uci set web.vendorajax.normally_hidden='1'
  uci add_list web.vendorajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.gatewaystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling gateway-status.lua
  uci add_list web.ruleset_main.rules='gatewaystatusajax'
  uci set web.gatewaystatusajax='rule'
  uci set web.gatewaystatusajax.target='/ajax/gateway-status.lua'
  uci set web.gatewaystatusajax.normally_hidden='1'
  uci add_list web.gatewaystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.internetstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling internet-status.lua
  uci add_list web.ruleset_main.rules='internetstatusajax'
  uci set web.internetstatusajax='rule'
  uci set web.internetstatusajax.target='/ajax/internet-status.lua'
  uci set web.internetstatusajax.normally_hidden='1'
  uci add_list web.internetstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.telephonystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling telephony-status.lua
  uci add_list web.ruleset_main.rules='telephonystatusajax'
  uci set web.telephonystatusajax='rule'
  uci set web.telephonystatusajax.target='/ajax/telephony-status.lua'
  uci set web.telephonystatusajax.normally_hidden='1'
  uci add_list web.telephonystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.ssidstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling ssid-status.lua
  uci add_list web.ruleset_main.rules='ssidstatusajax'
  uci set web.ssidstatusajax='rule'
  uci set web.ssidstatusajax.target='/ajax/ssid-status.lua'
  uci set web.ssidstatusajax.normally_hidden='1'
  uci add_list web.ssidstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi

echo 080@$(date +%H:%M:%S): Use the nicer green spinner
for lp in $(grep -l -r 'spinner.gif' /www 2>/dev/null | sort | xargs)
do
  sed -e 's/spinner\.gif/spinner-green.gif/' -i $lp
done

SERIAL=$(uci get env.var.serial)
echo 080@$(date +%H:%M:%S): Change config export filename from config.bin to $VARIANT-$SERIAL-$VERSION@YYMMDD.bin
echo 080@$(date +%H:%M:%S): Add reset/upgrade warnings
sed \
  -e "s/=config.bin/=$VARIANT-$SERIAL-$VERSION@\" .. os.date(\"%Y%m%d\") .. \".bin/" \
  -e '/local basic =/i local lose_root_warning = { alert = { class = "alert-info", style = "margin-bottom:5px;" }, }' \
  -e '/T"Reset"/i \    html[#html + 1] = ui_helper.createAlertBlock(T"Root access <i>should</i> be preserved when using the <b><i class=\\"icon-bolt\\" style=\\"width:auto;\\">\</i> Reset</b> button. You can use the <i>reset-to-factory-defaults-with-root</i> utility script from the command line to have more control over the factory reset and still retain root access.", lose_root_warning)' \
  -e '/T"Upgrade"/i \          html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Upgrading firmware using this method will cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script with the -f option from the command line to upgrade to the firmware and still retain root access.", lose_root_warning)' \
  -e '/"uci.versioncusto.override.fwversion_override"/a \   unhide_version = "rpc.gui.UnhideVersion",' \
  -e '/"Serial Number"/i \    html[#html + 1] = ui_helper.createLabel(T"tch-gui-unhide Version", content["unhide_version"], basic)' \
  -e '/Global Information/d' \
  -i /www/docroot/modals/gateway-modal.lp

if [ "$UPDATE_BTN" = y ]; then
  echo 080@$(date +%H:%M:%S): Add update available button
  sed \
    -e '/uci.version.version.@version\[0\].timestamp/a\    updatable = "rpc.gui.UpdateAvailable",' \
    -e '/isBridgedMode/i\        if cui.updatable == "1" then' \
    -e "/isBridgedMode/i\          html[#html + 1] = '<div class=\"btn-group\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn\"><i class=\"icon-info-sign orange\"></i>&nbsp;'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Update Available\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"caret\"></span></button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<ul class=\"dropdown-menu pull-right\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"https://github.com/seud0nym/tch-gui-unhide/releases/latest\" target=\"_blank\" rel=\"noopener noreferrer\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Open Download Page\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"/gateway.lp?ignore_update=1\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Ignore This Update\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</ul></div>'" \
    -e '/isBridgedMode/i\        end' \
    -e '/local getargs/a\if getargs and getargs.ignore_update then' \
    -e '/local getargs/a\  local proxy = require("datamodel")' \
    -e '/local getargs/a\  proxy.set("rpc.gui.IgnoreCurrentRelease", getargs.ignore_update)' \
    -e '/local getargs/a\end' \
    -i /www/docroot/gateway.lp
else
  echo 080@$(date +%H:%M:%S): Update available button will NOT be shown in GUI
fi

echo 080@$(date +%H:%M:%S): Add auto-refresh management and wait indicator when opening modals
sed \
  -e '/<title>/i \    <script src="/js/tch-gui-unhide.js"></script>\\' \
  -e '/id="waiting"/a \    <script>$(".smallcard .header,.modal-link").click(function(){$("#waiting").fadeIn();});</script>\\' \
  -i /www/docroot/gateway.lp

echo 080@$(date +%H:%M:%S): Fix uptime on basic Broadband tab
sed -e 's/days > 1/days > 0/' -i /www/docroot/broadband.lp

echo 085@$(date +%H:%M:%S): Decrease LOW and MEDIUM LED levels
sed -e 's/LOW = "2"/LOW = "1"/' -e 's/MID = "5"/MID = "4"/' -i /www/docroot/modals/gateway-modal.lp

echo 085@$(date +%H:%M:%S): Add Device Capabilities and LTE Band Selection to Mobile Configuration screen
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/local function get_session_info_section/i \local function get_device_capabilities_section(page, html)' \
  -e '/local function get_session_info_section/i \	local section = {}' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.arfcn_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"ARFCN Selection Support" .. ":", page.device.capabilities.arfcn_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.band_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Band Selection Support" .. ":", page.device.capabilities.band_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.manual_plmn_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Manual PLMN Selection" .. ":", page.device.capabilities.manual_plmn_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.strongest_cell_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Strongest Cell Selection" .. ":", page.device.capabilities.strongest_cell_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_modes ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported Modes" .. ":", page.device.capabilities.supported_modes))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_cdma ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported CDMA Bands" .. ":", page.device.capabilities.supported_bands_cdma))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_gsm ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported GSM Bands" .. ":", page.device.capabilities.supported_bands_gsm))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_lte ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported LTE Bands" .. ":", page.device.capabilities.supported_bands_lte))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.max_data_sessions ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Max Data Sessions" .. ":", page.device.capabilities.max_data_sessions))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_reading ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Reading" .. ":", page.device.capabilities.sms_reading))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_sending ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Sending" .. ":", page.device.capabilities.sms_sending))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if utils.Len(section) > 0 then' \
  -e '/local function get_session_info_section/i \		tinsert(html, "<fieldset><legend>" .. T"Device Capabilities" .. "</legend>")' \
  -e '/local function get_session_info_section/i \		tinsert(html, section)' \
  -e '/local function get_session_info_section/i \		tinsert(html, "</fieldset>")' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \end' \
  -e '/local function get_session_info_section/i \\' \
  -e '/local function get_profile_select/i \local function validate_lte_bands(device)' \
  -e '/local function get_profile_select/i \    local choices = setmetatable({}, untaint_mt)' \
  -e '/local function get_profile_select/i \    local b' \
  -e '/local function get_profile_select/i \    for b in string.gmatch(device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/local function get_profile_select/i \      choices[string.untaint(b)] = true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \    return function(value, object, key)' \
  -e '/local function get_profile_select/i \      local uv' \
  -e '/local function get_profile_select/i \      local concatvalue = ""' \
  -e '/local function get_profile_select/i \      if not value then' \
  -e '/local function get_profile_select/i \        return nil, T"Invalid input."' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      if type(value) == "table" then' \
  -e '/local function get_profile_select/i \        uv = value' \
  -e '/local function get_profile_select/i \      else' \
  -e '/local function get_profile_select/i \        uv = { value }' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      for i,v in ipairs(uv) do' \
  -e '/local function get_profile_select/i \        if v ~= "" then' \
  -e '/local function get_profile_select/i \          if concatvalue ~= "" then' \
  -e '/local function get_profile_select/i \            concatvalue = concatvalue.." "' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \          concatvalue = concatvalue..string.untaint(v)' \
  -e '/local function get_profile_select/i \          if not choices[v] then' \
  -e '/local function get_profile_select/i \            return nil, T"Invalid value."' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \        end' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      object[key] = concatvalue' \
  -e '/local function get_profile_select/i \      return true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \end' \
  -e '/local function get_profile_select/i \\' \
  -e '/p.mapParams\["interface_enabled"\]/a \		if utils.radio_tech_map[device.leds.radio] == "LTE" then' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapParams["lte_bands"] = device.uci_path .. "lte_bands"' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapValid["lte_bands"] = validate_lte_bands(device)' \
  -e '/p.mapParams\["interface_enabled"\]/a \		end' \
  -e '/"Access Technology"/a \	 			if utils.radio_tech_map[page.device.leds.radio] == "LTE" then' \
  -e '/"Access Technology"/a \	 				local b, lte_bands, lte_bands_checked = nil, {}, {}' \
  -e '/"Access Technology"/a \	 				for b in string.gmatch(page.device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/"Access Technology"/a \	 					lte_bands[#lte_bands+1] = { string.untaint(b), b }' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				if not page.content["lte_bands"] or page.content["lte_bands"] == "" then' \
  -e '/"Access Technology"/a \	 					for k,v in ipairs(lte_bands) do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[k] = string.untaint(v[1])' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				else' \
  -e '/"Access Technology"/a \	 					for b in string.gmatch(page.content["lte_bands"], "%d+") do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[#lte_bands_checked+1] = string.untaint(b)' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				tinsert(html, ui_helper.createCheckboxGroup(T"LTE Bands", "lte_bands", lte_bands, lte_bands_checked, {checkbox = { class="inline" }}, nil))' \
  -e '/"Access Technology"/a \	 			end' \
  -e '/^\s*get_device_info_section/a get_device_capabilities_section(page, html)' \
  -i /www/docroot/modals/lte-modal.lp

echo 085@$(date +%H:%M:%S): Add new Mobile tabs
sed \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-autofailover.lp", T"Auto-Failover"},' \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-operators.lp", T"Network Operators"},' \
  -i /www/snippets/tabs-mobiled.lp

echo 085@$(date +%H:%M:%S): Configure transformer for missing WanSensing settings
sed \
  -e 's/\("autofailover\)/\1", \1maxwait/' \
  -e '/timeout/ {n; :a; /timeout/! {N; ba;}; s/\("timeout"\)/\1, "fasttimeout"/;}' \
  -i /usr/share/transformer/mappings/uci/wansensing.map
SRV_transformer=$(( $SRV_transformer + 1 ))

if [ -z "$TITLE" ]
then
  echo 090@$(date +%H:%M:%S): Leaving browser tabs title unchanged
else
  echo 090@$(date +%H:%M:%S): Change the title in browser tabs to $TITLE
  for f in /www/docroot/gateway.lp /www/lua/hni_helper.lua /www/snippets/header.lp
  do
      sed -e "s,title>.*</title,title>$TITLE</title," -i $f
  done
  sed -e "s,<title>');  ngx.print( T\"Change password\" ); ngx.print('</title>,<title>$TITLE - Change Password</title>," -i /www/docroot/password.lp
fi

echo 090@$(date +%H:%M:%S): Change Gateway to $VARIANT
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/001_gateway.lp
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/003_internet.lp

sed -e "s/\(Modem\|Gateway\)/$VARIANT/g" -i /www/lua/telstra_helper.lua
sed -e '/local telstra_helper/,/local symbolv1/d' -e 's/symbolv1/"LAN"/' -i /www/cards/005_LAN.lp

echo 095@$(date +%H:%M:%S): Add forceprefix to transformer mapping for network interface
sed \
  -e 's/"reqprefix", "noslaaconly"/"reqprefix", "forceprefix", "noslaaconly"/' \
  -i /usr/share/transformer/mappings/uci/network.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 095@$(date +%H:%M:%S): Make Telstra bridge mode compatible with Ansuel network cards and modals
sed \
  -e "/uci.network.interface.@lan.ifname/i \        [\"uci.network.config.wan_mode\"] = 'bridge'," \
  -i /www/lua/bridgedmode_helper.lua

echo 100@$(date +%H:%M:%S): Fix card visibility check
sed \
  -e '/local access/,/end/d' \
  -e 's/access and/session:hasAccess(card.modal) or/' \
  -i /www/lua/cards.lua

echo 100@$(date +%H:%M:%S): Remove obsolete help links
for m in $(grep -l 'local help_link = ' /www/docroot/modals/*)
do
  sed -e 's/\(local help_link = \)\(.*\)/\1nil/' -i "$m"
done

echo 100@$(date +%H:%M:%S): Update gateway card and status ajax with hardware temperature monitors
elements=""
for m in $(find /sys/devices/i2c-*/ -name temp1_input)
do
  elements="$elements\"$m\","
done
for f in /www/cards/001_gateway.lp /www/docroot/ajax/gateway-status.lua
do
  sed -e "s|\(^local temp1_input = {\)|\1$elements|" -i $f
done

echo 100@$(date +%H:%M:%S): Fix display bug on Mobile card and hide if no devices found
sed \
  -e '/<script>/a var divs = $("#mobiletab .content").children("div");if(divs.length>0){var p=$("#mobiletab .content .subinfos");divs.appendTo(p);}\\' \
  -e '/require("web.lte-utils")/a local result = utils.getContent("rpc.mobiled.DeviceNumberOfEntries")' \
  -e '/require("web.lte-utils")/a local devices = tonumber(result.DeviceNumberOfEntries)' \
  -e '/require("web.lte-utils")/a if devices and devices > 0 then' \
  -e '$ a end' \
  -i $(find /www/cards -type f -name '*lte.lp')

echo 100@$(date +%H:%M:%S): Add DHCPv6 Server status and prefix to LAN card 
sed \
  -e '/local dhcpState$/a local dhcp6State_text = ""' \
  -e '/local dhcpState$/a local dhcp6State' \
  -e '/local dhcpState$/a local slaacState_text = ""' \
  -e '/local dhcpState$/a local slaacState' \
  -e '/local dhcpState$/a local ipv6State_text' \
  -e '/@lan.dhcpv4/a \    ipv6State = "uci.network.interface.@lan.ipv6",' \
  -e '/@lan.dhcpv4/a \    dhcpv6State = "uci.dhcp.dhcp.@lan.dhcpv6",' \
  -e '/@lan.dhcpv4/a \    slaacState = "uci.dhcp.dhcp.@lan.ra",' \
  -e '/@lan.dhcpv4/a \    ignored = "uci.dhcp.dhcp.@lan.ignore",' \
  -e '/@lan.netmask/a \    ipv6prefix = "rpc.network.interface.@lan.ip6prefix_assignment",' \
  -e '/DHCP enabled/i if mapParams["ignored"] == "1" then' \
  -e '/DHCP enabled/i   dhcp4State_text = T"DHCPv4 ignored (Bridged mode)"' \
  -e '/DHCP enabled/i   dhcp4State = "2"' \
  -e '/DHCP enabled/i else' \
  -e '/dhcpState = "1"/a end' \
  -e 's/localdevIP = "uci/localdevIP = "rpc/' \
  -e 's/dhcpState/dhcp4State/g' \
  -e 's/DHCP enabled/DHCPv4 enabled/' \
  -e 's/DHCP disabled/DHCPv4 disabled/' \
  -e '/getExactContent/a \if mapParams["ipv6State"] == "" or mapParams["ipv6State"] == "1" then' \
  -e '/getExactContent/a \  if mapParams["dhcpv6State"] == "" or mapParams["dhcpv6State"] == "server" then' \
  -e '/getExactContent/a \    if mapParams["ignored"] == "1" then' \
  -e '/getExactContent/a \      dhcp6State_text = T"DHCPv6 ignored (Bridged mode)"' \
  -e '/getExactContent/a \      dhcp6State = "2"' \
  -e '/getExactContent/a \    else' \
  -e '/getExactContent/a \      dhcp6State_text = T"DHCPv6 enabled"' \
  -e '/getExactContent/a \      dhcp6State = "1"' \
  -e '/getExactContent/a \    end' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \  if mapParams["slaacState"] == "" or mapParams["slaacState"] == "server" then' \
  -e '/getExactContent/a \    if mapParams["ignored"] == "1" then' \
  -e '/getExactContent/a \      slaacState_text = T"SLAAC + RA ignored (Bridged mode)"' \
  -e '/getExactContent/a \      slaacState = "2"' \
  -e '/getExactContent/a \    else' \
  -e '/getExactContent/a \      slaacState_text = T"SLAAC + RA enabled"' \
  -e '/getExactContent/a \      slaacState = "1"' \
  -e '/getExactContent/a \    end' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA disabled"' \
  -e '/getExactContent/a \    slaacState = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    dhcp6State_text = T"IPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \if mapParams["ipv6prefix"] == "" then' \
  -e '/getExactContent/a \    ipv6State_text = T""' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    ipv6State_text = T"Prefix: "' \
  -e '/getExactContent/a \end' \
  -e '/createSimpleLight/a \            ui_helper.createSimpleLight(dhcp6State, dhcp6State_text)' \
  -e '/createSimpleLight/a \        )' \
  -e '/createSimpleLight/a \        if mapParams["ipv6State"] == "1" then' \
  -e '/createSimpleLight/a \            ngx.print(ui_helper.createSimpleLight(slaacState, slaacState_text))' \
  -e '/createSimpleLight/a \        end' \
  -e '/createSimpleLight/a \        ngx.print(' \
  -e 's/and netmask is/<br>Subnet Mask:/' \
  -e "s/IP is/IP:/" \
  -e "/<\/p>/i \            '<br>'," \
  -e "/<\/p>/i \            format(T'%s <nobr><strong style=\"letter-spacing:-1px;font-size:12px;\">%s</strong></nobr>', ipv6State_text, mapParams[\"ipv6prefix\"])," \
  -e '/^\\$/d' \
  -e "s/<strong>/<strong style=\"letter-spacing:-1px;font-size:12px;\">/g" \
  -i /www/cards/005_LAN.lp

echo 100@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
  -e '/getExactContent/a \ ' \
  -e '/getExactContent/a local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
  -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\)\(.*\)\( then\)/if not server_addr or \(server_addr\2\)\3/' \
  -e 's/\r//' \
  -i /www/cards/018_relaysetup.lp

echo 100@$(date +%H:%M:%S): Add SAMBA and DLNA server names to the Content Sharing card
sed \
  -e 's/\t/  /g' \
  -e '/Light(content\["dlna/i\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["samba_name"]))' \
  -e '/Light(content\["dlna/a\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["dlna_name"]))' \
  -i /www/cards/012_contentsharing.lp

echo 100@$(date +%H:%M:%S): Only show xDSL Config card if WAN interface is DSL 
sed \
 -e '/uci.xdsl.xdsl.@dsl0.enabled/a \      wan_ifname = "uci.network.interface.@wan.ifname",' \
 -e '/if session:hasAccess/i \local wan_ifname = content["wan_ifname"]' \
 -e 's/if session:hasAccess/if wan_ifname and (wan_ifname == "ptm0" or wan_ifname == "atmwan") and session:hasAccess/' \
 -i /www/cards/093_xdsl.lp

echo 100@$(date +%H:%M:%S): Enable cards in Bridge Mode
# https://www.crc.id.au/hacking-the-technicolor-tg799vac-and-unlocking-features/#mozTocId685948
sed -e '/if info.bridged then/,/end/d' -i /www/lua/cards_limiter.lua

echo 100@$(date +%H:%M:%S): Show individual helper status on NAT Helpers card
sed \
  -e '/local enabled/,/^  end/d' \
  -e '/convertResultToObject/a \  local htmlLeft = {}' \
  -e '/convertResultToObject/a \  local htmlRight = {}' \
  -e '/convertResultToObject/a \  local attributes = {' \
  -e '/convertResultToObject/a \    span = { style = "display:inline-block;font-size:smaller;letter-spacing:-1px;vertical-align:unset;" },' \
  -e '/convertResultToObject/a \  }' \
  -e '/convertResultToObject/a \  for _, v in ipairs(helper_uci_content) do' \
  -e '/convertResultToObject/a \      if v.intf ~= "loopback" then' \
  -e '/convertResultToObject/a \          local state = v.enable' \
  -e '/convertResultToObject/a \          local text' \
  -e '/convertResultToObject/a \          if state ~= "0" then' \
  -e '/convertResultToObject/a \              text =" enabled<br>"' \
  -e '/convertResultToObject/a \              state = "1"' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              text = " disabled<br>"' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \          if #htmlRight >= #htmlLeft then' \
  -e '/convertResultToObject/a \              htmlLeft[#htmlLeft+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              htmlRight[#htmlRight+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \      end' \
  -e '/convertResultToObject/a \  end' \
  -e '/divtable/,/div>/d' \
  -e '/card_bg/a \            <div style="display:flex;flex-direction:row;">\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlLeft);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlRight);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \            </div>\\' \
  -i /www/cards/092_natalghelper.lp

echo 105@$(date +%H:%M:%S): Changing description of router DNS Server from Telstra to $VARIANT 
sed -e "s/Telstra/$VARIANT/" -i /www/docroot/modals/ethernet-modal.lp

if [ -f ipv4-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv4 DNS Servers
  sed -e 's/\r//g' ipv4-DNS-Servers | sort -r | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      sed -e "/127.0.0.1/a \    {\"$ip\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

if [ -f ipv6-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv6 DNS Servers
  sed -e 's/\r//g' ipv6-DNS-Servers | sort | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      ipv6=$(echo $ip  | tr ':' '-')
      sed -e "/2001-4860-4860--8888/i \    {\"$ipv6\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

echo 105@$(date +%H:%M:%S): Adding domain name and switch to enable/disable DHCPv6 Server and SLAAC, removing unused ethernet port processing, and fix some spelling/grammar
sed \
 -e '/^local gVIES/a \local vNES = post_helper.validateNonEmptyString' \
 -e '/^-- Standard/i \local function getDomainNamePath()' \
 -e '/^-- Standard/i \  local dnsmidx, dnsmif' \
 -e '/^-- Standard/i \  for _,dnsmidx in pairs(proxy.getPN("uci.dhcp.dnsmasq.", true)) do' \
 -e '/^-- Standard/i \    for _,dnsmif in pairs(proxy.get(dnsmidx.path.."interface.")) do' \
 -e '/^-- Standard/i \      if dnsmif.value == "lan" then' \
 -e '/^-- Standard/i \        return dnsmidx.path .. "domain"' \
 -e '/^-- Standard/i \      end' \
 -e '/^-- Standard/i \    end' \
 -e '/^-- Standard/i \  end' \
 -e '/^-- Standard/i \end' \
 -e '/"\.dhcpv4"/a \    dhcpv6State = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".dhcpv6",' \
 -e '/"\.dhcpv4"/a \    slaacState = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".ra",' \
 -e '/"\.dhcpv4"/a \    domainName = getDomainNamePath(),' \
 -e 's/dhcpv4Stateselect/dhcpStateselect/' \
 -e 's/DHCP Server/DHCPv4 Server/' \
 -e '/local stdattributes/i \              local switch_class_enable = {' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  class = "monitor-changes",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e '/local stdattributes/i \              local number_attr = {' \
 -e '/local stdattributes/i \                group = {' \
 -e '/local stdattributes/i \                  class = "monitor-localIPv6 monitor-1 monitor-hidden-localIPv6",' \
 -e '/local stdattributes/i \                },' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  type = "number",' \
 -e '/local stdattributes/i \                  min = "0",' \
 -e '/local stdattributes/i \                  max = "128",' \
 -e '/local stdattributes/i \                  style = "width:100px",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e 's/\(ui_helper.createSwitch(T"IPv6 \)s\(tate", "localIPv6", content\["localIPv6"\]\)/\1S\2, switch_class_enable/' \
 -e '/Lease time/a \                 ,[[<div class="monitor-localIPv6 monitor-1 monitor-hidden-localIPv6">]]' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"DHCPv6 Server", "dhcpv6State", content["dhcpv6State"], switchDHCP)' \
 -e "/Lease time/a \                 ,ui_helper.createSwitch(T\"SLAAC + RA<span class='icon-question-sign' title='IPv6 Stateless Address Auto-Configuration + Router Advertisement'></span>\", \"slaacState\", content[\"slaacState\"], switchDHCP)" \
 -e '/Lease time/a \                 ,[[</div>]]' \
 -e '/gVIES(/a \    dhcpv6State = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    slaacState = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    domainName = vNES,' \
 -e '/^local function validateLimit/i \local function DHCPValidationNotRequired()' \
 -e '/^local function validateLimit/i \  local post_data = ngx.req.get_post_args()' \
 -e '/^local function validateLimit/i \  local localdevIP = proxy.get("uci.network.interface.@" .. curintf .. ".ipaddr")' \
 -e '/^local function validateLimit/i \  local dhcpIgnore = proxy.get(mapParams["dhcpIgnore"])' \
 -e '/^local function validateLimit/i \  if (localdevIP and localdevIP[1].value ~= post_data["localdevIP"]) or (dhcpIgnore and dhcpIgnore[1].value == "1") then' \
 -e '/^local function validateLimit/i \    return true' \
 -e '/^local function validateLimit/i \  end' \
 -e '/^local function validateLimit/i \  return false' \
 -e '/^local function validateLimit/i \end' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \    if DHCPValidationNotRequired() then' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \      return true' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \    end' \
 -e '/T"Local Network subnet"/a \              if curintf == "lan" then' \
 -e '/T"Local Network subnet"/a \                ngx.print(ui_helper.createInputText(T"Domain Name", "domainName", content["domainName"], advanced, helpmsg["domainName"]))' \
 -e '/T"Local Network subnet"/a \              end' \
 -e '/eth0 =/d' \
 -e '/ethports = validateEthports/d' \
 -e '/^local ethports/,/^end/d' \
 -e '/^local function validateEthports/,/^end/d' \
 -e '/^local ethports_checked/,/^end/d' \
 -e '/ethport_count do/,/^end/d' \
 -e '/--[[/,/]]/d' \
 -e 's/Network mode/Network Mode/' \
 -e 's/to switch the modem/you want to switch/' \
 -i /www/docroot/modals/ethernet-modal.lp

if [ "$VERSION" != "18.1.c.0462" ]
then
  if [ "$(uci get dumaos.tr69.dumaos_enabled)" = '1' ]
  then
    echo 105@$(date +%H:%M:%S): Add DumaOS button
    sed \
      -e "/id=\"basicview\"/i\            html[#html + 1] = '<a href=\"desktop/index.html#com.netdumasoftware.desktop\" class=\"btn\" id=\"dumaos\">'" \
      -e "/id=\"basicview\"/i\            html[#html + 1] = T\"DumaOS\"" \
      -e "/id=\"basicview\"/i\            html[#html + 1] = '</a>'" \
      -e '/<div class="header span12">/a <script>if(window.self !== window.top){$("div.header").hide();}</script>\\' \
      -i /www/docroot/gateway.lp
  else
    echo 105@$(date +%H:%M:%S): DumaOS button NOT added - DumaOS is disabled
  fi
fi

echo 105@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
 -e '/local function getRelayBackUpValues/i local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
 -e '/local function getRelayBackUpValues/i \ ' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\[1\].value\)\( ==.*\)\( then\)/if not server_addr or \(server_addr\[1\].value\2\)\3/' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\[1\].value ~= ""\)\(.*\)\( then\)/if server_addr and server_addr\[1\].value ~= ""\2\3/' \
 -i /www/docroot/modals/relay-modal.lp

echo 106@$(date +%H:%M:%S): Fix setting of firewall forwarding rule when NAT enabled/disabled
for r in dhcp pppoa pppoe static
do
  sed -e '/-- 106-BEGIN/d' -e '/-- 106-END/d' -i /www/snippets/internet-${r}-routed.lp
done

echo 107@$(date +%H:%M:%S): Adding transformer support for IPv6 ULA Prefix
sed \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \ ' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \-- uci.network.globals.' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \local network_globals = {' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    config = config_network,' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    section = "globals",' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    type = "globals",' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    options = {' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \        "ula_prefix",' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    }' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \}' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \ ' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \uci_1to1.registerSimpleMap(network_globals)' \
 -i /usr/share/transformer/mappings/uci/network.map

echo 107@$(date +%H:%M:%S): Adding IPv6 Prefix Size and ULA Prefix
sed \
 -e '/^local gVIES/a \local gVNIR = post_helper.getValidateNumberInRange' \
 -e '/^local gVIES/a \local gOV = post_helper.getOptionalValidation' \
 -e '/^local gVIES/a \local vIAS6 = gOV(post_helper.validateIPAndSubnet(6))' \
 -e '/^local gVIES/a \local function validateULAPrefix(value, object, key)' \
 -e '/^local gVIES/a \  local valid, msg = vIAS6(value, object, key)' \
 -e '/^local gVIES/a \  if valid and value ~= "" and (string.sub(string.lower(value),1,2) ~= "fd" or string.sub(value,-3,-1) ~= "/48") then' \
 -e '/^local gVIES/a \    return nil, "ULA Prefix must be within the prefix fd00::/8, with a range of /48"' \
 -e '/^local gVIES/a \  end' \
 -e '/^local gVIES/a \  return valid, msg' \
 -e '/^local gVIES/a \end' \
 -e '/slaacState = "uci/i \    ip6assign = "uci.network.interface.@" .. curintf .. ".ip6assign",' \
 -e '/slaacState = "uci/a \    ula_prefix = "uci.network.globals.ula_prefix",' \
 -e '/local number_attr/i \              local ula_attr = {' \
 -e '/local number_attr/i \                controls = {' \
 -e '/local number_attr/i \                  style = "width:220px",' \
 -e '/local number_attr/i \                },' \
 -e '/local number_attr/i \                group = {' \
 -e '/local number_attr/i \                  class = "monitor-localIPv6 monitor-1 monitor-hidden-localIPv6",' \
 -e '/local number_attr/i \                },' \
 -e '/local number_attr/i \                input = {' \
 -e '/local number_attr/i \                  style = "width:180px",' \
 -e '/local number_attr/i \                }' \
 -e '/local number_attr/i \              }' \
 -e '/if content\["localIPv6"\] ~=/i \              if curintf == "lan" then' \
 -e "/if content\[\"localIPv6\"\] ~=/i \                ngx.print(ui_helper.createInputText(T\"IPv6 ULA Prefix<span class='icon-question-sign' title='IPv6 equivalent of IPv4 private addresses. Must start with fd followed by 40 random bits and a /48 range (e.g. fd12:3456:789a::/48)'></span>\", \"ula_prefix\", content[\"ula_prefix\"], ula_attr, helpmsg[\"ula_prefix\"]))" \
 -e '/if content\["localIPv6"\] ~=/i \              end' \
 -e '/if content\["localIPv6"\] ~=/i \              local ip6prefix = proxy.get("rpc.network.interface.@wan6.ip6prefix")' \
 -e '/if content\["localIPv6"\] ~=/i \              if ip6prefix and ip6prefix[1].value ~= "" then' \
 -e "/if content\[\"localIPv6\"\] ~=/i \                ngx.print(ui_helper.createInputText(T\"IPv6 Prefix Size<span class='icon-question-sign' title='Delegate a prefix of the given length to this interface'></span>\", \"ip6assign\", content[\"ip6assign\"], number_attr, helpmsg[\"ip6assign\"]))" \
 -e '/if content\["localIPv6"\] ~=/i \              end' \
 -e '/slaacState = gVIES(/a \    ip6assign = gOV(gVNIR(0,128)),' \
 -e '/slaacState = gVIES(/a \    ula_prefix = validateULAPrefix,' \
 -e '/^(function() {/i \function rand(max){return Math.floor(Math.random()*max);}\\' \
 -e '/^(function() {/i \function rand16() {return rand(2**16).toString(16);}\\' \
 -e '/^(function() {/a \  var gen_ula_span = document.createElement("SPAN");\\' \
 -e '/^(function() {/a \  gen_ula_span.setAttribute("id","random_ula_prefix");\\' \
 -e '/^(function() {/a \  gen_ula_span.setAttribute("class","btn icon-random");\\' \
 -e '/^(function() {/a \  gen_ula_span.setAttribute("style","padding:5px 3px 8px 3px;");\\' \
 -e '/^(function() {/a \  gen_ula_span.setAttribute("title","Click to generate a random ULA prefix");\\' \
 -e '/^(function() {/a \  $("#ula_prefix").after(gen_ula_span);\\' \
 -e '/^(function() {/a \  $("#random_ula_prefix").click(function(){var i=$("#ula_prefix");i.val((parseInt("fd00",16)+rand(2**8)).toString(16)+":"+rand16()+":"+rand16()+"::/48");var e=jQuery.Event("keydown");e.which=e.keyCode=13;i.trigger(e);});\\' \
 -i /www/docroot/modals/ethernet-modal.lp

 echo 110@$(date +%H:%M:%S): Enable various things that only the guest role\(!!!\) was allowed to do or see
for f in $(ls /www/docroot/modals/gateway-modal.lp /www/docroot/modals/internet-modal.lp /www/docroot/modals/wireless-modal.lp /www/docroot/modals/wanservices-modal.lp /www/snippets/tabs-diagnostics.lp /www/snippets/tabs-voice.lp)
do
  sed -e 's/\(if [^ ]*role[^=]*==[^"]*"\)\(guest\)\("\)/\1admin\3/g' -i $f
done
sed \
  -e 's/if role ~= "admin"/if role == "admin"/' \
  -e 's/if w\["provisioned"\] == "1"/if role == "admin" or w\["provisioned"\] == "1"/' \
  -i /www/docroot/modals/mmpbx-service-modal.lp

echo 115@$(date +%H:%M:%S): Show firewall default incoming policy and rules count on card
sed \
  -e '/^local format/a \local proxy = require("datamodel")' \
  -e '/firewall\.mode/a \    enabledRuleCount = "rpc.gui.firewall.enabledRuleCount",' \
  -e '/firewall\.mode/a \    fwd_ipv4_rules = "uci.firewall.userredirectNumberOfEntries",' \
  -e '/firewall\.mode/a \    fwd_ipv6_rules = "uci.firewall.pinholeruleNumberOfEntries",' \
  -e '/firewall\.mode/a \    lanIpv6Enabled = "uci.network.interface.@lan.ipv6",' \
  -e '/firewall\.mode/a \    pinholeEnabled = "uci.firewall.rulesgroup.@pinholerules.enabled",' \
  -e '/getExactContent/a \local fw_incoming_policy' \
  -e '/getExactContent/a \local zones = content_helper.convertResultToObject("uci.firewall.zone.", proxy.get("uci.firewall.zone."))' \
  -e '/getExactContent/a \for key,zone in ipairs(zones) do' \
  -e '/getExactContent/a \  if zone.wan == "1" then' \
  -e '/getExactContent/a \    fw_incoming_policy = string.untaint(zone.input)' \
  -e '/getExactContent/a \    break' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \local fw_status_light_map = {' \
  -e '/getExactContent/a \  DROP = "1",' \
  -e '/getExactContent/a \  REJECT = "2",' \
  -e '/getExactContent/a \  ACCEPT = "4"' \
  -e '/getExactContent/a \}' \
  -e 's/T"low"/T"Low"/' \
  -e 's/T"normal"/T"Normal"/' \
  -e 's/T"high"/T"High"/' \
  -e 's/T"user"/T"User Defined"/' \
  -e "/subinfos/i \    ');" \
  -e '/subinfos/i \    local fw_status = format("Default Incoming Policy: <strong>%s</strong>", fw_incoming_policy)' \
  -e '/subinfos/i \    ngx.print(ui_helper.createSimpleLight(fw_status_light_map[fw_incoming_policy], fw_status))' \
  -e "/subinfos/i \    ngx.print('\\\\" \
  -e '/Firewall level/a \            local rules_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-rules-modal.lp\\" data-id=\\"firewall-rules-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Firewall rule</strong> active","<strong %1$s>%2$d Firewall rules</strong> active", content.enabledRuleCount), rules_modal_link, content.enabledRuleCount)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local fwd_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-port-forwarding-modal.lp\\" data-id=\\"firewall-port-forwarding-modal\\""' \
  -e '/Firewall level/a \            local fwd_count = tonumber(content.fwd_ipv4_rules)' \
  -e '/Firewall level/a \            if content.lanIpv6Enabled ~= "0" and content.pinholeEnabled == "1" then' \
  -e '/Firewall level/a \              fwd_count = fwd_count + tonumber(content.fwd_ipv6_rules)' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Port Forwarding rule</strong> defined","<strong %1$s>%2$d Port Forwarding rules</strong> defined", fwd_count), fwd_modal_link, fwd_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local nat_alg_card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/Firewall level/a \            if nat_alg_card_hidden and nat_alg_card_hidden[1] and nat_alg_card_hidden[1].value == "1" then' \
  -e '/Firewall level/a \              local alg_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/nat-alg-helper-modal.lp\\" data-id=\\"nat-alg-helper-modal\\""' \
  -e '/Firewall level/a \              local helper_uci_path = "uci.firewall.helper."' \
  -e '/Firewall level/a \              local helper_uci_content = proxy.get(helper_uci_path)' \
  -e '/Firewall level/a \              helper_uci_content = content_helper.convertResultToObject(helper_uci_path,helper_uci_content)' \
  -e '/Firewall level/a \              local disabled_count = 0' \
  -e '/Firewall level/a \              local enabled_count = 0' \
  -e '/Firewall level/a \              for _,v in ipairs(helper_uci_content) do' \
  -e '/Firewall level/a \                if v.intf ~= "loopback" then' \
  -e '/Firewall level/a \                  if v.enable ~= "0" then' \
  -e '/Firewall level/a \                    enabled_count = enabled_count + 1' \
  -e '/Firewall level/a \                   else' \
  -e '/Firewall level/a \                    disabled_count = disabled_count + 1' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              if enabled_count > 0 then' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> enabled","<strong %1$s>%2$d NAT Helpers</strong> enabled", enabled_count), alg_modal_link, enabled_count)' \
  -e '/Firewall level/a \              else' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> disabled","<strong %1$s>%2$d NAT Helpers</strong> disabled", disabled_count), alg_modal_link, disabled_count)' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            local dns_int' \
  -e '/Firewall level/a \            for _, v in ipairs(proxy.getPN("uci.firewall.redirect.", true)) do' \
  -e '/Firewall level/a \              local path = v.path' \
  -e '/Firewall level/a \              local values = proxy.get(path.."name", path.."enabled")' \
  -e '/Firewall level/a \              if values then' \
  -e '/Firewall level/a \                local name = values[1].value' \
  -e '/Firewall level/a \                if name == "Redirect-DNS" or name == "Intercept-DNS" then' \
  -e '/Firewall level/a \                  if values[2] then' \
  -e '/Firewall level/a \                    if values[2].value == "0" then' \
  -e '/Firewall level/a \                      html[#html+1] = ui_helper.createSimpleLight("0", "DNS Intercept disabled")' \
  -e '/Firewall level/a \                    else' \
  -e '/Firewall level/a \                      html[#html+1] = ui_helper.createSimpleLight("1", "DNS Intercept enabled")' \
  -e '/Firewall level/a \                    end' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                  break' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \            end' \
  -e '/numrules/,/numrules_v6/d' \
  -e '/if content.mode/,/end/d' \
  -i /www/cards/008_firewall.lp

echo 115@$(date +%H:%M:%S): Fix NAT ALG modal errors and include in Firewall tabs if card hidden
sed \
  -e '/^local ui_helper/i \local proxy = require("datamodel")' \
  -e 's/T"Enable"/T"Enabled"/' \
  -e 's/, readonly="true"/ /' \
  -e 's/unique/readonly/' \
  -e 's/string.upper/string.lower/' \
  -e '/attr = { input = { class="span1"/i \    readonly = true,' \
  -e '/^local hlp_attributes/i \table.insert(hlp_columns, table.remove(hlp_columns, 1))' \
  -e '/return true/i \  if object["enable"] == "" then' \
  -e '/return true/i \    object["enable"] = "1"' \
  -e '/return true/i \  end' \
  -e '/return true/i \  object["helper"] = string.lower(object["helper"])' \
  -e '/--Look for the enable set to nothing/,/^end/d' \
  -e '/^local UI_helper/i \local proxy = require("datamodel")' \
  -e "/modal-body/a \  ');" \
  -e '/modal-body/a \  local card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/modal-body/a \  if card_hidden and card_hidden[1] and card_hidden[1].value == "1" then' \
  -e '/modal-body/a \    local lp = require("web.lp")' \
  -e '/modal-body/a \    lp.setpath("/www/snippets/")' \
  -e '/modal-body/a \    lp.include("tabs-firewall.lp")' \
  -e '/modal-body/a \  end' \
  -e "/modal-body/a \  ngx.print('\\\\" \
  -e "/createTable/i \        ngx.print('<legend>');  ngx.print( T'NAT Helpers (ALG\\\\'s)' ); ngx.print('</legend>');" \
  -e "s/\"NAT Helpers (ALG's)\"/\"Firewall\"/" \
  -e 's/Dest Port/Destination Port/' \
  -i /www/docroot/modals/nat-alg-helper-modal.lp

echo 115@$(date +%H:%M:%S): Remove Port Forwarding from WAN Services - Moved to Firewall tab
sed \
  -e '/-- In UCI/,/local pfw_data,/d' \
  -e '/local ipv6Data/,/local pfw_v6_data,/d' \
  -e "/Port forwarding table/,/ngx.print('/d" \
  -e '/if ipv6Data.lanIpv6Enabled/,/end$/d' \
  -e '/local function getConfPath/,/local uri = ngx.var.uri/d' \
  -e 's/\(local help_link =\).*/\1 nil/' \
  -e '/if #alg_sip_paths/,/ end /d' \
  -e '/if zonenum ~= "" /,/ end /d' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 115@$(date +%H:%M:%S): Improving WAN Services card
sed \
  -e 's/class = "span4",//' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  upnp_status = "uci.upnpd.config.enable_upnp",' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  dnsrule_count = "uci.dhcp.dnsruleNumberOfEntries",' \
  -e '/local n_upnp_rules/a \    local n_dns_rules = tonumber(wan_services_data["dnsrule_count"])' \
  -e '/local n_upnp_rules/a \    local upnpstate' \
  -e '/local n_upnp_rules/a \    if wan_services_data["upnp_status"] == "1" then' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP enabled"' \
  -e '/local n_upnp_rules/a \    else' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP disabled"' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/local n_upnp_rules/a \    local wol = io.open("/lib/functions/firewall-wol.sh", "r") and proxy.get("uci.wol.config.")' \
  -e '/local n_upnp_rules/a \    local wolstate = ""' \
  -e '/local n_upnp_rules/a \    if wol then' \
  -e '/local n_upnp_rules/a \      wolenabled = proxy.get("uci.wol.config.enabled")' \
  -e '/local n_upnp_rules/a \      if wolenabled then' \
  -e '/local n_upnp_rules/a \        if wolenabled[1].value == "1" then' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("1", "WoL over Internet enabled")' \
  -e '/local n_upnp_rules/a \        else' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("0", "WoL over Internet disabled")' \
  -e '/local n_upnp_rules/a \        end' \
  -e '/local n_upnp_rules/a \      end' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/<p>/a \            wolstate,' \
  -e '/<p>/a \            ui_helper.createSimpleLight(ddns_light_map[format("%s", wan_services_data["upnp_status"])] or "0", upnpstate),' \
  -e '/firewall_rules/d' \
  -e '/port forwarding<\/strong> rule /,/subinfos/d' \
  -e "/modal\"', n_upnp_rules/a            '<br>'," \
  -e "/modal\"', n_upnp_rules/a            format( N(\"<strong %s>%d DNS rule</strong> defined\"," \
  -e "/modal\"', n_upnp_rules/a                      \"<strong %s>%d DNS rules</strong> defined\", n_dns_rules)," \
  -e "/modal\"', n_upnp_rules/a                      'class=\"modal-link\" data-toggle=\"modal\" data-remote=\"modals/wanservices-modal.lp\" data-id=\"wanservices-modal\"', n_dns_rules)," \
  -e 's|<p></p>||' \
  -e 's|upnp</strong> rule |UPnP rule</strong> |' \
  -e 's|upnp</strong> rules|UPnP rules</strong>|' \
  -i /www/cards/007_wanservices.lp

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule.
sed \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule_v6.
sed \
  -e '/src = {/i \      name = {' \
  -e '/src = {/i \        access = "readWrite",' \
  -e '/src = {/i \        type = "string",' \
  -e '/src = {/i \      },' \
  -e '/src =  function(mapping, paramname, k/i \    name =  function(mapping, paramname, key)' \
  -e '/src =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/src =  function(mapping, paramname, k/i \    end,' \
  -e '/src =  function(mapping, paramname, p/i \    name =  function(mapping, paramname, paramvalue, key)' \
  -e '/src =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/src =  function(mapping, paramname, p/i \    end,' \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule_v6.map
SRV_transformer=$(( $SRV_transformer + 1 ))

SRV_firewall=0
# Version 2021.02.22 set an incorrect value for synflood_rate, so have to fix it
synflood_rate="$(uci -q get firewall.@defaults[0].synflood_rate)" 
if [ ! -z "$synflood_rate" ]; then
  echo $synflood_rate | grep -q -E '^[0-9]+/s$'
  if [ $? = 1 ]; then
    synflood_rate="$(echo $synflood_rate | grep -o -E '^[0-9]+')" 
    uci set firewall.@defaults[0].synflood_rate="$synflood_rate/s"
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
fi
# Version 2021.02.22 allowed setting of tcp_syncookies but it is not enabled in kernel, so have to remove it
if [ ! -z "$(uci -q get firewall.@defaults[0].tcp_syncookies)" ]; then
  uci -q delete firewall.@defaults[0].tcp_syncookies
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ $SRV_firewall -gt 0 ]; then
  uci commit firewall
  /etc/init.d/firewall reload 2> /dev/null
fi

echo 115@$(date +%H:%M:%S): Add transformer mapping for uci.firewall.nat.
sed -n '/-- uci.firewall.redirect/,/MultiMap/p' /usr/share/transformer/mappings/uci/firewall.map |  sed -e 's/redirect/nat/g' >> /usr/share/transformer/mappings/uci/firewall.map

echo 120@$(date +%H:%M:%S): Show the hidden Telephony tabs and fix default tab
sed \
  -e 's/\(--\)\( *{"mmpbx-service-modal.lp\)/  \2/' \
  -e '/mmpbx-contacts/d' \
  -e '/T"Service"/i \    {"mmpbx-inoutgoingmap-modal.lp", T"In\/Outgoing Map"},' \
  -e '/T"Service"/a \    {"mmpbx-codec-modal.lp", T"Codecs"},' \
  -e '/T"Service"/a \    {"mmpbx-dial-plan-modal.lp", T"Dial Plans"},' \
  -e '/T"DECT"/a    \    {"mmpbx-contacts-modal.lp", T"Phone Book"},' \
  -i /www/snippets/tabs-voice.lp
# Default telephony tab is DECT!!! 
if [ "$VERSION" != "18.1.c.0462" ]
then
  sed \
    -e 's/if emission_state == "1"/if mmpbx_state == "1"/' \
    -e 's/modalPath = "\/modals\/mmpbx-dect-modal.lp"/modalPath = "\/modals\/mmpbx-info-modal.lp"/' \
    -i /www/cards/008_telephony.lp
else
  sed \
    -e 's/if mmpbx_state == "1" and (emission_state == "1" or emission_state == "0")/if mmpbx_state == "0"/' \
    -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/,/elseif session:hasAccess("\/modals\/mmpbx-global-modal.lp") then/d' \
    -i /www/cards/008_telephony.lp
fi

echo 120@$(date +%H:%M:%S): Handle the Telephony card switch
sed \
  -e '/^local format/a \if ngx.var.request_method == "POST" then' \
  -e '/^local format/a \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/^local format/a \  if mmpbx_enable then' \
  -e '/^local format/a \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/^local format/a \    proxy.apply()' \
  -e '/^local format/a \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/^local format/a \  end' \
  -e '/^local format/a \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 125@$(date +%H:%M:%S): Display Telephony tabs even when mmpbx disabled
sed \
 -e '/if mmpbx_state == "1" then/d' \
 -e '/elseif session:hasAccess/,/end/d' \
 -i /www/snippets/tabs-voice.lp

if [ $SIP_PWDS = y ]; then
  echo 125@$(date +%H:%M:%S): Always display decrypted SIP passwords
  sed \
  -e '/local mask_password/d' \
  -e '/if password == mask_password then/,/end/d' \
  -e '/v\[scns\["password"\]\] = mask_password/d' \
  -e '/ipairs(v)/a if sip_columns[j].name == "password" then' \
  -e '/ipairs(v)/a   w = proxy.get("rpc.gui.pwd.@" .. v[scns["profile"]] .. ".password")[1].value' \
  -e '/ipairs(v)/a   sip_columns[j].type = "text"' \
  -e '/ipairs(v)/a end' \
  -i /www/docroot/modals/mmpbx-profile-modal.lp
fi

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  echo 125@$(date +%H:%M:%S): Remove non-existing FXS2 device CODEC config
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 125@$(date +%H:%M:%S): Add missing insert option on dial plan entries
sed \
  -e 's/registerMultiMap/registerNamedMultiMap/' \
  -e 's/modify", "remove/modify", "insert", "remove/' \
  -i /usr/share/transformer/mappings/uci/mmpbx.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 130@$(date +%H:%M:%S): Add missing icons on Diagnostics card and change default tab to Traffic Monitor
sed \
 -e 's^"Diagnostics", "modals/diagnostics-xdsl-modal.lp"^"Diagnostics", "modals/diagnostics-traffic-modal.lp"^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-xdsl\)^<td><div data-toggle="modal" data-remote="modals/diagnostics-traffic-modal.lp" data-id="diagnostics-traffic-modal"><img href="#" rel="tooltip" data-original-title="TRAFFIC" src="/img/light/Profit-01-WF.png" alt="traffic"></div></td>\\\n\1^' \
 -e 's^\(alt="ping/trace"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/logviewer-modal.lp" data-id="logviewer-modal"><img href="#" rel="tooltip" data-original-title="LOGVIEWER" src="/img/light/log-viewer.png" alt="logviewer"></div></td>\2^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-connection\)^<td><div data-toggle="modal" data-remote="modals/log-connections-modal.lp" data-id="log-connections-modal"><img href="#" rel="tooltip" data-original-title="CONNECTIONS" src="/img/light/Data-Sync-WF.png" alt="connections"></div></td>\\\n\1^' \
 -e 's^\(alt="network"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/diagnostics-tcpdump-modal.lp" data-id="diagnostics-tcpdump-modal"><img href="#" rel="tooltip" data-original-title="TCPDUMP" src="/img/light/tcp-dump.png" alt="tcpdump"></div></td>\2^' \
 -e 's|\(alt="\)\([^/"]*\)|class="diag-\2" \1\2|g' \
 -i /www/cards/009_diagnostics.lp

echo 130@$(date +%H:%M:%S): Rename Diagnostics tabs and add Connections and Traffic Monitor tabs
sed \
 -e 's/"Connection"/"Connection Check"/' \
 -e 's/Log viewer/Log Viewer/' \
 -e 's/"Network"/"Ports"/' \
 -e 's/Tcpdump/TCP Dump/' \
 -e '/xdsl-modal/i       \    {"diagnostics-traffic-modal.lp", T"Traffic Monitor"},'  \
 -e '/connection-modal/a \    {"log-connections-modal.lp", T"Network Connections"},'  \
 -e '/string.len(ngx.var.args)/,/^end/d' \
 -e '/airiq/,/^[ ]*$/d' \
 -i /www/snippets/tabs-diagnostics.lp
sed \
 -e 's/tabs-management/tabs-diagnostics/' \
 -e 's/"Management"/"Diagnostics"/' \
 -i /www/docroot/modals/log-connections-modal.lp

echo 130@$(date +%H:%M:%S): Fix headings on Diagnostics tabs
for m in $(grep -L 'createHeader(T"Diagnostics"' /www/docroot/modals/diagnostics-*)
do 
    sed -e 's/\(createHeader(\)\([T]*\)\("Diagnostics\)\([^"]*\)\("\)/\1T\3\5/' -i $m
done

echo 135@$(date +%H:%M:%S): Add missing DHCP Relay configuration
sed \
 -e '/local format/a \local exists = proxy.get("uci.dhcp.relay.@relay.server_addr")' \
 -e '/local format/a \if not exists then' \
 -e '/local format/a \  proxy.add("uci.dhcp.relay.","relay")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.server_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.local_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.interface","")' \
 -e '/local format/a \  proxy.apply();' \
 -e '/local format/a \end' \
 -i /www/docroot/modals/relay-modal.lp


echo 140@$(date +%H:%M:%S): Sort the device map hosts by name
sed \
 -e 's/loadTableData("rpc.hosts.host.", dcols)/loadTableData("rpc.hosts.host.", dcols, nil, "FriendlyName")/' \
 -i /www/snippets/networkmap.lp

echo 145@$(date +%H:%M:%S): Allow increase in WiFi output power to +6dBm
sed \
 -e '/{"-6", T"25%"}/a \    {"-5", T"&nbsp;-5 dBm"},' \
 -e '/{"-6", T"25%"}/a \    {"-4", T"&nbsp;-4 dBm"},' \
 -e '/{"-2", T"75%"}/a \    {"-1", T"&nbsp;-1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+1", T"&nbsp;+1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+2", T"&nbsp;+2 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+3", T"&nbsp;+3 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+4", T"&nbsp;+4 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+5", T"&nbsp;+5 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+6", T"&nbsp;+6 dBm"},' \
 -e 's/-6", T"25%/-6", T"\&nbsp;-6 dBm/' \
 -e 's/-3", T"50%/-3", T"\&nbsp;-3 dBm/' \
 -e 's/-2", T"75%/-2", T"\&nbsp;-2 dBm/' \
 -e 's/0", T"100%/0", T"\&nbsp;0 dBm/' \
 -e "s|Output Power|Adjust Output Power<span class='icon-question-sign' title='Increase or decrease radio output transmission power. Increasing transmission power is NOT recommended. It will cause more interference in neighboring channels, and reduce component lifetime by increasing heat generated.'></span>|" \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Add cogs to card headers
for f in $(grep -l createCardHeaderNoIcon /www/cards/*)
do
  sed -e 's/createCardHeaderNoIcon/createCardHeader/' -i $f
done
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/switchName, content\["cwmp_state"\], {input = {id = "cwmp_card_state"}}/nil, nil, nil/' -i /www/cards/090_cwmpconf.lp

echo 150@$(date +%H:%M:%S): Fix mobile signal placement
sed \
 -e '/^<\/script>/i var div = document.querySelector("#mobiletab").querySelector(".header-title");\\' \
 -e '/^<\/script>/i var signal = document.querySelector("#signal-strength-indicator-small");\\' \
 -e '/^<\/script>/i div.parentNode.insertBefore(signal, div.nextSibling);\\' \
 -i $(find /www/cards -type f -name '*lte.lp')
sed \
 -e '$ a #signal-strength-indicator-small .absolute{float:right;margin-top:unset;margin-left:unset;height:unset;padding-left:10px;width:unset;position:relative;}' \
 -i /www/docroot/css/mobiled.css

echo 150@$(date +%H:%M:%S): Handle Wi-Fi switch
sed \
 -e '/Take the input/i \if ngx.var.request_method == "POST" then' \
 -e '/Take the input/i \  local radio_state = ngx.req.get_post_args().set_wifi_radio_state' \
 -e '/Take the input/i \  if radio_state then' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_2G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_5G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.apply()' \
 -e '/Take the input/i \     ngx.exit(ngx.HTTP_NO_CONTENT)' \
 -e '/Take the input/i \  end' \
 -e '/Take the input/i \end' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Handle Telephony switch
 sed \
  -e '/local sipnet_options/i \if ngx.var.request_method == "POST" then' \
  -e '/local sipnet_options/i \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/local sipnet_options/i \  if mmpbx_enable then' \
  -e '/local sipnet_options/i \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/local sipnet_options/i \    proxy.apply()' \
  -e '/local sipnet_options/i \    ngx.sleep(20)' \
  -e '/local sipnet_options/i \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/local sipnet_options/i \  end' \
  -e '/local sipnet_options/i \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 155@$(date +%H:%M:%S): Make Content Sharing Screen nicer
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/<form class/<form id="content-sharing-modal" class/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/T"General status"/d' \
  -e '/"File Server Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"File Server Status" .. "<\/legend>")' \
  -e '/"File Server descript/a\                tinsert(html, "<\/fieldset>")' \
  -e '/DLNA Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"DLNA Server Status" .. "<\/legend>")' \
  -i /www/docroot/modals/contentsharing-modal.lp

else # THEME_ONLY = y
  echo 160@$(date +%H:%M:%S): Restoring CSS files to apply theme change
  cp -p /rom/www/docroot/css/gw.css /rom/www/docroot/css/gw-telstra.css /rom/www/docroot/css/responsive.css /www/docroot/css/
fi # End of if [ THEME_ONLY = n ]   

echo 160@$(date +%H:%M:%S): Adding or updating card background icons
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf012;"/' -i $(ls /www/cards/*_lte.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf129;"/' -i $(ls /www/cards/*_gateway.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0c1;"/' -i $(ls /www/cards/*_broadband.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0ac;"/' -i $(ls /www/cards/*_internet.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf09e;"/' -i $(ls /www/cards/*_wireless.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf015;"/' -i $(ls /www/cards/*_LAN.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf109;"/' -i $(ls /www/cards/*_Devices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c2;"/' -i $(ls /www/cards/*_wanservices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf132;"/' -i $(ls /www/cards/*_firewall.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf095;"/' -i $(ls /www/cards/*_telephony.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf188;"/' -i $(ls /www/cards/*_diagnostics.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c0;"/' -i $(ls /www/cards/*_usermgr.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf115;"/' -i $(ls /www/cards/*_contentsharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf02f;"/' -i $(ls /www/cards/*_printersharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf023;"/' -i $(ls /www/cards/*_parental.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf074;"/' -i $(ls /www/cards/*_iproutes.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf017;"/' -i $(ls /www/cards/*_tod.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf079;"/' -i $(ls /www/cards/*_relaysetup.lp)
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf019;"/' -i $(ls /www/cards/*_cwmpconf.lp)
sed -e 's/xf0ad/xf0ec;"/' -i $(ls /www/cards/*_natalghelper.lp)
sed -e 's/xf0ad/xf0b1;"/' -i $(ls /www/cards/*_xdsl.lp)
[ -f /www/cards/*_nfc.lp ] && sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0b2;"/' -i $(ls /www/cards/*_nfc.lp)
[ -f /www/cards/*_fon.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf143;"/' -i $(ls /www/cards/*_fon.lp)

sed \
  -e 's/:56px/:80px/' \
  -e 's/:170px/:150px/' \
  -i /www/docroot/css/responsive.css

for f in $(grep -l -r '</head>\\' /www 2>/dev/null | grep -v '\(airiq\|help\|landingpage\)')
do
  grep -q 'lp.include("../snippets/theme' $f
  if [ $? -eq 1 ]; then
    grep -q "/css/gw.css" $f
    if [ $? -eq 0 ]; then
      LP="advanced"
    else
      LP="basic"
    fi
    req=$(grep -n 'local lp = require("web.lp")' $f | cut -d: -f1)
    if [ -z "$req" ]; then
      sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
    else
      head=$(grep -n '</head>\\' $f | cut -d: -f1)
      if [ $head -lt $req ]; then
        sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -e "${req}d" -i $f
      else
        sed -e "/<\/head>\\\/i '); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
      fi
    fi
  fi
done

echo 165@$(date +%H:%M:%S): Deploy theme files
echo  | base64 -d | tar -xzf - -C /

# Fix directory permissions after tar extracts
chmod +x /www /www/docroot /www/docroot/css /www/docroot/css/telstra /www/docroot/css/light /www/docroot/css/night /www/docroot/img /www/docroot/img/telstra /www/docroot/img/light /www/docroot/img/night /www/snippets

echo 165@$(date +%H:%M:%S): Persisting theme settings
echo -n "THEME=$THEME COLOR=$COLOR ICONS=$ICONS KEEPLP=$KEEPLP" > /etc/tch-gui-unhide.theme

sed \
  -e '$ a .card_bg:after{font-size:110px;bottom:-5px;z-index:-20;}' \
  -i /www/docroot/css/gw.css
if [ -f /www/docroot/landingpage.lp -a "$KEEPLP" = "n" ]
then
  echo 166@$(date +%H:%M:%S): Theming and de-branding landing page
  sed \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color:#f8f8f8;}" \
    -e "$ a body.landingpage #login_part_mobile>div:nth-child(2){display:none;}" \
    -e "$ a body.landingpage #icon_down{display:none !important;}" \
    -e "$ a body.landingpage #detailed_info_mobile{display:block !important;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(1){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(2){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(3)>table>tbody>tr>td{padding:0px 5px;width:50%;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(4){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(6){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(7){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(8){display:none;}" \
    -e "$ a body.landingpage #footer_picture_mobile{display:none !important;}" \
    -i /www/docroot/css/gw-telstra.css
  sed \
    -e 's/.hidden-desktop{display:none/.hidden-desktop{display:inherit/' \
    -e 's/.visible-desktop{display:inherit/.visible-desktop{display:none/' \
    -i /www/docroot/css/responsive.css
  sed \
    -e "s,<title>');  ngx.print( T\"Login\" ); ngx.print('</title>,<title>$TITLE Login</title>," \
    -e 's,<img src="/img/TELSTRA_LOGO.png" style="width:57px;height:65px;">,<img class="lp-logo" style="width:240px;margin-bottom:60px;">,' \
    -e 's/Firmware Number/Firmware Version/' \
    -e 's/Modem Make Model/Model/' \
    -e 's/height:60%;min-height:400px;/height:30%;min-height:350px;width:100%;/' \
    -e 's/"-webkit-border-radius: 20px;-moz-border-radius: 20px;border-radius: 20px;width:50%;"/"display:block;margin-bottom:2px;width:220px;"/' \
    -e 's/"erroruserpass alert alert-error hide"/"erroruserpass alert alert-error hide" style="width:212px;margin:auto;padding:10px;"/' \
    -e 's/buttonborder linear-mobile" style="width:50%/linear-mobile" style="width:65px/' \
    -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-basic.lp\"); ngx.print('\\\\" \
    -e '/uci.versioncusto.override.fwversion_override/a \  unhide_version = "rpc.gui.UnhideVersion",' \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         </tr>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <tr>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <td style=\"text-align:right;font-weight: 900;color:#808080;\">tch-gui-unhide</td>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <td style=\"text-align:left;color:#808080;\">');  ngx.print( cui[\"unhide_version\"] ); ngx.print('</td>\\\\" \
    /rom/www/docroot/landingpage.lp>/www/docroot/landingpage.lp
  # Have to restart if changing landing page
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi
if [ -f /www/snippets/tabs-home.lp ]
then
  sed -e '/^else/,/T"Boost Your Wi-Fi"/d' -i /www/snippets/tabs-home.lp
fi
for f in /www/docroot/modals/assistance-modal.lp /www/docroot/modals/usermgr-modal.lp
do
  sed \
    -e '/^if not bridged.isBridgedMode/i \  local lp = require("web.lp")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.setpath("/www/snippets/")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.include("tabs-management.lp")' \
    -e '/^if not bridged.isBridgedMode/,/^end/d' \
    -i $f
done

SRV_transformer=$(( $SRV_transformer + 2 ))

echo 175@$(date +%H:%M:%S): Fix Time of Day tabs
sed \
  -e 's/T"Time of day access control"/T"Device Access Control"/' \
  -e "/update\">\\\/a ');" \
  -e '/update">\\/a local lp = require("web.lp")' \
  -e '/update">\\/a lp.setpath("/www/snippets/")' \
  -e '/update">\\/a lp.include("tabs-tod.lp")' \
  -e "/update\">\\\/a ngx.print('\\\\" \
  -i /www/docroot/modals/tod-modal.lp

echo 175@$(date +%H:%M:%S): Restart Time of Day processing after updates applied 
sed -e 's|reload$|reload; /etc/init.d/tod restart;|' -i /usr/share/transformer/commitapply/uci_tod.ca
SRV_transformer=$(( $SRV_transformer + 1 ))

# Initial invocation of transformer code will fail if history directory does not exist
if [ ! -d /root/trafficmon/history ]; then
  echo 180@$(date +%H:%M:%S): Create directory to retain traffic monitor daily history
  mkdir -p /root/trafficmon/history
fi
if [ ! -f /root/trafficmon/history/.wan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wan_rollover
fi
if [ ! -f /root/trafficmon/history/.wwan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WWAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wwan_rollover
fi

grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
if [ $? -eq 1 ]; then
  echo 180@$(date +%H:%M:%S): Create cron job to retain traffic monitor daily history
  echo "9,19,29,39,49,59 * * * * /usr/sbin/traffichistory.lua" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

if [ $THEME_ONLY = n ]; then
  # Run any extra feature scripts
  for s in $(ls tch-gui-unhide-xtra.* 2>/dev/null)
  do
    echo -n 190@$(date +%H:%M:%S): Executing extra feature script for $(echo $s | cut -d. -f2-):
    . $s
  done
fi

echo 195@$(date +%H:%M:%S): Sequencing cards
for RULE in $(uci show web | grep '=card' | cut -d= -f1)
do
  CARD=$(uci -q get ${RULE}.card)
  FILE=$(ls /www/cards/ | grep "..._${CARD#*_}")
  if [ "$CARD" != "$FILE" ]
  then
    echo "195@$(date +%H:%M:%S):  - Renaming $FILE to $CARD"
    mv /www/cards/$FILE /www/cards/$CARD
  fi
done

if [ -z "$ALLCARDRULES" -a -f tch-gui-unhide-cards ]
then
  ./tch-gui-unhide-cards -s -a -q
fi

if [ $THEME_ONLY = n ]; then
  for l in $(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)
  do
    echo 200@$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in $l
    sed -e "s/\(current_year); ngx.print('\)/\1 \[tch-gui-unhide 2021.05.16 for FW Version 18.1.c.0549\]/" -i $l
  done
fi

echo 200@$(date +%H:%M:%S): Applying service changes if required...
apply_service_changes

chmod 644 /usr/share/transformer/mappings/rpc/gui.*
echo "************************************************************"
echo "* Done!! You should clear your browser cache of images and *"
echo "* files, otherwise you won't see the theme changes.        *"
echo "************************************************************"
echo
echo "++ TIP #1: Bookmark http://$(uci get network.lan.ipaddr)/gateway.lp"
echo "++         to bypass the Telstra Basic web GUI..."
echo
echo "++ TIP #2: Use the tch-gui-unhide-cards script to"
echo "++         change card order and visibility"
echo
if [ "$UPDATE_BTN" = n ]; then
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "++ WARNING! The Update Available notification is DISABLED! +"
  echo "++          You must check for updates manually.           +"
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo
fi
