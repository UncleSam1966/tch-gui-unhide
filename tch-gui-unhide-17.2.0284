#!/bin/sh
echo 000@$(date +%H:%M:%S): Built for firmware version 17.2.0284 - Release 2021.05.15
RELEASE='2021.05.15@17:25'
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on various pages https://hack-technicolor.readthedocs.io/en/stable/

TARGET_VERSION=""
for x in $(basename $0 | tr '-' "$IFS")
do 
  TARGET_VERSION=$x
done
echo "$TARGET_VERSION" | grep -q '\.'
if [ $? -eq 1 ]
then
  echo "ERROR: Unable to determine Target Version!"
  echo "       Did the script get renamed??"
  echo "       Aborting..."
  exit 1
fi
SCRIPT=$(basename $0 | sed "s/-$TARGET_VERSION//")

DFLT_USR=$(uci -q get web.uidefault.defaultuser)
FW_UPGRD=$(uci -q get web.uidefault.upgradefw)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC=$(uci -q get env.var.ssid_mac_postfix_r0)
HOSTNAME=$(uci -q get system.@system[0].hostname)
tmpTITLE="$(grep 'title>.*</title' /www/docroot/gateway.lp | cut -d'>' -f2 | cut -d'<' -f1)"
echo $tmpTITLE | grep -q ngx.print
if [ $? -eq 1 ]; then
  TITLE="$tmpTITLE"
else
  TITLE=""
fi

if [ -f /usr/tch-gui-unhide.theme ]; then
  mv /usr/tch-gui-unhide.theme /etc/tch-gui-unhide.theme
fi
if [ -f /etc/tch-gui-unhide.theme ]; then
  . /etc/tch-gui-unhide.theme
fi
if [ -z "$THEME" ]; then
  KEEPLP=n
  grep -q 'body{background-color:#353c42;' /www/docroot/css/gw.css
  if [ $? -eq 0 ]; then
    THEME=night
  else
    grep -q 'body{background-color:#fff;' /www/docroot/css/gw.css
    if [ $? -eq 0 ]; then
      THEME=light
    else
      THEME=telstra
      grep -q 'body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color' /www/docroot/css/gw-telstra.css
      if [ $? -eq 1 -a -f /www/snippets/tabs-home.lp ]; then
        grep -q 'T"Boost Your Wi-Fi"' /www/snippets/tabs-home.lp
        if [ $? -eq 1 ]; then
          KEEPLP=y
        else
          KEEPLP=n
        fi
      fi
    fi
  fi
  case "$(grep '.smallcard .header{background-color:#......;}' /www/docroot/css/gw.css  | cut -d# -f2 | cut -d\; -f1)" in
    "005c32") COLOR=green;;
    "662e91") COLOR=purple;;
    "f36523") COLOR=orange;;
    "008fd5") COLOR=blue;;
    "272c30") COLOR=monochrome;;
    *) if [ $THEME = light ]; then COLOR=monochrome; else COLOR=blue; fi;;
  esac
  ICONS="$(grep '.card_bg:after{visibility:' /www/docroot/css/gw.css | cut -d: -f3 | cut -d\; -f1)"
fi

grep -q 'rpc.gui.pwd.@' /www/docroot/modals/mmpbx-profile-modal.lp
if [ $? -eq 0 ]; then
  SIP_PWDS=y
else
  SIP_PWDS=n
fi

INSTALLED_RELEASE="$(grep -o -m 1 -E '[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]@[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' /usr/share/transformer/mappings/rpc/gui.map 2>/dev/null)"

grep -q 'rpc.gui.UpdateAvailable' /www/docroot/gateway.lp
if [ $? -eq 0 ]; then
  UPDATE_BTN=y
else
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp
  if [ $? -eq 0 ]; then
    UPDATE_BTN=n
  else
    UPDATE_BTN=y
  fi
fi

FIX_DFLT_USR=n
FIX_FW_UPGRD=n
if [ "$(uci -q get dropbear.lan.enable)" = "1" -a "$(uci -q get dropbear.lan.PasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootLogin)" = "1" ]; then
  FIX_SSH=n
else
  FIX_SSH=y
fi
if [ "$(uci -q get system.config.export_plaintext)" = "1" -a "$(uci -q get system.config.export_unsigned)" = "1" -a "$(uci -q get system.config.import_plaintext)" = "1" -a "$(uci -q get system.config.import_unsigned)" = "1" ]; then
  FIX_CFG_PORT=n
else
  FIX_CFG_PORT=y
fi
echo "$(uci -q get web.parentalblock.roles)" | grep -q "admin"
if [ $? -eq 0 ]; then
  FIX_PARENT_BLK=n
else
  FIX_PARENT_BLK=y
fi

# Keep count of changes so we know whether to restart services
SRV_cron=0
SRV_dropbear=0
SRV_nginx=0
SRV_power=0
SRV_system=0
SRV_transformer=0

check_pwr_setting() {
  section="$1"
  option="$2"
  text="$3"
  if [ -z "$(uci -q get power.$section.$option)" ]; then
    pwrctl show | grep "$text" | grep -q DISABLED
    uci set power.$section.$option="$?"
    SRV_power=$(( $SRV_power + 1 ))
  fi
}

apply_service_changes() {
  if [ $SRV_transformer -gt 0 ]; then
    # Need to stop watchdog whilst we restart transformer, because if it does not find /var/run/transformer.pid, it will reboot the system!
    /etc/init.d/watchdog-tch stop
    /etc/init.d/transformer restart
    /etc/init.d/watchdog-tch start
  fi
  [ $SRV_cron -gt 0 ] && /etc/init.d/cron restart
  [ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear restart
  [ $SRV_system -gt 0 ] && /etc/init.d/system reload
  [ $SRV_nginx -gt 0 ] && /etc/init.d/nginx restart

  if [ -z "$(uci -q get power.cpu)" ];then
    uci set power.cpu='cpu'
  fi

  if [ -z "$(uci -q get power.cpu.cpuspeed)" ]; then
    case "$(pwrctl show | grep "CPU Speed Divisor" | tr -s " " | cut -d" " -f4)" in
      1) uci set power.cpu.cpuspeed="1";;
      2) uci set power.cpu.cpuspeed="2";;
      4) uci set power.cpu.cpuspeed="4";;
      5) uci set power.cpu.cpuspeed="8";;
      *) uci set power.cpu.cpuspeed="256";;
    esac
    SRV_power=$(( $SRV_power + 1 ))
  fi
  check_pwr_setting "cpu" "wait" "CPU Wait"
  check_pwr_setting "ethernet" "ethapd" "Auto Power"
  check_pwr_setting "ethernet" "eee" "Energy Efficient Ethernet"
  check_pwr_setting "ethernet" "autogreeen" "AutoGreeen"
  check_pwr_setting "ethernet" "dgm" "Deep Green Mode"
  [ $SRV_power -gt 0 ] && uci commit power
}

RESTORE=n
WRAPPER=n
YES=n
THEME_ONLY='n'

FILENAME=$(basename $0)

while getopts :c:d:f:h:i:l:p:rt:uv:yTVW option
do
 case "${option}" in
   c) case "$(echo ${OPTARG} | tr "BGMOPR" "bgmopr" | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;; 
        g) COLOR=green;; 
        o) COLOR=orange;; 
        p) COLOR=purple;; 
        r) COLOR=red;; 
        *) COLOR=monochrome;;
      esac;;
   d) case "${OPTARG}" in y|Y) FIX_DFLT_USR=y; DFLT_USR='admin';; n|N) FIX_DFLT_USR=y; DFLT_USR='';;  *) echo 'WARNING: -d valid options are y or n';; esac;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPGRD=y; FW_UPGRD='1';;     n|N) FIX_FW_UPGRD=y; FW_UPGRD='0';; *) echo 'WARNING: -f valid options are y or n';; esac;;
   h) case "${OPTARG}" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        s) TITLE="$VARIANT-$MAC";;
        *) TITLE="$OPTARG";;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   l) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then KEEPLP=y; else KEEPLP=n; fi;;
   p) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then SIP_PWDS=y; else SIP_PWDS=n; fi;;
   r) RESTORE=y;;
   t) case "${OPTARG}" in
        g) THEME=night; COLOR=green; KEEPLP=n; echo WARNING: -tg deprecated. Use -tn -cg in future;; 
        o) THEME=night; COLOR=orange; KEEPLP=n; echo WARNING: -to deprecated. Use -tn -co in future;; 
        p) THEME=night; COLOR=purple; KEEPLP=n; echo WARNING: -tp deprecated. Use -tn -cp in future;; 
        l) THEME=light; COLOR=monochrome; KEEPLP=n;;
        m) THEME=telstramodern; COLOR=blue; KEEPLP=y;;
        n) THEME=night; COLOR=blue; KEEPLP=n;;
        *) THEME=telstra; COLOR=blue; KEEPLP=y;;
      esac;;
   u) RESULT=$(curl -m 5 -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else 
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]
                then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo "002@$(date +%H:%M:%S): Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]
                then
                  chmod +x $FILENAME
                  echo "002@$(date +%H:%M:%S): Successfully updated $FILENAME."
                  return 0
                else
                  echo "002@$(date +%H:%M:%S): Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo "002@$(date +%H:%M:%S): Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   v) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then UPDATE_BTN=y; else UPDATE_BTN=n; fi;;
   y) YES=y;;
   T) THEME_ONLY=y;;
   V) LATEST_RELEASE=$(curl -m 1 -q -s -k -L -r0-9 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt)
      echo "002@$(date +%H:%M:%S): This Release       $RELEASE"
      if [ -z "$INSTALLED_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Installed Release  NOT INSTALLED"
      else
        echo "002@$(date +%H:%M:%S): Installed Release  $INSTALLED_RELEASE"
      fi
      if [ -z "$LATEST_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Latest Release     UNKNOWN (No internet access?)"
      else
        echo "002@$(date +%H:%M:%S): Latest Release     $LATEST_RELEASE"
      fi
      exit;;      
   W) WRAPPER=y;;
   ?) echo "Optional parameters:"
      echo " Control Options:"
      echo " -d y|n         : Enable (y) or Disable (n) Default user (i.e. GUI access without password)"
      echo "                    (Default is current setting)"
      echo " -f y|n         : Enable (y) or Disable (n) firmware upgrade in the web GUI"
      echo "                    (Default is current setting)"
      echo " -p y|n         : Use decrypted text (y) or masked password (n) field for SIP Profile passwords"
      echo "                    (Default is current setting i.e (n) by default)"
      echo " -v y|n         : Enable (y) check for new releases and show 'Update Available' button in GUI, or Disable (n)"
      echo "                    (Default is current setting or (y) for first time installs)"
      echo " Theme Options:"
      echo " -c b|o|g|p|r|m : Set the theme highlight colour"
      echo "                    b=blue o=orange g=green p=purple r=red m=monochrome"
      echo "                    (Default is current setting, or (m) for light theme or (b) for night theme)"
      echo " -h d|s|n|\"txt\" : Set the browser tabs title (Default is current setting)"
      echo "                    (d)=$VARIANT (s)=$VARIANT-$MAC (n)=$HOSTNAME (\"txt\")=Specified \"txt\""
      echo " -i y|n         : Show (y) or hide (n) the card icons"
      echo "                    (Default is current setting, or (n) for light theme and (y) for night theme)"
      echo " -l y|n         : Keep the Telstra landing page (y) or de-brand the landing page (n)"
      echo "                    (Default is current setting, or (n) if no theme has been applied)"
      echo " -t l|n|t|m     : Set a light (l), night (n), or Telstra-branded Classic (t) or Modern (m) theme"
      echo "                    (Default is current setting, or Telstra Classic if no theme has been applied)"
      echo " -T             : Apply theme ONLY - bypass all other processing"
      echo " Update Options:"
      echo " -u             : Check for and download any changes to this script (may be newer than latest release version)"
      echo "                    When specifying the -u option, it must be the ONLY parameter specifed."
      if [ $WRAPPER = y ]; then
      echo " -U             : Download the latest release, including utility scripts (will overwrite all existing script versions)."
      echo "                    When specifying the -U option, it must be the ONLY parameter specifed."
      fi
      echo " Miscellaneous Options:"
      echo " -r             : Restore changed GUI files to their original state (config changes are NOT restored)"
      echo "                    When specifying the -r option, it must be the ONLY parameter specifed."
      echo " -y             : Bypass confirmation prompt (answers 'y')"
      echo " -V             : Show the release number of this script, the current installed release, and the latest available release on GitHub"
      echo 
      echo "NOTE #1: Theme (-t) does not need to be re-specified when re-running the script: current state will be 'remembered'"
      echo "         between executions (unless you execute with the -r option, which will remove all state information)"
      echo "NOTE #2: Use tch-gui-unhide-cards to set card order and visibility"
      echo
      exit;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

if [ $THEME_ONLY = n ]; then
restore_www() {
  # File deployed to incorect location by releases prior to 2021.02.06
  if [ -f /usr/share/transformer/mappings/iperf.map ]; then
    rm /usr/share/transformer/mappings/iperf.map
  fi
  # Need to remove existing version or it doesn't get replaced?? 
  if [ -f /usr/sbin/traffichistory.lua ]; then
    if [ "$1" = "V" ]; then
      echo 010@$(date +%H:%M:%S): Removing file /usr/sbin/traffichistory.lua
    fi
    rm /usr/sbin/traffichistory.lua
  fi
  grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
  if [ $? -eq 0 ]; then
    sed -e '/traffichistory.lua/d' -i /etc/crontabs/root
    SRV_cron=$(( $SRV_cron + 1 ))
  fi
  # Add individual files to be restored here
  for t in /etc/init.d/power
  do
    s=/rom$t
    if [ -f $s ]; then
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        echo 010@$(date +%H:%M:%S): Restoring file $t
        cp -f -p "$s" "$t"
      fi
    fi
  done
  # Add directories to be restored here
  for d in www/cards www/docroot www/lua www/snippets usr/share/transformer/commitapply usr/share/transformer/mappings/rpc usr/share/transformer/mappings/uci
  do
    echo 010@$(date +%H:%M:%S): Restoring directory /$d
    for s in $(find /rom/$d -type f | grep -v -E \(/rom/www/docroot/help\))
    do
      t=$(echo "$s" | cut -c5-)
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        if [ "$1" = "V" ]; then
          echo 014@$(date +%H:%M:%S): Restoring file $t
        fi
        cp -f -p "$s" "$t"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done

    for f in $(find /$d -type f ! -path '/www/docroot/help*' ! -name '003_lte.lp')
    do
      if [ ! -f "/rom$f" -a -f "$f" ]; then
        if [ "$1" = "V" ]; then
          echo 019@$(date +%H:%M:%S): Removing file $f
        fi
        rm -f "$f"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done
  done
}

if [ $RESTORE = y ]; then
  restore_www V
  for f in /etc/tch-gui-unhide.ignored_release /etc/tch-gui-unhide.theme
  do
    if [ -f "$f" ]
    then
      echo 019@$(date +%H:%M:%S): Removing $f
      rm "$f"
    fi
  done
  for d in /www/docroot/css/light /www/docroot/css/night /www/docroot/css/telstra /www/docroot/img/light /www/docroot/img/night /www/docroot/css/Telstra
  do
    if [ -d "$d" ]
    then
      echo 019@$(date +%H:%M:%S): Removing empty directory $d
      rmdir "$d"
    fi
  done
  for s in $(uci show web | grep normally_hidden | cut -d. -f2)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry web.$s
    uci -q delete web.$s
    uci -q del_list web.ruleset_main.rules="$s"
    SRV_nginx=$(( $SRV_nginx + 2 ))
  done
  for s in $(uci show web | grep '=card' | cut -d= -f1)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry $s
    uci -q delete $s
    SRV_nginx=$(( $SRV_nginx + 1 ))
  done
  RULES=$(uci get web.ruleset_main.rules)
  for s in $(echo $RULES | tr " " "\n" | grep -v dumaos | sort -u)
  do
    TARGET=$(uci -q get web.$s.target)
    if [ ! -z "$TARGET" -a ":$TARGET" != ":/" -a ! -f /www/docroot$TARGET -a ! -f /www$TARGET -a ! -f /www/docroot/ajax$TARGET ]; then
      echo 019@$(date +%H:%M:%S): Removing config entry web.$s
      uci -q delete web.$s
      uci -q del_list web.ruleset_main.rules="$s"
      SRV_nginx=$(( $SRV_nginx + 2 ))
    else
      ROLE=$(uci -q get web.$s.roles)
      if [ ! -z "$ROLE" -a "$ROLE" = "nobody" ]; then
        echo 019@$(date +%H:%M:%S): Resetting admin role on config entry web.$s.roles
        uci -q delete web.$s.roles
        uci add_list web.$s.roles="admin"
        SRV_nginx=$(( $SRV_nginx + 2 ))
      fi
    fi
  done
  uci commit web
  sed -e '/lua_shared_dict *TGU_MbPS/d' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
  apply_service_changes
  echo "************************************************************"
  echo "* Restore complete. You should clear your browser cache of *"
  echo "* images and files to make sure you can see the changes.   *"
  echo "* NOTE: No config changes have been restored, except to    *"
  echo "*       remove added entries to display hidden modals.     *"
  echo "************************************************************"
  exit
fi

VERSION=$(uci get version.@version[0].version | cut -d- -f1)
if [ "$VERSION" = "$TARGET_VERSION" ]
then
  echo 020@$(date +%H:%M:%S): Current version matches target \($TARGET_VERSION\)
else
  echo 020@$(date +%H:%M:%S): WARNING: This script was developed for the $TARGET_VERSION firmware.
  echo 020@$(date +%H:%M:%S): It MAY work on your $VARIANT with $VERSION firmware, but it also may not.
  echo 020@$(date +%H:%M:%S): If you still wish to proceed, reply FORCE \(in capitals as shown\).
  read
  if [ "$REPLY" != "FORCE" ]
  then
    echo 020@$(date +%H:%M:%S): Good choice.
    exit
  fi
fi

echo "030@$(date +%H:%M:%S): This script will perform the following actions:"
if [ $FIX_SSH = y ]; then
echo "030@$(date +%H:%M:%S):  - Properly enable SSH access over LAN"
fi
echo "030@$(date +%H:%M:%S):  - Preserve the password files and SSH configuration to prevent root loss on RTFD"
if [ $FIX_CFG_PORT = y ]; then
echo "030@$(date +%H:%M:%S):  - Enable unsigned configuration export/import in the web GUI"
fi
if [ $FIX_FW_UPGRD = y ]; then
if [ "$FW_UPGRD" = "1" ]; then
echo "030@$(date +%H:%M:%S):  - Enable firmware upgrade in the web GUI"
else
echo "030@$(date +%H:%M:%S):  - DISABLE firmware upgrade in the web GUI"
fi
fi
if [ $FIX_DFLT_USR = y ]; then
if [ "$DFLT_USR" = "admin" ]; then
echo "030@$(date +%H:%M:%S):  - ENABLE the default user in the web GUI (i.e. GUI access without password)"
else
echo "030@$(date +%H:%M:%S):  - Disable the default user in the web GUI"
fi
fi
if [ $FIX_PARENT_BLK = y ]; then
echo "030@$(date +%H:%M:%S):  - Ensure admin role can administer the parental block"
fi
if [ -z "$INSTALLED_RELEASE" ]; then
echo "030@$(date +%H:%M:%S):  - Install tch-gui-unhide release $RELEASE"
else
echo "030@$(date +%H:%M:%S):  - Replace tch-gui-unhide release $INSTALLED_RELEASE with $RELEASE"
fi
echo "030@$(date +%H:%M:%S):  - Allow editing of various settings that are not exposed in the stock GUI"
echo "030@$(date +%H:%M:%S):  - Unhide various cards and tabs contained in the stock GUI that are normally hidden"
echo "030@$(date +%H:%M:%S):  - Add new cards and screens, and modified cards and screens from the Ansuel tch-nginx-gui"
echo "030@$(date +%H:%M:%S):  - The GUI screens will be prettied up a bit and the $THEME theme applied with $COLOR highlights and $ICONS card icons"
if [ -f /www/docroot/landingpage.lp ]; then
echo "030@$(date +%H:%M:%S):  - The Telstra Landing Page will be $(echo $KEEPLP | sed -e 's/y/left UNCHANGED/' -e 's/n/themed and de-branded/')"
fi
if [ ! -z "$TITLE" ]; then
echo "030@$(date +%H:%M:%S):  - The browser tabs titles will be set to $TITLE"
fi
if [ "$SIP_PWDS" = y ]; then
echo "030@$(date +%H:%M:%S):  - SIP Profile passwords will be decrypted and displayed in text fields rather than password fields"
fi
if [ "$UPDATE_BTN" = y ]; then
echo "030@$(date +%H:%M:%S):  - New release checking is ENABLED and 'Update Available' will be shown in GUI when new version released"
else
echo "030@$(date +%H:%M:%S):  - New release checking is DISABLED! 'Update Available' will NOT be shown in GUI when new version released"
fi

echo 030@$(date +%H:%M:%S): If you wish to proceed, enter y otherwise just press [Enter] to stop.
if [ $YES = y ]; then
  REPLY=y
else
  read
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

echo 030@$(date +%H:%M:%S): IMPORTANT NOTE - You can restore changed GUI files to their original state by running: $0 -r

if [ $FIX_SSH = y ]; then
  echo 040@$(date +%H:%M:%S): Properly enabling SSH access over LAN
  # We need to enable this properly as you can enable/disable via the GUI, and if done
  # without allowing password auth and root login, it can accidently prevent SSH access
  uci set dropbear.lan.enable='1'
  uci set dropbear.lan.PasswordAuth='on'
  uci set dropbear.lan.RootPasswordAuth='on'
  uci set dropbear.lan.RootLogin='1'
  uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
fi
  
if [ $FIX_CFG_PORT = y ]; then
  echo 040@$(date +%H:%M:%S): Enabling unsigned configuration export/import in the web GUI
  uci set system.config.export_plaintext='1'
  uci set system.config.export_unsigned='1'
  uci set system.config.import_plaintext='1'
  uci set system.config.import_unsigned='1'
  uci commit system
  SRV_system=$(( $SRV_system + 4 ))
fi

if [ $FIX_FW_UPGRD = y ]; then
  if [ $FW_UPGRD = 1 ]; then
    echo 040@$(date +%H:%M:%S): Enabling firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='1'
    uci set web.uidefault.upgradefw_role='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  else
    echo 040@$(date +%H:%M:%S): DISABLING firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='0'
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
  uci commit web
fi

if [ $FIX_DFLT_USR = y ]; then
  if [ "$DFLT_USR" = "admin" ]; then
    echo 040@$(date +%H:%M:%S): Enabling the default user in the web GUI
    uci set web.default.default_user='usr_admin'
    uci set web.uidefault.defaultuser='admin'
  else
    echo 040@$(date +%H:%M:%S): Disabling the default user in the web GUI
    uci -q delete web.default.default_user
    uci -q delete web.uidefault.defaultuser
  fi
  uci commit web
  SRV_web=$(( $SRV_web + 2 ))
fi

if [ $FIX_PARENT_BLK = y ]; then
  echo 040@$(date +%H:%M:%S): Ensuring admin role can administer the parental block
  uci -q del_list web.parentalblock.roles='admin'
  uci add_list web.parentalblock.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

grep -q -E "lua_shared_dict *TGU_MbPS" /etc/nginx/nginx.conf
if [ $? -eq 1 ]; then
  echo 040@$(date +%H:%M:%S): Creating shared dictionary for throughput calculations
  sed -e '/^http/a\    lua_shared_dict TGU_MbPS 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

echo 040@$(date +%H:%M:%S): Preserving password files and SSH configuration to prevent root loss on RTFD
for f in /etc/passwd /etc/shadow /etc/config/dropbear /etc/dropbear/* /etc/rc.d/*dropbear
do
  grep -q -E "^$f$" /etc/rtfd_persistent_filelist.conf
  if [ $? -eq 1 ]
  then
    echo "$f">>/etc/rtfd_persistent_filelist.conf
  fi
done

echo 050@$(date +%H:%M:%S): Ensuring card sequence and visibility is up to date
ALLCARDRULES="$(uci show web | grep =card)"
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="${CARDFILE#*_}"
  CARDRULE="card_$(basename $CARD .lp)"
  MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
  HIDDEN=$(uci -q get web.${CARDRULE}.hide)
  if [ -z "$MODAL" ]
  then
    MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
  fi
  MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
  if [ ! -z "$MODALRULE" -a "$(uci -q get web.$MODALRULE.roles)" != "admin" ]
  then
    echo "050@$(date +%H:%M:%S):  - Converting $CARD card visibility from modal-based visibility"
    HIDDEN=1
    uci -q delete web.$MODALRULE.roles
    uci add_list web.$MODALRULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  if [ -z "$HIDDEN" -o \( "$HIDDEN" != "0" -a "$HIDDEN" != "1" \) ]
  then
    HIDDEN=0
  fi
  uci set web.${CARDRULE}=card
  uci set web.${CARDRULE}.card="$(basename $CARDFILE)"
  uci set web.${CARDRULE}.modal="$MODALRULE"
  uci set web.${CARDRULE}.hide="$HIDDEN"
  SRV_nginx=$(( $SRV_nginx + 4 ))
done
uci commit web

# Do the restore
restore_www
echo 050@$(date +%H:%M:%S): Pre-update restore completed

echo 060@$(date +%H:%M:%S): Deploy modified broadband GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified devices GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified eco GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified firewall GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified gateway GUI code
echo H4sIAAAAAAAAA+1a62/bOBLPZwH9H3jaupEQWZbfd3Gdotdst8Vdtos2/XBIi4CWKJutLPlEqk42yP9+M9TD7zzQJr3DcRDYMvnjcIYzHA5Hmc/njb0HJg+o3+2qb6D1b/XcbPfbPa/VanX6e17T63i9PdJ9aMGQMiFpSshemiTyJtxt/f+jNAf7+zQNxAN6wZ3s3/E6/V6/3e0DrtnsNrX9H4UW9ve85vmYSjanl240+5FzoIF7nc4O+ze9dqe9Zv8O+Mse8X6kELvo/9z+9fosZTKlsYjA9sEhCRISJ5L4ExqPGZETLkjII2YY9Tr5NaajiJEo8WnE/6SSJ7ExZlKyC+niR5BMKY+t/TkbZbzuJynbtw1DwcksTS4uyZCk7N8ZT5llBlTSaRKwyLQLSMbPJyyasXQZBrzcqqOC+kksWSx34Fd7zUqGkMeBQ0Q2ggFCpjweu0VT/gN6SmSUJKlD+IzyVAB6SuXEXWksgUkKfUv81O9yQsmms+Y5j2cZQq6ul5rPk0xWzTCKcCckPC64W0sjbbCJsTTkjH+GUas6uimjAdrJCh0zzqYjUNtR8tqkQZqwzQwWB8qIvycxmCYO+ThLlTnREKvLikIZKZ2ey0RC65CY4lK4UzZ13788OcU201H9YcrYWvdraIJef5aVHWB53331x8ePgo6x69ow1oQHH/r1gvryVd5sFd12BTwzs5nkU2bepLnZwJkaBXJ9GRasooQGd2GEOPptDJxy25r2ITiI1XSanSVuaBih2ElcTfQ9n0pryV4OMZ8FbDwgpk1ct/hhKluAwsA78yWhMckFLxyJhGkyhe3HSK4GSUIiGDAPKs/LYh93YNl8mpzCcCvnUu6TgF6i++b+XPSBQ/y11/G8EjNJsnQbCPIxzyY10uoUwCmPM8kQuobsKVzPK3CFQOs4RNgGD3OhjoiH6sULQT/GXFbdwyFp5v1FD3oTPJoGiwRbaxSm8m4IZFkaF1vSOjVrAakJAp+TFD9BfPwC6UxHTeKUszr5Gjilhk6pgq1mA5nyNapk3jLTljluY1qu501sVxhu57RtWI5fwGB11P4vDSQEes6QxOML15cXbtGCy188Hk6oeOn78AP2A8RpGolGkR7U1U9IEsChldylI8EGYulLKVMVQLivprgy/IgK9AYTW+o8DpO64OPYhEgAsQBFmIHLS2v/k/E84N+Iwg9NMaNx2zxaa5zSKMKEBTv27QEhi/GLA8T1YTNL9gpwb5RQsCq/5cLDspi71HFIzKPiY6GMTWCanVKWIRNlOh+NTRVO66NxHQ/Eofnsl4uw2frbQOmBGlWK8OksYvWACd88es7LZrVERRygMhN1bABAgx89i0diNiAfLgUEF4Kb/ZA8h2iRQLTgwdAs1UFJFAvzaH9F8kS4IBzEt1rQqE0btX+R2pvD2slh7YPpQB8OsWx7VdnnjXwGkAClv48WPk996KNpmszr2WynQh9nN+hRRPM1TVZDXmECtwh9P0yBgIrJKAEpdooOpxpRx1qlwVHOfUMPOA/XlSjFhq4NkVHSGjnbwUydYDu4Yd9Wdp+/YyUmwe41gDMftd8qKOQIdZVDrEtbxKr9mtsK953yJHYXOQcmLa3Opi1R8JO/V6u9a4VwYkxO7jGvymVumRaTm+9ZxxBS1N0bm8UC8sBTyBxYCpCUiVvdKs8+driC6tyqyhYVGhDTtn0LP+UzCU/f4JqEOcfb48En4+bkg1zl8ACC/kmVOa+nH4McNNkBWqQfBXC6A1hmHwVMbIWp5KNABMdczCKKt5FAHb4v4PuAYOi+NOHBCvL04wU0meQQslhM3eDbLEVeMJgUDCaKASQB5jJwugBOC+BUAfFYr5DF+V2JdbCY4GDB4gA0w6F4tMOg6yUjZDOM68UBh4eeZYMFnrqzREg4vekXelEddrn3uVFG4bg7k/7EZRGbgru8+vD+tUy+stiyPztVdmnhcaa4WeYvmyeMre59CgSpsMrQcZU3wEUYL+CrTvO7SnALHmWej+fQFj4YRlfmxIbtU6oguYLNE/+t4CpeFANWhSrDAwwuI4Qrk9f8ggVWa7ugi8i3k2PefXeW+V633YmcRuWK55cPhF9DXvNFQEixPxluSHlkVSaEQDKDiwZDM/Kw+unmrjAcdry2fQVHNU3fQuBIv9F87NtjezCH63EydzG/Q1buJGXh0Gws6kQv0qF5cAw/3TiZW/YA3PLazt3zqWWrO9XlQhL7Kmc8FExWc214r4P31WpuXuDeHsNVMhOTSjY1DwSwMkBBEFRJ7kqqBo0/u8TyX01Y/wsSH6tbD1YBvmv9t9tpt9qIa7a8rq7/Pgot21+dEw8wx/3r/21P1/8fhzbsv5knfPccN9f/vWbfa67Zv9f1Wrr+/xiUV24wcVipzX/NU4m71+7L4ultpfiqynrfQjuc6nm9qqw2LdenZZJXSS0lKdaTrc2StX3W/OxCIpExAtcsuDTg5xKzoph9Cy9V376JFWSk5xnWBIDXGovVSvgqE9MzH/6lwR3fEpQlWUnz+p2q5Vd6rZT+y0dn5X1B9ewYxf1rae6b6/SOUeDvVq1yDMzqt7C/qXrvqJUR967Zq3cX+eKMsjBUL57AEDxUG8hlsQ97gqjc3CFXYJggf5kS0kgwZzGmeLguyqeYsAp6aeXNRVG3bDSvrk27ymvZBZcWPrw5Pf3j/N0/bOM79/9y/P/yQP8EcJ/8r9vxMP/r9PT5/yi0Zn/pT+rjjNezeMID5n4RP2IOZf9+f6f9e71Wbv9eq9vvt8H+3V5Pv/9/FNq8ZA9jNicv0xRijz14sigyqQLBezbmAqAsKK/vAi71TwyCb5+siEnCh96AP99yd49YPJaTAT84yAcQslpy2BwCZxZKQMj1EwP+VEENX9X8E0I7C4YqqkL/UwscOMMSlu2OgIllHr87+ZCNJBxLJ0nAQ84COF0WNQhkyUPrL0vMSpGg+alluqqnPqL+1yBNZpC15MIfeSWOECzPzCmXcLQcxom03CCpw3ddTJK5DSNCYPsuk1auAdKy7DLNWNWxe2ULyHW5CNjwsz1GkyZNmjRp0qRJkyZNmjRp0qRJkyZNmjRp0qRJkyZNmjRp0qRJkyZNmjRp0vSz6T+P72WgAFAAAA== | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified internet GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified iproutes GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified lte GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified management GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified multiap GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified qos GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified system GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified telephony GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified theme GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified tod GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified wireless GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 061@$(date +%H:%M:%S): Add missing getRandomKey function
cat <<GRK > /www/lua/randomKey.lua
local M = {}

function M.getRandomKey()
  local bytes
  local key = ("%02X"):rep(16)
  local fd = io.open("/dev/urandom", "r")
  if fd then
    bytes = fd:read(16)
    fd:close()
  end
  return key:format(bytes:byte(1, 16))
end

return M
GRK

for f in $(grep -rl getRandomKey /www)
do
  sed -e 's/\(post_helper\)\(\.getRandomKey\)/require("randomKey")\2/' -i $f
done

if [ -f /www/docroot/booster.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local lp = require("web.lp")/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    -e 's#/booster.lp#/modals/wireless-boosters-boosters-modal.lp#' \
    /www/docroot/booster.lp > /www/docroot/modals/wireless-boosters-boosters-modal.lp
fi
if [ -f /www/docroot/boosterstatus.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster status screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/require("web.content_helper")/a local ui_helper = require("web.ui_helper")' \
    -e '/local type_convert/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#networkmap span12#networkmap#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/boosterstatus.lp > /www/docroot/modals/wireless-boosters-status-modal.lp
fi
if [ -f /www/docroot/wifidevices.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster Wi-Fi devices screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local content =/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/wifidevices.lp > /www/docroot/modals/wireless-boosters-devices-modal.lp
fi

echo 066@$(date +%H:%M:%S): Fix QoS card for 17.2 FW
sed \
  -e '/-- 18\.1\.c only[ \t]*$/d' \
  -e '/-- 18\.1\.c only START/,/-- 18\.1\.c only END/d' \
  -i /www/cards/008_qos.lp

echo 066@$(date +%H:%M:%S): Fix QoS classify modal for 17.2 FW
sed \
  -e 's/uci_classify_path\.\."@."/uci_classify_path/' \
  -e '/-- 18\.1\.c only[ \t]*$/d' \
  -e '/-- 18\.1\.c only START/,/-- 18\.1\.c only END/d' \
  -i /www/docroot/modals/qos-classify-modal.lp

echo 066@$(date +%H:%M:%S): Remove QoS Upload Shapers tab \(Not supported on 17.2 FW\)
if [ -f /www/docroot/modals/qos-swshaper-modal.lp ]; then
  rm /www/docroot/modals/qos-swshaper-modal.lp
fi
sed \
  -e '/qos-swshaper-modal.lp/d' \
  -i /www/snippets/tabs-qos.lp

echo 066@$(date +%H:%M:%S): Importing Traffic Monitor into Diagnostics
sed \
  -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
  -e '/^local attributes/i \    ngx.print(ui_helper.createHeader(T"Diagnostics", false, false, nil, nil) )' \
  -e '/"tabs-services/i <div class="modal-body update">\\' \
  -e '/^<div class="container toplevel">/d' \
  -e '/^<div class="row">/d' \
  -e '/^<div class="span11">/d' \
  -e '/^<fieldset>/,/^\\/d' \
  -e '/^<\/script>/a <\/script>\\' \
  -e '/^<\/script>/a <\/div>\\' \
  -e '/^<\/script>/,/^\\/d' \
  -e 's|tabs-services|tabs-diagnostics|' \
  -e 's|lp.include("footer.lp")|ngx.print(ui_helper.createFooter())|' \
  -e 's|800px;|900px;margin:0 auto;|' \
  -e 's|traffic.lp|modals/diagnostics-traffic-modal.lp|' \
  -e 's|<a href="%s" target="_self">|<a href="#" data-remote="%s">|' \
  -e 's|@wwan.up")\[1\].value|@wwan.up")|' \
  -e 's|if wwan_up|if wwan_up and wwan_up[1].value|' \
  /www/docroot/traffic.lp > /www/docroot/modals/diagnostics-traffic-modal.lp

echo 067@$(date +%H:%M:%S): Creating QoS Reclassify Rules modal
sed \
  -e 's/\(classify[\.-_%]\)/re\1/g' \
  -e 's/Classify/Reclassify/' \
  /www/docroot/modals/qos-classify-modal.lp > /www/docroot/modals/qos-reclassify-modal.lp

if [ -f /etc/init.d/cwmpd ]
then
  echo 070@$(date +%H:%M:%S): CWMP found - Leaving in GUI
else
  echo 070@$(date +%H:%M:%S): CWMP not found - Removing from GUI
  rm /www/cards/090_cwmpconf.lp
  rm /www/docroot/modals/cwmpconf-modal.lp
  uci -q delete web.cwmpconfmodal
  uci -q del_list web.ruleset_main.rules=cwmpconfmodal
  uci -q delete web.card_cwmpconf
fi

if [ $(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | wc -l) -eq 0 ]
then
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs not found - Removing from GUI
  rm /www/cards/010_fon.lp
  rm /www/docroot/modals/fon-modal.lp
  uci -q delete web.fon
  uci -q delete web.fonmodal
  uci -q del_list web.ruleset_main.rules=fon
  uci -q del_list web.ruleset_main.rules=fonmodal
  uci -q delete web.card_fon
else
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs FOUND - Leaving in GUI
fi

# Check all modals are enabled, except:
#  - diagnostics-airiq-modal.lp (requires Flash player)
#  - mmpbx-sipdevice-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - mmpbx-statistics-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - speedservice-modal.lp
#  - wireless-qrcode-modal.lp (fails with a nil password index error)
echo 070@$(date +%H:%M:%S): Checking modal visibility
for f in $(ls /www/docroot/modals | grep -E -v \(diagnostics-airiq-modal.lp\|mmpbx-sipdevice-modal.lp\|mmpbx-statistics-modal.lp\|speedservice-modal.lp\|wireless-qrcode-modal.lp\) )
do
  MODAL=$(basename $f)
  uci show web | grep -q "/modals/$MODAL"
  if [ $? -eq 1 ]
  then
    CREATE_RULE=y
    RULE=$(basename $f .lp | sed -e 's/-//g')
  else
    CREATE_RULE=n
    RULE=$(uci show web | grep "/modals/$MODAL" | grep -m 1 -v card_ | cut -d. -f2)
  fi
  if [ $CREATE_RULE = y ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL
    uci add_list web.ruleset_main.rules=$RULE
    uci set web.$RULE=rule
    uci set web.$RULE.target=/modals/$MODAL
    uci set web.$RULE.normally_hidden='1'
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL 
    uci -q delete web.$RULE.roles
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
done
uci commit web

echo 070@$(date +%H:%M:%S): Processing any additional cards
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="$(basename $CARDFILE)"
  CARDRULE=$(uci show web | grep "^web\.card_.*${CARDFILE#*_}" | cut -d. -f2)
  if [ -z "$CARDRULE" -o -z "$(uci -q get web.${CARDRULE}.modal)" ]
  then
    CARDRULE="card_$(basename ${CARDFILE#*_} .lp)"
    MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
    if [ -z "$MODAL" ]
    then
      MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
    fi
    MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
    uci set web.${CARDRULE}=card
    uci set web.${CARDRULE}.card="$CARD"
    uci set web.${CARDRULE}.modal="$MODALRULE"
    uci set web.${CARDRULE}.hide='0'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  fi
done

if [ "$(uci -q get web.broadbandstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling broadband-status.lua
  uci add_list web.ruleset_main.rules='broadbandstatusajax'
  uci set web.broadbandstatusajax='rule'
  uci set web.broadbandstatusajax.target='/ajax/broadband-status.lua'
  uci set web.broadbandstatusajax.normally_hidden='1'
  uci add_list web.broadbandstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.networkthroughputajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling network-throughput.lua
  uci add_list web.ruleset_main.rules='networkthroughputajax'
  uci set web.networkthroughputajax='rule'
  uci set web.networkthroughputajax.target='/ajax/network-throughput.lua'
  uci set web.networkthroughputajax.normally_hidden='1'
  uci add_list web.networkthroughputajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.devicesstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling devices-status.lua
  uci add_list web.ruleset_main.rules='devicesstatusajax'
  uci set web.devicesstatusajax='rule'
  uci set web.devicesstatusajax.target='/ajax/devices-status.lua'
  uci set web.devicesstatusajax.normally_hidden='1'
  uci add_list web.devicesstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.vendorajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling vendor.lua
  uci add_list web.ruleset_main.rules='vendorajax'
  uci set web.vendorajax='rule'
  uci set web.vendorajax.target='/ajax/vendor.lua'
  uci set web.vendorajax.normally_hidden='1'
  uci add_list web.vendorajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.gatewaystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling gateway-status.lua
  uci add_list web.ruleset_main.rules='gatewaystatusajax'
  uci set web.gatewaystatusajax='rule'
  uci set web.gatewaystatusajax.target='/ajax/gateway-status.lua'
  uci set web.gatewaystatusajax.normally_hidden='1'
  uci add_list web.gatewaystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.internetstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling internet-status.lua
  uci add_list web.ruleset_main.rules='internetstatusajax'
  uci set web.internetstatusajax='rule'
  uci set web.internetstatusajax.target='/ajax/internet-status.lua'
  uci set web.internetstatusajax.normally_hidden='1'
  uci add_list web.internetstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.telephonystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling telephony-status.lua
  uci add_list web.ruleset_main.rules='telephonystatusajax'
  uci set web.telephonystatusajax='rule'
  uci set web.telephonystatusajax.target='/ajax/telephony-status.lua'
  uci set web.telephonystatusajax.normally_hidden='1'
  uci add_list web.telephonystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.ssidstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling ssid-status.lua
  uci add_list web.ruleset_main.rules='ssidstatusajax'
  uci set web.ssidstatusajax='rule'
  uci set web.ssidstatusajax.target='/ajax/ssid-status.lua'
  uci set web.ssidstatusajax.normally_hidden='1'
  uci add_list web.ssidstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi

SERIAL=$(uci get env.var.serial)
echo 080@$(date +%H:%M:%S): Change config export filename from config.bin to $VARIANT-$SERIAL-$VERSION@YYMMDD.bin
echo 080@$(date +%H:%M:%S): Add reset/upgrade warnings
sed \
  -e "s/=config.bin/=$VARIANT-$SERIAL-$VERSION@\" .. os.date(\"%Y%m%d\") .. \".bin/" \
  -e '/local basic =/i local lose_root_warning = { alert = { class = "alert-info", style = "margin-bottom:5px;" }, }' \
  -e '/T"Reset"/i \    html[#html + 1] = ui_helper.createAlertBlock(T"Root access <i>should</i> be preserved when using the <b><i class=\\"icon-bolt\\" style=\\"width:auto;\\">\</i> Reset</b> button. You can use the <i>reset-to-factory-defaults-with-root</i> utility script from the command line to have more control over the factory reset and still retain root access.", lose_root_warning)' \
  -e '/T"Upgrade"/i \          html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Upgrading firmware using this method will cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script with the -f option from the command line to upgrade to the firmware and still retain root access.", lose_root_warning)' \
  -e '/"uci.versioncusto.override.fwversion_override"/a \   unhide_version = "rpc.gui.UnhideVersion",' \
  -e '/"Serial Number"/i \    html[#html + 1] = ui_helper.createLabel(T"tch-gui-unhide Version", content["unhide_version"], basic)' \
  -e '/Global Information/d' \
  -i /www/docroot/modals/gateway-modal.lp

if [ "$UPDATE_BTN" = y ]; then
  echo 080@$(date +%H:%M:%S): Add update available button
  sed \
    -e '/uci.version.version.@version\[0\].timestamp/a\    updatable = "rpc.gui.UpdateAvailable",' \
    -e '/isBridgedMode/i\        if cui.updatable == "1" then' \
    -e "/isBridgedMode/i\          html[#html + 1] = '<div class=\"btn-group\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn\"><i class=\"icon-info-sign orange\"></i>&nbsp;'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Update Available\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"caret\"></span></button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<ul class=\"dropdown-menu pull-right\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"https://github.com/seud0nym/tch-gui-unhide/releases/latest\" target=\"_blank\" rel=\"noopener noreferrer\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Open Download Page\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"/gateway.lp?ignore_update=1\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Ignore This Update\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</ul></div>'" \
    -e '/isBridgedMode/i\        end' \
    -e '/local getargs/a\if getargs and getargs.ignore_update then' \
    -e '/local getargs/a\  local proxy = require("datamodel")' \
    -e '/local getargs/a\  proxy.set("rpc.gui.IgnoreCurrentRelease", getargs.ignore_update)' \
    -e '/local getargs/a\end' \
    -i /www/docroot/gateway.lp
else
  echo 080@$(date +%H:%M:%S): Update available button will NOT be shown in GUI
fi

echo 080@$(date +%H:%M:%S): Add auto-refresh management and wait indicator when opening modals
sed \
  -e '/<title>/i \    <script src="/js/tch-gui-unhide.js"></script>\\' \
  -e '/id="waiting"/a \    <script>$(".smallcard .header,.modal-link").click(function(){$("#waiting").fadeIn();});</script>\\' \
  -i /www/docroot/gateway.lp

echo 080@$(date +%H:%M:%S): Fix uptime on basic Broadband tab
sed -e 's/days > 1/days > 0/' -i /www/docroot/broadband.lp

echo 085@$(date +%H:%M:%S): Add Device Capabilities and LTE Band Selection to Mobile Configuration screen
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/local function get_session_info_section/i \local function get_device_capabilities_section(page, html)' \
  -e '/local function get_session_info_section/i \	local section = {}' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.arfcn_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"ARFCN Selection Support" .. ":", page.device.capabilities.arfcn_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.band_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Band Selection Support" .. ":", page.device.capabilities.band_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.manual_plmn_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Manual PLMN Selection" .. ":", page.device.capabilities.manual_plmn_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.strongest_cell_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Strongest Cell Selection" .. ":", page.device.capabilities.strongest_cell_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_modes ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported Modes" .. ":", page.device.capabilities.supported_modes))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_cdma ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported CDMA Bands" .. ":", page.device.capabilities.supported_bands_cdma))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_gsm ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported GSM Bands" .. ":", page.device.capabilities.supported_bands_gsm))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_lte ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported LTE Bands" .. ":", page.device.capabilities.supported_bands_lte))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.max_data_sessions ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Max Data Sessions" .. ":", page.device.capabilities.max_data_sessions))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_reading ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Reading" .. ":", page.device.capabilities.sms_reading))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_sending ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Sending" .. ":", page.device.capabilities.sms_sending))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if utils.Len(section) > 0 then' \
  -e '/local function get_session_info_section/i \		tinsert(html, "<fieldset><legend>" .. T"Device Capabilities" .. "</legend>")' \
  -e '/local function get_session_info_section/i \		tinsert(html, section)' \
  -e '/local function get_session_info_section/i \		tinsert(html, "</fieldset>")' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \end' \
  -e '/local function get_session_info_section/i \\' \
  -e '/local function get_profile_select/i \local function validate_lte_bands(device)' \
  -e '/local function get_profile_select/i \    local choices = setmetatable({}, untaint_mt)' \
  -e '/local function get_profile_select/i \    local b' \
  -e '/local function get_profile_select/i \    for b in string.gmatch(device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/local function get_profile_select/i \      choices[string.untaint(b)] = true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \    return function(value, object, key)' \
  -e '/local function get_profile_select/i \      local uv' \
  -e '/local function get_profile_select/i \      local concatvalue = ""' \
  -e '/local function get_profile_select/i \      if not value then' \
  -e '/local function get_profile_select/i \        return nil, T"Invalid input."' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      if type(value) == "table" then' \
  -e '/local function get_profile_select/i \        uv = value' \
  -e '/local function get_profile_select/i \      else' \
  -e '/local function get_profile_select/i \        uv = { value }' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      for i,v in ipairs(uv) do' \
  -e '/local function get_profile_select/i \        if v ~= "" then' \
  -e '/local function get_profile_select/i \          if concatvalue ~= "" then' \
  -e '/local function get_profile_select/i \            concatvalue = concatvalue.." "' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \          concatvalue = concatvalue..string.untaint(v)' \
  -e '/local function get_profile_select/i \          if not choices[v] then' \
  -e '/local function get_profile_select/i \            return nil, T"Invalid value."' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \        end' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      object[key] = concatvalue' \
  -e '/local function get_profile_select/i \      return true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \end' \
  -e '/local function get_profile_select/i \\' \
  -e '/p.mapParams\["interface_enabled"\]/a \		if utils.radio_tech_map[device.leds.radio] == "LTE" then' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapParams["lte_bands"] = device.uci_path .. "lte_bands"' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapValid["lte_bands"] = validate_lte_bands(device)' \
  -e '/p.mapParams\["interface_enabled"\]/a \		end' \
  -e '/"Access Technology"/a \	 			if utils.radio_tech_map[page.device.leds.radio] == "LTE" then' \
  -e '/"Access Technology"/a \	 				local b, lte_bands, lte_bands_checked = nil, {}, {}' \
  -e '/"Access Technology"/a \	 				for b in string.gmatch(page.device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/"Access Technology"/a \	 					lte_bands[#lte_bands+1] = { string.untaint(b), b }' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				if not page.content["lte_bands"] or page.content["lte_bands"] == "" then' \
  -e '/"Access Technology"/a \	 					for k,v in ipairs(lte_bands) do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[k] = string.untaint(v[1])' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				else' \
  -e '/"Access Technology"/a \	 					for b in string.gmatch(page.content["lte_bands"], "%d+") do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[#lte_bands_checked+1] = string.untaint(b)' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				tinsert(html, ui_helper.createCheckboxGroup(T"LTE Bands", "lte_bands", lte_bands, lte_bands_checked, {checkbox = { class="inline" }}, nil))' \
  -e '/"Access Technology"/a \	 			end' \
  -e '/^\s*get_device_info_section/a get_device_capabilities_section(page, html)' \
  -i /www/docroot/modals/lte-modal.lp

echo 085@$(date +%H:%M:%S): Add new Mobile tabs
sed \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-autofailover.lp", T"Auto-Failover"},' \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-operators.lp", T"Network Operators"},' \
  -i /www/snippets/tabs-mobiled.lp

echo 085@$(date +%H:%M:%S): Configure transformer for missing WanSensing settings
sed \
  -e 's/\("autofailover\)/\1", \1maxwait/' \
  -e '/timeout/ {n; :a; /timeout/! {N; ba;}; s/\("timeout"\)/\1, "fasttimeout"/;}' \
  -i /usr/share/transformer/mappings/uci/wansensing.map
SRV_transformer=$(( $SRV_transformer + 1 ))

if [ -z "$TITLE" ]
then
  echo 090@$(date +%H:%M:%S): Leaving browser tabs title unchanged
else
  echo 090@$(date +%H:%M:%S): Change the title in browser tabs to $TITLE
  for f in /www/docroot/gateway.lp /www/lua/hni_helper.lua /www/snippets/header.lp
  do
      sed -e "s,title>.*</title,title>$TITLE</title," -i $f
  done
  sed -e "s,<title>');  ngx.print( T\"Change password\" ); ngx.print('</title>,<title>$TITLE - Change Password</title>," -i /www/docroot/password.lp
fi

echo 090@$(date +%H:%M:%S): Change Gateway to $VARIANT
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/001_gateway.lp
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/003_internet.lp

sed -e "s/Gateway/LAN/g" -i /www/cards/005_LAN.lp
sed -e "s,<title>');  ngx.print( T\"Login\" ); ngx.print('</title>,<title>$TITLE Login</title>," -i /www/docroot/login.lp

echo 095@$(date +%H:%M:%S): Add forceprefix to transformer mapping for network interface
sed \
  -e 's/"reqprefix", "noslaaconly"/"reqprefix", "forceprefix", "noslaaconly"/' \
  -i /usr/share/transformer/mappings/uci/network.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 095@$(date +%H:%M:%S): Make Telstra bridge mode compatible with Ansuel network cards and modals
sed \
  -e "/uci.network.interface.@lan.ifname/i \        [\"uci.network.config.wan_mode\"] = 'bridge'," \
  -i /www/lua/bridgedmode_helper.lua

echo 100@$(date +%H:%M:%S): Fix card visibility check
sed \
  -e '/local access/,/end/d' \
  -e 's/access and/session:hasAccess(card.modal) or/' \
  -i /www/lua/cards.lua

echo 100@$(date +%H:%M:%S): Remove obsolete help links
for m in $(grep -l 'local help_link = ' /www/docroot/modals/*)
do
  sed -e 's/\(local help_link = \)\(.*\)/\1nil/' -i "$m"
done

echo 100@$(date +%H:%M:%S): Update gateway card and status ajax with hardware temperature monitors
elements=""
for m in $(find /sys/devices/i2c-*/ -name temp1_input)
do
  elements="$elements\"$m\","
done
for f in /www/cards/001_gateway.lp /www/docroot/ajax/gateway-status.lua
do
  sed -e "s|\(^local temp1_input = {\)|\1$elements|" -i $f
done

echo 100@$(date +%H:%M:%S): Fix display bug on Mobile card and hide if no devices found
sed \
  -e '/<script>/a var divs = $("#mobiletab .content").children("div");if(divs.length>0){var p=$("#mobiletab .content .subinfos");divs.appendTo(p);}\\' \
  -e '/require("web.lte-utils")/a local result = utils.getContent("rpc.mobiled.DeviceNumberOfEntries")' \
  -e '/require("web.lte-utils")/a local devices = tonumber(result.DeviceNumberOfEntries)' \
  -e '/require("web.lte-utils")/a if devices and devices > 0 then' \
  -e '$ a end' \
  -i $(find /www/cards -type f -name '*lte.lp')

echo 100@$(date +%H:%M:%S): Add DHCPv6 Server status and prefix to LAN card 
sed \
  -e '/local dhcpState$/a local dhcp6State_text = ""' \
  -e '/local dhcpState$/a local dhcp6State' \
  -e '/local dhcpState$/a local slaacState_text = ""' \
  -e '/local dhcpState$/a local slaacState' \
  -e '/local dhcpState$/a local ipv6State_text' \
  -e '/@lan.dhcpv4/a \    ipv6State = "uci.network.interface.@lan.ipv6",' \
  -e '/@lan.dhcpv4/a \    dhcpv6State = "uci.dhcp.dhcp.@lan.dhcpv6",' \
  -e '/@lan.dhcpv4/a \    slaacState = "uci.dhcp.dhcp.@lan.ra",' \
  -e '/@lan.dhcpv4/a \    ignored = "uci.dhcp.dhcp.@lan.ignore",' \
  -e '/@lan.netmask/a \    ipv6prefix = "rpc.network.interface.@lan.ip6prefix_assignment",' \
  -e '/DHCP enabled/i if mapParams["ignored"] == "1" then' \
  -e '/DHCP enabled/i   dhcp4State_text = T"DHCPv4 ignored (Bridged mode)"' \
  -e '/DHCP enabled/i   dhcp4State = "2"' \
  -e '/DHCP enabled/i else' \
  -e '/dhcpState = "1"/a end' \
  -e 's/localdevIP = "uci/localdevIP = "rpc/' \
  -e 's/dhcpState/dhcp4State/g' \
  -e 's/DHCP enabled/DHCPv4 enabled/' \
  -e 's/DHCP disabled/DHCPv4 disabled/' \
  -e '/getExactContent/a \if mapParams["ipv6State"] == "" or mapParams["ipv6State"] == "1" then' \
  -e '/getExactContent/a \  if mapParams["dhcpv6State"] == "" or mapParams["dhcpv6State"] == "server" then' \
  -e '/getExactContent/a \    if mapParams["ignored"] == "1" then' \
  -e '/getExactContent/a \      dhcp6State_text = T"DHCPv6 ignored (Bridged mode)"' \
  -e '/getExactContent/a \      dhcp6State = "2"' \
  -e '/getExactContent/a \    else' \
  -e '/getExactContent/a \      dhcp6State_text = T"DHCPv6 enabled"' \
  -e '/getExactContent/a \      dhcp6State = "1"' \
  -e '/getExactContent/a \    end' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \  if mapParams["slaacState"] == "" or mapParams["slaacState"] == "server" then' \
  -e '/getExactContent/a \    if mapParams["ignored"] == "1" then' \
  -e '/getExactContent/a \      slaacState_text = T"SLAAC + RA ignored (Bridged mode)"' \
  -e '/getExactContent/a \      slaacState = "2"' \
  -e '/getExactContent/a \    else' \
  -e '/getExactContent/a \      slaacState_text = T"SLAAC + RA enabled"' \
  -e '/getExactContent/a \      slaacState = "1"' \
  -e '/getExactContent/a \    end' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA disabled"' \
  -e '/getExactContent/a \    slaacState = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    dhcp6State_text = T"IPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \if mapParams["ipv6prefix"] == "" then' \
  -e '/getExactContent/a \    ipv6State_text = T""' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    ipv6State_text = T"Prefix: "' \
  -e '/getExactContent/a \end' \
  -e '/createSimpleLight/a \            ui_helper.createSimpleLight(dhcp6State, dhcp6State_text)' \
  -e '/createSimpleLight/a \        )' \
  -e '/createSimpleLight/a \        if mapParams["ipv6State"] == "1" then' \
  -e '/createSimpleLight/a \            ngx.print(ui_helper.createSimpleLight(slaacState, slaacState_text))' \
  -e '/createSimpleLight/a \        end' \
  -e '/createSimpleLight/a \        ngx.print(' \
  -e 's/and netmask is/<br>Subnet Mask:/' \
  -e "s/IP is/IP:/" \
  -e "/<\/p>/i \            '<br>'," \
  -e "/<\/p>/i \            format(T'%s <nobr><strong style=\"letter-spacing:-1px;font-size:12px;\">%s</strong></nobr>', ipv6State_text, mapParams[\"ipv6prefix\"])," \
  -e '/^\\$/d' \
  -e "s/<strong>/<strong style=\"letter-spacing:-1px;font-size:12px;\">/g" \
  -i /www/cards/005_LAN.lp

echo 100@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
  -e '/getExactContent/a \ ' \
  -e '/getExactContent/a local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
  -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\)\(.*\)\( then\)/if not server_addr or \(server_addr\2\)\3/' \
  -e 's/\r//' \
  -i /www/cards/018_relaysetup.lp

echo 100@$(date +%H:%M:%S): Add SAMBA and DLNA server names to the Content Sharing card
sed \
  -e 's/\t/  /g' \
  -e '/Light(content\["dlna/i\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["samba_name"]))' \
  -e '/Light(content\["dlna/a\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["dlna_name"]))' \
  -i /www/cards/012_contentsharing.lp

echo 100@$(date +%H:%M:%S): Only show xDSL Config card if WAN interface is DSL 
sed \
 -e '/uci.xdsl.xdsl.@dsl0.enabled/a \      wan_ifname = "uci.network.interface.@wan.ifname",' \
 -e '/if session:hasAccess/i \local wan_ifname = content["wan_ifname"]' \
 -e 's/if session:hasAccess/if wan_ifname and (wan_ifname == "ptm0" or wan_ifname == "atmwan") and session:hasAccess/' \
 -i /www/cards/093_xdsl.lp

echo 100@$(date +%H:%M:%S): Enable cards in Bridge Mode
# https://www.crc.id.au/hacking-the-technicolor-tg799vac-and-unlocking-features/#mozTocId685948
sed -e '/if info.bridged then/,/end/d' -i /www/lua/cards_limiter.lua

echo 100@$(date +%H:%M:%S): Show individual helper status on NAT Helpers card
sed \
  -e '/local enabled/,/^  end/d' \
  -e '/convertResultToObject/a \  local htmlLeft = {}' \
  -e '/convertResultToObject/a \  local htmlRight = {}' \
  -e '/convertResultToObject/a \  local attributes = {' \
  -e '/convertResultToObject/a \    span = { style = "display:inline-block;font-size:smaller;letter-spacing:-1px;vertical-align:unset;" },' \
  -e '/convertResultToObject/a \  }' \
  -e '/convertResultToObject/a \  for _, v in ipairs(helper_uci_content) do' \
  -e '/convertResultToObject/a \      if v.intf ~= "loopback" then' \
  -e '/convertResultToObject/a \          local state = v.enable' \
  -e '/convertResultToObject/a \          local text' \
  -e '/convertResultToObject/a \          if state ~= "0" then' \
  -e '/convertResultToObject/a \              text =" enabled<br>"' \
  -e '/convertResultToObject/a \              state = "1"' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              text = " disabled<br>"' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \          if #htmlRight >= #htmlLeft then' \
  -e '/convertResultToObject/a \              htmlLeft[#htmlLeft+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              htmlRight[#htmlRight+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \      end' \
  -e '/convertResultToObject/a \  end' \
  -e '/divtable/,/div>/d' \
  -e '/card_bg/a \            <div style="display:flex;flex-direction:row;">\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlLeft);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlRight);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \            </div>\\' \
  -i /www/cards/092_natalghelper.lp

echo 101@$(date +%H:%M:%S): Missing proxy in relay setup card 
sed -e '/local content_helper/a local proxy = require\("datamodel"\)' -i /www/cards/018_relaysetup.lp

echo 101@$(date +%H:%M:%S): Change WAN Services modal checkboxes to switches
sed \
  -e 's/= gVCS/= vB/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 101@$(date +%H:%M:%S): Fix WAN Services card
sed \
  -e '/local format/a \local proxy = require("datamodel")' \
  -i /www/cards/007_wanservices.lp

echo 104@$(date +%H:%M:%S): Backporting Local Network modal from 17.2.0468
echo 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 | base64 -d | tar -xzf - -C /

echo 105@$(date +%H:%M:%S): Changing description of router DNS Server from Telstra to $VARIANT 
sed -e "s/Telstra/$VARIANT/" -i /www/docroot/modals/ethernet-modal.lp

if [ -f ipv4-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv4 DNS Servers
  sed -e 's/\r//g' ipv4-DNS-Servers | sort -r | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      sed -e "/127.0.0.1/a \    {\"$ip\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

if [ -f ipv6-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv6 DNS Servers
  sed -e 's/\r//g' ipv6-DNS-Servers | sort | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      ipv6=$(echo $ip  | tr ':' '-')
      sed -e "/2001-4860-4860--8888/i \    {\"$ipv6\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

echo 105@$(date +%H:%M:%S): Adding domain name and switch to enable/disable DHCPv6 Server and SLAAC, removing unused ethernet port processing, and fix some spelling/grammar
sed \
 -e '/^local gVIES/a \local vNES = post_helper.validateNonEmptyString' \
 -e '/^-- Standard/i \local function getDomainNamePath()' \
 -e '/^-- Standard/i \  local dnsmidx, dnsmif' \
 -e '/^-- Standard/i \  for _,dnsmidx in pairs(proxy.getPN("uci.dhcp.dnsmasq.", true)) do' \
 -e '/^-- Standard/i \    for _,dnsmif in pairs(proxy.get(dnsmidx.path.."interface.")) do' \
 -e '/^-- Standard/i \      if dnsmif.value == "lan" then' \
 -e '/^-- Standard/i \        return dnsmidx.path .. "domain"' \
 -e '/^-- Standard/i \      end' \
 -e '/^-- Standard/i \    end' \
 -e '/^-- Standard/i \  end' \
 -e '/^-- Standard/i \end' \
 -e '/"\.dhcpv4"/a \    dhcpv6State = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".dhcpv6",' \
 -e '/"\.dhcpv4"/a \    slaacState = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".ra",' \
 -e '/"\.dhcpv4"/a \    domainName = getDomainNamePath(),' \
 -e 's/dhcpv4Stateselect/dhcpStateselect/' \
 -e 's/DHCP Server/DHCPv4 Server/' \
 -e '/local stdattributes/i \              local switch_class_enable = {' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  class = "monitor-changes",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e '/local stdattributes/i \              local number_attr = {' \
 -e '/local stdattributes/i \                group = {' \
 -e '/local stdattributes/i \                  class = "monitor-localIPv6 monitor-1 monitor-hidden-localIPv6",' \
 -e '/local stdattributes/i \                },' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  type = "number",' \
 -e '/local stdattributes/i \                  min = "0",' \
 -e '/local stdattributes/i \                  max = "128",' \
 -e '/local stdattributes/i \                  style = "width:100px",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e 's/\(ui_helper.createSwitch(T"IPv6 \)s\(tate", "localIPv6", content\["localIPv6"\]\)/\1S\2, switch_class_enable/' \
 -e '/Lease time/a \                 ,[[<div class="monitor-localIPv6 monitor-1 monitor-hidden-localIPv6">]]' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"DHCPv6 Server", "dhcpv6State", content["dhcpv6State"], switchDHCP)' \
 -e "/Lease time/a \                 ,ui_helper.createSwitch(T\"SLAAC + RA<span class='icon-question-sign' title='IPv6 Stateless Address Auto-Configuration + Router Advertisement'></span>\", \"slaacState\", content[\"slaacState\"], switchDHCP)" \
 -e '/Lease time/a \                 ,[[</div>]]' \
 -e '/gVIES(/a \    dhcpv6State = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    slaacState = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    domainName = vNES,' \
 -e '/^local function validateLimit/i \local function DHCPValidationNotRequired()' \
 -e '/^local function validateLimit/i \  local post_data = ngx.req.get_post_args()' \
 -e '/^local function validateLimit/i \  local localdevIP = proxy.get("uci.network.interface.@" .. curintf .. ".ipaddr")' \
 -e '/^local function validateLimit/i \  local dhcpIgnore = proxy.get(mapParams["dhcpIgnore"])' \
 -e '/^local function validateLimit/i \  if (localdevIP and localdevIP[1].value ~= post_data["localdevIP"]) or (dhcpIgnore and dhcpIgnore[1].value == "1") then' \
 -e '/^local function validateLimit/i \    return true' \
 -e '/^local function validateLimit/i \  end' \
 -e '/^local function validateLimit/i \  return false' \
 -e '/^local function validateLimit/i \end' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \    if DHCPValidationNotRequired() then' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \      return true' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \    end' \
 -e '/T"Local Network subnet"/a \              if curintf == "lan" then' \
 -e '/T"Local Network subnet"/a \                ngx.print(ui_helper.createInputText(T"Domain Name", "domainName", content["domainName"], advanced, helpmsg["domainName"]))' \
 -e '/T"Local Network subnet"/a \              end' \
 -e '/eth0 =/d' \
 -e '/ethports = validateEthports/d' \
 -e '/^local ethports/,/^end/d' \
 -e '/^local function validateEthports/,/^end/d' \
 -e '/^local ethports_checked/,/^end/d' \
 -e '/ethport_count do/,/^end/d' \
 -e '/--[[/,/]]/d' \
 -e 's/Network mode/Network Mode/' \
 -e 's/to switch the modem/you want to switch/' \
 -i /www/docroot/modals/ethernet-modal.lp

echo 106@$(date +%H:%M:%S): Fix setting of firewall forwarding rule when NAT enabled/disabled
for r in dhcp pppoa pppoe static
do
  sed -e '/-- 106-BEGIN/,/-- 106-END/d' -i /www/snippets/internet-${r}-routed.lp
done

echo 110@$(date +%H:%M:%S): Enable various things that only the guest role\(!!!\) was allowed to do or see
for f in $(ls /www/docroot/modals/gateway-modal.lp /www/docroot/modals/internet-modal.lp /www/docroot/modals/wireless-modal.lp /www/docroot/modals/wanservices-modal.lp /www/snippets/tabs-diagnostics.lp /www/snippets/tabs-voice.lp)
do
  sed -e 's/\(if [^ ]*role[^=]*==[^"]*"\)\(guest\)\("\)/\1admin\3/g' -i $f
done
sed \
  -e 's/if role ~= "admin"/if role == "admin"/' \
  -e 's/if w\["provisioned"\] == "1"/if role == "admin" or w\["provisioned"\] == "1"/' \
  -i /www/docroot/modals/mmpbx-service-modal.lp

echo 115@$(date +%H:%M:%S): Fix Firewall modals for FW 17.2
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-cone-modal.lp
sed \
  -e 's/@defaults\[0\]/1/' \
  -i /www/docroot/modals/firewall-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-port-forwarding-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-rules-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-zones-modal.lp

echo 115@$(date +%H:%M:%S): Show firewall default incoming policy and rules count on card
sed \
  -e '/^local format/a \local proxy = require("datamodel")' \
  -e '/firewall\.mode/a \    enabledRuleCount = "rpc.gui.firewall.enabledRuleCount",' \
  -e '/firewall\.mode/a \    fwd_ipv4_rules = "uci.firewall.userredirectNumberOfEntries",' \
  -e '/firewall\.mode/a \    fwd_ipv6_rules = "uci.firewall.pinholeruleNumberOfEntries",' \
  -e '/firewall\.mode/a \    lanIpv6Enabled = "uci.network.interface.@lan.ipv6",' \
  -e '/firewall\.mode/a \    pinholeEnabled = "uci.firewall.rulesgroup.@pinholerules.enabled",' \
  -e '/getExactContent/a \local fw_incoming_policy' \
  -e '/getExactContent/a \local zones = content_helper.convertResultToObject("uci.firewall.zone.", proxy.get("uci.firewall.zone."))' \
  -e '/getExactContent/a \for key,zone in ipairs(zones) do' \
  -e '/getExactContent/a \  if zone.wan == "1" then' \
  -e '/getExactContent/a \    fw_incoming_policy = string.untaint(zone.input)' \
  -e '/getExactContent/a \    break' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \local fw_status_light_map = {' \
  -e '/getExactContent/a \  DROP = "1",' \
  -e '/getExactContent/a \  REJECT = "2",' \
  -e '/getExactContent/a \  ACCEPT = "4"' \
  -e '/getExactContent/a \}' \
  -e 's/T"low"/T"Low"/' \
  -e 's/T"normal"/T"Normal"/' \
  -e 's/T"high"/T"High"/' \
  -e 's/T"user"/T"User Defined"/' \
  -e "/subinfos/i \    ');" \
  -e '/subinfos/i \    local fw_status = format("Default Incoming Policy: <strong>%s</strong>", fw_incoming_policy)' \
  -e '/subinfos/i \    ngx.print(ui_helper.createSimpleLight(fw_status_light_map[fw_incoming_policy], fw_status))' \
  -e "/subinfos/i \    ngx.print('\\\\" \
  -e '/Firewall level/a \            local rules_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-rules-modal.lp\\" data-id=\\"firewall-rules-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Firewall rule</strong> active","<strong %1$s>%2$d Firewall rules</strong> active", content.enabledRuleCount), rules_modal_link, content.enabledRuleCount)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local fwd_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-port-forwarding-modal.lp\\" data-id=\\"firewall-port-forwarding-modal\\""' \
  -e '/Firewall level/a \            local fwd_count = tonumber(content.fwd_ipv4_rules)' \
  -e '/Firewall level/a \            if content.lanIpv6Enabled ~= "0" and content.pinholeEnabled == "1" then' \
  -e '/Firewall level/a \              fwd_count = fwd_count + tonumber(content.fwd_ipv6_rules)' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Port Forwarding rule</strong> defined","<strong %1$s>%2$d Port Forwarding rules</strong> defined", fwd_count), fwd_modal_link, fwd_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local nat_alg_card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/Firewall level/a \            if nat_alg_card_hidden and nat_alg_card_hidden[1] and nat_alg_card_hidden[1].value == "1" then' \
  -e '/Firewall level/a \              local alg_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/nat-alg-helper-modal.lp\\" data-id=\\"nat-alg-helper-modal\\""' \
  -e '/Firewall level/a \              local helper_uci_path = "uci.firewall.helper."' \
  -e '/Firewall level/a \              local helper_uci_content = proxy.get(helper_uci_path)' \
  -e '/Firewall level/a \              helper_uci_content = content_helper.convertResultToObject(helper_uci_path,helper_uci_content)' \
  -e '/Firewall level/a \              local disabled_count = 0' \
  -e '/Firewall level/a \              local enabled_count = 0' \
  -e '/Firewall level/a \              for _,v in ipairs(helper_uci_content) do' \
  -e '/Firewall level/a \                if v.intf ~= "loopback" then' \
  -e '/Firewall level/a \                  if v.enable ~= "0" then' \
  -e '/Firewall level/a \                    enabled_count = enabled_count + 1' \
  -e '/Firewall level/a \                   else' \
  -e '/Firewall level/a \                    disabled_count = disabled_count + 1' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              if enabled_count > 0 then' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> enabled","<strong %1$s>%2$d NAT Helpers</strong> enabled", enabled_count), alg_modal_link, enabled_count)' \
  -e '/Firewall level/a \              else' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> disabled","<strong %1$s>%2$d NAT Helpers</strong> disabled", disabled_count), alg_modal_link, disabled_count)' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            local dns_int' \
  -e '/Firewall level/a \            for _, v in ipairs(proxy.getPN("uci.firewall.redirect.", true)) do' \
  -e '/Firewall level/a \              local path = v.path' \
  -e '/Firewall level/a \              local values = proxy.get(path.."name", path.."enabled")' \
  -e '/Firewall level/a \              if values then' \
  -e '/Firewall level/a \                local name = values[1].value' \
  -e '/Firewall level/a \                if name == "Redirect-DNS" or name == "Intercept-DNS" then' \
  -e '/Firewall level/a \                  if values[2] then' \
  -e '/Firewall level/a \                    if values[2].value == "0" then' \
  -e '/Firewall level/a \                      html[#html+1] = ui_helper.createSimpleLight("0", "DNS Intercept disabled")' \
  -e '/Firewall level/a \                    else' \
  -e '/Firewall level/a \                      html[#html+1] = ui_helper.createSimpleLight("1", "DNS Intercept enabled")' \
  -e '/Firewall level/a \                    end' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                  break' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \            end' \
  -e '/numrules/,/numrules_v6/d' \
  -e '/if content.mode/,/end/d' \
  -i /www/cards/008_firewall.lp

echo 115@$(date +%H:%M:%S): Fix NAT ALG modal errors and include in Firewall tabs if card hidden
sed \
  -e '/^local ui_helper/i \local proxy = require("datamodel")' \
  -e 's/T"Enable"/T"Enabled"/' \
  -e 's/, readonly="true"/ /' \
  -e 's/unique/readonly/' \
  -e 's/string.upper/string.lower/' \
  -e '/attr = { input = { class="span1"/i \    readonly = true,' \
  -e '/^local hlp_attributes/i \table.insert(hlp_columns, table.remove(hlp_columns, 1))' \
  -e '/return true/i \  if object["enable"] == "" then' \
  -e '/return true/i \    object["enable"] = "1"' \
  -e '/return true/i \  end' \
  -e '/return true/i \  object["helper"] = string.lower(object["helper"])' \
  -e '/--Look for the enable set to nothing/,/^end/d' \
  -e '/^local UI_helper/i \local proxy = require("datamodel")' \
  -e "/modal-body/a \  ');" \
  -e '/modal-body/a \  local card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/modal-body/a \  if card_hidden and card_hidden[1] and card_hidden[1].value == "1" then' \
  -e '/modal-body/a \    local lp = require("web.lp")' \
  -e '/modal-body/a \    lp.setpath("/www/snippets/")' \
  -e '/modal-body/a \    lp.include("tabs-firewall.lp")' \
  -e '/modal-body/a \  end' \
  -e "/modal-body/a \  ngx.print('\\\\" \
  -e "/createTable/i \        ngx.print('<legend>');  ngx.print( T'NAT Helpers (ALG\\\\'s)' ); ngx.print('</legend>');" \
  -e "s/\"NAT Helpers (ALG's)\"/\"Firewall\"/" \
  -e 's/Dest Port/Destination Port/' \
  -i /www/docroot/modals/nat-alg-helper-modal.lp

echo 115@$(date +%H:%M:%S): Remove Port Forwarding from WAN Services - Moved to Firewall tab
sed \
  -e '/-- In UCI/,/local pfw_data,/d' \
  -e '/local ipv6Data/,/local pfw_v6_data,/d' \
  -e "/Port forwarding table/,/ngx.print('/d" \
  -e '/if ipv6Data.lanIpv6Enabled/,/end$/d' \
  -e '/local function getConfPath/,/local uri = ngx.var.uri/d' \
  -e 's/\(local help_link =\).*/\1 nil/' \
  -e '/if #alg_sip_paths/,/ end /d' \
  -e '/if zonenum ~= "" /,/ end /d' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 115@$(date +%H:%M:%S): Improving WAN Services card
sed \
  -e 's/class = "span4",//' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  upnp_status = "uci.upnpd.config.enable_upnp",' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  dnsrule_count = "uci.dhcp.dnsruleNumberOfEntries",' \
  -e '/local n_upnp_rules/a \    local n_dns_rules = tonumber(wan_services_data["dnsrule_count"])' \
  -e '/local n_upnp_rules/a \    local upnpstate' \
  -e '/local n_upnp_rules/a \    if wan_services_data["upnp_status"] == "1" then' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP enabled"' \
  -e '/local n_upnp_rules/a \    else' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP disabled"' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/local n_upnp_rules/a \    local wol = io.open("/lib/functions/firewall-wol.sh", "r") and proxy.get("uci.wol.config.")' \
  -e '/local n_upnp_rules/a \    local wolstate = ""' \
  -e '/local n_upnp_rules/a \    if wol then' \
  -e '/local n_upnp_rules/a \      wolenabled = proxy.get("uci.wol.config.enabled")' \
  -e '/local n_upnp_rules/a \      if wolenabled then' \
  -e '/local n_upnp_rules/a \        if wolenabled[1].value == "1" then' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("1", "WoL over Internet enabled")' \
  -e '/local n_upnp_rules/a \        else' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("0", "WoL over Internet disabled")' \
  -e '/local n_upnp_rules/a \        end' \
  -e '/local n_upnp_rules/a \      end' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/<p>/a \            wolstate,' \
  -e '/<p>/a \            ui_helper.createSimpleLight(ddns_light_map[format("%s", wan_services_data["upnp_status"])] or "0", upnpstate),' \
  -e '/firewall_rules/d' \
  -e '/port forwarding<\/strong> rule /,/subinfos/d' \
  -e "/modal\"', n_upnp_rules/a            '<br>'," \
  -e "/modal\"', n_upnp_rules/a            format( N(\"<strong %s>%d DNS rule</strong> defined\"," \
  -e "/modal\"', n_upnp_rules/a                      \"<strong %s>%d DNS rules</strong> defined\", n_dns_rules)," \
  -e "/modal\"', n_upnp_rules/a                      'class=\"modal-link\" data-toggle=\"modal\" data-remote=\"modals/wanservices-modal.lp\" data-id=\"wanservices-modal\"', n_dns_rules)," \
  -e 's|<p></p>||' \
  -e 's|upnp</strong> rule |UPnP rule</strong> |' \
  -e 's|upnp</strong> rules|UPnP rules</strong>|' \
  -i /www/cards/007_wanservices.lp

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule.
sed \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule_v6.
sed \
  -e '/src = {/i \      name = {' \
  -e '/src = {/i \        access = "readWrite",' \
  -e '/src = {/i \        type = "string",' \
  -e '/src = {/i \      },' \
  -e '/src =  function(mapping, paramname, k/i \    name =  function(mapping, paramname, key)' \
  -e '/src =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/src =  function(mapping, paramname, k/i \    end,' \
  -e '/src =  function(mapping, paramname, p/i \    name =  function(mapping, paramname, paramvalue, key)' \
  -e '/src =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/src =  function(mapping, paramname, p/i \    end,' \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule_v6.map
SRV_transformer=$(( $SRV_transformer + 1 ))

SRV_firewall=0
# Version 2021.02.22 set an incorrect value for synflood_rate, so have to fix it
synflood_rate="$(uci -q get firewall.@defaults[0].synflood_rate)" 
if [ ! -z "$synflood_rate" ]; then
  echo $synflood_rate | grep -q -E '^[0-9]+/s$'
  if [ $? = 1 ]; then
    synflood_rate="$(echo $synflood_rate | grep -o -E '^[0-9]+')" 
    uci set firewall.@defaults[0].synflood_rate="$synflood_rate/s"
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
fi
# Version 2021.02.22 allowed setting of tcp_syncookies but it is not enabled in kernel, so have to remove it
if [ ! -z "$(uci -q get firewall.@defaults[0].tcp_syncookies)" ]; then
  uci -q delete firewall.@defaults[0].tcp_syncookies
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ $SRV_firewall -gt 0 ]; then
  uci commit firewall
  /etc/init.d/firewall reload 2> /dev/null
fi

echo 115@$(date +%H:%M:%S): Add transformer mapping for uci.firewall.nat.
sed -n '/-- uci.firewall.redirect/,/MultiMap/p' /usr/share/transformer/mappings/uci/firewall.map |  sed -e 's/redirect/nat/g' >> /usr/share/transformer/mappings/uci/firewall.map

echo 120@$(date +%H:%M:%S): Show the hidden Telephony tabs and fix default tab
sed \
 -e '/mmpbx-contacts/d' \
 -e '/T"Service"/i \       {"mmpbx-inoutgoingmap-modal.lp", T"In\/Outgoing Map"},' \
 -e '/T"Service"/a \       {"mmpbx-codec-modal.lp", T"Codecs"},' \
 -e '/T"Service"/a \       {"mmpbx-dial-plan-modal.lp", T"Dial Plans"},' \
 -e '/T"DECT"/a    \       {"mmpbx-contacts-modal.lp", T"Phone Book"},' \
 -i /www/snippets/tabs-voice.lp
# Default telephony tab is DECT!!! 
sed \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    if mmpbx_state == "1" then' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \        modalPath = "\/modals\/mmpbx-info-modal.lp"' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    else' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \        modalPath = "\/modals\/mmpbx-global-modal.lp"' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    end' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/d' \
 -i /www/cards/008_telephony.lp

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  # only 1 FXS device
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 120@$(date +%H:%M:%S): Handle the Telephony card switch
sed \
  -e '/^local format/a \if ngx.var.request_method == "POST" then' \
  -e '/^local format/a \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/^local format/a \  if mmpbx_enable then' \
  -e '/^local format/a \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/^local format/a \    proxy.apply()' \
  -e '/^local format/a \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/^local format/a \  end' \
  -e '/^local format/a \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 125@$(date +%H:%M:%S): Display Telephony tabs even when mmpbx disabled
sed \
 -e '/if mmpbx_state == "1" then/d' \
 -e '/elseif session:hasAccess/,/end/d' \
 -i /www/snippets/tabs-voice.lp

if [ $SIP_PWDS = y ]; then
  echo 125@$(date +%H:%M:%S): Always display decrypted SIP passwords
  sed \
  -e '/local mask_password/d' \
  -e '/if password == mask_password then/,/end/d' \
  -e '/v\[scns\["password"\]\] = mask_password/d' \
  -e '/ipairs(v)/a if sip_columns[j].name == "password" then' \
  -e '/ipairs(v)/a   w = proxy.get("rpc.gui.pwd.@" .. v[scns["profile"]] .. ".password")[1].value' \
  -e '/ipairs(v)/a   sip_columns[j].type = "text"' \
  -e '/ipairs(v)/a end' \
  -i /www/docroot/modals/mmpbx-profile-modal.lp
fi

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  echo 125@$(date +%H:%M:%S): Remove non-existing FXS2 device CODEC config
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 125@$(date +%H:%M:%S): Add missing insert option on dial plan entries
sed \
  -e 's/registerMultiMap/registerNamedMultiMap/' \
  -e 's/modify", "remove/modify", "insert", "remove/' \
  -i /usr/share/transformer/mappings/uci/mmpbx.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 130@$(date +%H:%M:%S): Add missing icons on Diagnostics card and change default tab to Traffic Monitor
sed \
 -e 's^"Diagnostics", "modals/diagnostics-xdsl-modal.lp"^"Diagnostics", "modals/diagnostics-traffic-modal.lp"^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-xdsl\)^<td><div data-toggle="modal" data-remote="modals/diagnostics-traffic-modal.lp" data-id="diagnostics-traffic-modal"><img href="#" rel="tooltip" data-original-title="TRAFFIC" src="/img/light/Profit-01-WF.png" alt="traffic"></div></td>\\\n\1^' \
 -e 's^\(alt="ping/trace"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/logviewer-modal.lp" data-id="logviewer-modal"><img href="#" rel="tooltip" data-original-title="LOGVIEWER" src="/img/light/log-viewer.png" alt="logviewer"></div></td>\2^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-connection\)^<td><div data-toggle="modal" data-remote="modals/log-connections-modal.lp" data-id="log-connections-modal"><img href="#" rel="tooltip" data-original-title="CONNECTIONS" src="/img/light/Data-Sync-WF.png" alt="connections"></div></td>\\\n\1^' \
 -e 's^\(alt="network"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/diagnostics-tcpdump-modal.lp" data-id="diagnostics-tcpdump-modal"><img href="#" rel="tooltip" data-original-title="TCPDUMP" src="/img/light/tcp-dump.png" alt="tcpdump"></div></td>\2^' \
 -e 's|\(alt="\)\([^/"]*\)|class="diag-\2" \1\2|g' \
 -i /www/cards/009_diagnostics.lp

echo 130@$(date +%H:%M:%S): Rename Diagnostics tabs and add Connections and Traffic Monitor tabs
sed \
 -e 's/"Connection"/"Connection Check"/' \
 -e 's/Log viewer/Log Viewer/' \
 -e 's/"Network"/"Ports"/' \
 -e 's/Tcpdump/TCP Dump/' \
 -e '/xdsl-modal/i       \    {"diagnostics-traffic-modal.lp", T"Traffic Monitor"},'  \
 -e '/connection-modal/a \    {"log-connections-modal.lp", T"Network Connections"},'  \
 -e '/string.len(ngx.var.args)/,/^end/d' \
 -e '/airiq/,/^[ ]*$/d' \
 -i /www/snippets/tabs-diagnostics.lp
sed \
 -e 's/tabs-management/tabs-diagnostics/' \
 -e 's/"Management"/"Diagnostics"/' \
 -i /www/docroot/modals/log-connections-modal.lp

echo 130@$(date +%H:%M:%S): Fix headings on Diagnostics tabs
for m in $(grep -L 'createHeader(T"Diagnostics"' /www/docroot/modals/diagnostics-*)
do 
    sed -e 's/\(createHeader(\)\([T]*\)\("Diagnostics\)\([^"]*\)\("\)/\1T\3\5/' -i $m
done

echo 135@$(date +%H:%M:%S): Add missing DHCP Relay configuration
sed \
 -e '/local format/a \local exists = proxy.get("uci.dhcp.relay.@relay.server_addr")' \
 -e '/local format/a \if not exists then' \
 -e '/local format/a \  proxy.add("uci.dhcp.relay.","relay")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.server_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.local_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.interface","")' \
 -e '/local format/a \  proxy.apply();' \
 -e '/local format/a \end' \
 -i /www/docroot/modals/relay-modal.lp


echo 135@$(date +%H:%M:%S): Add TCP Dump to Diagnostics
sed -e 's/    {"logviewer-modal.lp", T"Log Viewer"},/    {"logviewer-modal.lp", T"Log Viewer"},\n    {"diagnostics-tcpdump-modal.lp", T"TCP Dump"},/' -i /www/snippets/tabs-diagnostics.lp

echo 140@$(date +%H:%M:%S): Sort the device map hosts by name
sed \
 -e 's/loadTableData("rpc.hosts.host.", dcols)/loadTableData("rpc.hosts.host.", dcols, nil, "FriendlyName")/' \
 -i /www/snippets/networkmap.lp

echo 145@$(date +%H:%M:%S): Allow increase in WiFi output power to +6dBm
sed \
 -e '/{"-6", T"25%"}/a \    {"-5", T"&nbsp;-5 dBm"},' \
 -e '/{"-6", T"25%"}/a \    {"-4", T"&nbsp;-4 dBm"},' \
 -e '/{"-2", T"75%"}/a \    {"-1", T"&nbsp;-1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+1", T"&nbsp;+1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+2", T"&nbsp;+2 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+3", T"&nbsp;+3 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+4", T"&nbsp;+4 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+5", T"&nbsp;+5 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+6", T"&nbsp;+6 dBm"},' \
 -e 's/-6", T"25%/-6", T"\&nbsp;-6 dBm/' \
 -e 's/-3", T"50%/-3", T"\&nbsp;-3 dBm/' \
 -e 's/-2", T"75%/-2", T"\&nbsp;-2 dBm/' \
 -e 's/0", T"100%/0", T"\&nbsp;0 dBm/' \
 -e "s|Output Power|Adjust Output Power<span class='icon-question-sign' title='Increase or decrease radio output transmission power. Increasing transmission power is NOT recommended. It will cause more interference in neighboring channels, and reduce component lifetime by increasing heat generated.'></span>|" \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Add cogs to card headers
for f in $(grep -l createCardHeaderNoIcon /www/cards/*)
do
  sed -e 's/createCardHeaderNoIcon/createCardHeader/' -i $f
done
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/switchName, content\["cwmp_state"\], {input = {id = "cwmp_card_state"}}/nil, nil, nil/' -i /www/cards/090_cwmpconf.lp

echo 150@$(date +%H:%M:%S): Fix mobile signal placement
sed \
 -e '/^<\/script>/i var div = document.querySelector("#mobiletab").querySelector(".header-title");\\' \
 -e '/^<\/script>/i var signal = document.querySelector("#signal-strength-indicator-small");\\' \
 -e '/^<\/script>/i div.parentNode.insertBefore(signal, div.nextSibling);\\' \
 -i $(find /www/cards -type f -name '*lte.lp')
sed \
 -e '$ a #signal-strength-indicator-small .absolute{float:right;margin-top:unset;margin-left:unset;height:unset;padding-left:10px;width:unset;position:relative;}' \
 -i /www/docroot/css/mobiled.css

echo 150@$(date +%H:%M:%S): Handle Wi-Fi switch
sed \
 -e '/Take the input/i \if ngx.var.request_method == "POST" then' \
 -e '/Take the input/i \  local radio_state = ngx.req.get_post_args().set_wifi_radio_state' \
 -e '/Take the input/i \  if radio_state then' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_2G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_5G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.apply()' \
 -e '/Take the input/i \     ngx.exit(ngx.HTTP_NO_CONTENT)' \
 -e '/Take the input/i \  end' \
 -e '/Take the input/i \end' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Handle Telephony switch
 sed \
  -e '/local sipnet_options/i \if ngx.var.request_method == "POST" then' \
  -e '/local sipnet_options/i \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/local sipnet_options/i \  if mmpbx_enable then' \
  -e '/local sipnet_options/i \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/local sipnet_options/i \    proxy.apply()' \
  -e '/local sipnet_options/i \    ngx.sleep(20)' \
  -e '/local sipnet_options/i \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/local sipnet_options/i \  end' \
  -e '/local sipnet_options/i \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 155@$(date +%H:%M:%S): Make Content Sharing Screen nicer
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/<form class/<form id="content-sharing-modal" class/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/T"General status"/d' \
  -e '/"File Server Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"File Server Status" .. "<\/legend>")' \
  -e '/"File Server descript/a\                tinsert(html, "<\/fieldset>")' \
  -e '/DLNA Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"DLNA Server Status" .. "<\/legend>")' \
  -i /www/docroot/modals/contentsharing-modal.lp

else # THEME_ONLY = y
  echo 160@$(date +%H:%M:%S): Restoring CSS files to apply theme change
  cp -p /rom/www/docroot/css/gw.css /rom/www/docroot/css/gw-telstra.css /rom/www/docroot/css/responsive.css /www/docroot/css/
fi # End of if [ THEME_ONLY = n ]   

echo 160@$(date +%H:%M:%S): Adding or updating card background icons
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf012;"/' -i $(ls /www/cards/*_lte.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf129;"/' -i $(ls /www/cards/*_gateway.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0c1;"/' -i $(ls /www/cards/*_broadband.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0ac;"/' -i $(ls /www/cards/*_internet.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf09e;"/' -i $(ls /www/cards/*_wireless.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf015;"/' -i $(ls /www/cards/*_LAN.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf109;"/' -i $(ls /www/cards/*_Devices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c2;"/' -i $(ls /www/cards/*_wanservices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf132;"/' -i $(ls /www/cards/*_firewall.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf095;"/' -i $(ls /www/cards/*_telephony.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf188;"/' -i $(ls /www/cards/*_diagnostics.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c0;"/' -i $(ls /www/cards/*_usermgr.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf115;"/' -i $(ls /www/cards/*_contentsharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf02f;"/' -i $(ls /www/cards/*_printersharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf023;"/' -i $(ls /www/cards/*_parental.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf074;"/' -i $(ls /www/cards/*_iproutes.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf017;"/' -i $(ls /www/cards/*_tod.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf079;"/' -i $(ls /www/cards/*_relaysetup.lp)
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf019;"/' -i $(ls /www/cards/*_cwmpconf.lp)
sed -e 's/xf0ad/xf0ec;"/' -i $(ls /www/cards/*_natalghelper.lp)
sed -e 's/xf0ad/xf0b1;"/' -i $(ls /www/cards/*_xdsl.lp)
[ -f /www/cards/*_nfc.lp ] && sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0b2;"/' -i $(ls /www/cards/*_nfc.lp)
[ -f /www/cards/*_fon.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf143;"/' -i $(ls /www/cards/*_fon.lp)

sed \
  -e 's/:56px/:80px/' \
  -e 's/:170px/:150px/' \
  -i /www/docroot/css/responsive.css

for f in $(grep -l -r '</head>\\' /www 2>/dev/null | grep -v '\(airiq\|help\|landingpage\)')
do
  grep -q 'lp.include("../snippets/theme' $f
  if [ $? -eq 1 ]; then
    grep -q "/css/gw.css" $f
    if [ $? -eq 0 ]; then
      LP="advanced"
    else
      LP="basic"
    fi
    req=$(grep -n 'local lp = require("web.lp")' $f | cut -d: -f1)
    if [ -z "$req" ]; then
      sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
    else
      head=$(grep -n '</head>\\' $f | cut -d: -f1)
      if [ $head -lt $req ]; then
        sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -e "${req}d" -i $f
      else
        sed -e "/<\/head>\\\/i '); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
      fi
    fi
  fi
done

echo 165@$(date +%H:%M:%S): Deploy theme files
echo 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 | base64 -d | tar -xzf - -C /

# Fix directory permissions after tar extracts
chmod +x /www /www/docroot /www/docroot/css /www/docroot/css/telstra /www/docroot/css/light /www/docroot/css/night /www/docroot/img /www/docroot/img/telstra /www/docroot/img/light /www/docroot/img/night /www/snippets

echo 165@$(date +%H:%M:%S): Persisting theme settings
echo -n "THEME=$THEME COLOR=$COLOR ICONS=$ICONS KEEPLP=$KEEPLP" > /etc/tch-gui-unhide.theme

sed \
  -e '$ a .card_bg{position:relative;z-index:1;}' \
  -e '$ a .card_bg:after{color:#EAEAEA;font-family:FontAwesome;content:attr(data-bg-text);display:block;font-size:110px;line-height:1;position:absolute;bottom:-5px;right:5px;}' \
  -i /www/docroot/css/gw.css
for f in /www/docroot/modals/assistance-modal.lp /www/docroot/modals/usermgr-modal.lp
do
  sed \
    -e '/^if not bridged.isBridgedMode/i \  local lp = require("web.lp")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.setpath("/www/snippets/")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.include("tabs-management.lp")' \
    -e '/^if not bridged.isBridgedMode/,/^end/d' \
    -i $f
done

SRV_transformer=$(( $SRV_transformer + 2 ))

echo 175@$(date +%H:%M:%S): Fix Time of Day tabs
sed \
  -e 's/T"Time of day access control"/T"Device Access Control"/' \
  -e "/update\">\\\/a ');" \
  -e '/update">\\/a local lp = require("web.lp")' \
  -e '/update">\\/a lp.setpath("/www/snippets/")' \
  -e '/update">\\/a lp.include("tabs-tod.lp")' \
  -e "/update\">\\\/a ngx.print('\\\\" \
  -i /www/docroot/modals/tod-modal.lp

echo 175@$(date +%H:%M:%S): Restart Time of Day processing after updates applied 
sed -e 's|reload$|reload; /etc/init.d/tod restart;|' -i /usr/share/transformer/commitapply/uci_tod.ca
SRV_transformer=$(( $SRV_transformer + 1 ))

# Initial invocation of transformer code will fail if history directory does not exist
if [ ! -d /root/trafficmon/history ]; then
  echo 180@$(date +%H:%M:%S): Create directory to retain traffic monitor daily history
  mkdir -p /root/trafficmon/history
fi
if [ ! -f /root/trafficmon/history/.wan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wan_rollover
fi
if [ ! -f /root/trafficmon/history/.wwan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WWAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wwan_rollover
fi

grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
if [ $? -eq 1 ]; then
  echo 180@$(date +%H:%M:%S): Create cron job to retain traffic monitor daily history
  echo "9,19,29,39,49,59 * * * * /usr/sbin/traffichistory.lua" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

  sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf079;"/' -i /www/cards/016_nfc.lp
if [ $THEME_ONLY = n ]; then
  # Run any extra feature scripts
  for s in $(ls tch-gui-unhide-xtra.* 2>/dev/null)
  do
    echo -n 190@$(date +%H:%M:%S): Executing extra feature script for $(echo $s | cut -d. -f2-):
    . $s
  done
fi

echo 195@$(date +%H:%M:%S): Sequencing cards
for RULE in $(uci show web | grep '=card' | cut -d= -f1)
do
  CARD=$(uci -q get ${RULE}.card)
  FILE=$(ls /www/cards/ | grep "..._${CARD#*_}")
  if [ "$CARD" != "$FILE" ]
  then
    echo "195@$(date +%H:%M:%S):  - Renaming $FILE to $CARD"
    mv /www/cards/$FILE /www/cards/$CARD
  fi
done

if [ -z "$ALLCARDRULES" -a -f tch-gui-unhide-cards ]
then
  ./tch-gui-unhide-cards -s -a -q
fi

if [ $THEME_ONLY = n ]; then
  for l in $(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)
  do
    echo 200@$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in $l
    sed -e "s/\(current_year); ngx.print('\)/\1 \[tch-gui-unhide 2021.05.15 for FW Version 17.2.0284\]/" -i $l
  done
fi

echo 200@$(date +%H:%M:%S): Applying service changes if required...
apply_service_changes

chmod 644 /usr/share/transformer/mappings/rpc/gui.*
echo "************************************************************"
echo "* Done!! You should clear your browser cache of images and *"
echo "* files, otherwise you won't see the theme changes.        *"
echo "************************************************************"
echo
echo "++ TIP #1: Bookmark http://$(uci get network.lan.ipaddr)/gateway.lp"
echo "++         to bypass the Telstra Basic web GUI..."
echo
echo "++ TIP #2: Use the tch-gui-unhide-cards script to"
echo "++         change card order and visibility"
echo
if [ "$UPDATE_BTN" = n ]; then
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "++ WARNING! The Update Available notification is DISABLED! +"
  echo "++          You must check for updates manually.           +"
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo
fi
