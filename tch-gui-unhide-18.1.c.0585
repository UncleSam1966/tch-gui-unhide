#!/bin/sh
echo 000@$(date +%H:%M:%S): Built for firmware version 18.1.c.0585 - Release 2021.03.17
RELEASE='2021.03.17@17:19'
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on various pages https://hack-technicolor.readthedocs.io/en/stable/

TARGET_VERSION=""
for x in $(basename $0 | tr '-' "$IFS")
do 
  TARGET_VERSION=$x
done
echo "$TARGET_VERSION" | grep -q '\.'
if [ $? -eq 1 ]
then
  echo "ERROR: Unable to determine Target Version!"
  echo "       Did the script get renamed??"
  echo "       Aborting..."
  exit 1
fi
SCRIPT=$(basename $0 | sed "s/-$TARGET_VERSION//")

DFLT_USR=$(uci -q get web.uidefault.defaultuser)
FW_UPGRD=$(uci -q get web.uidefault.upgradefw)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC=$(uci -q get env.var.ssid_mac_postfix_r0)
HOSTNAME=$(uci -q get system.@system[0].hostname)
case "$(grep 'title>.*</title' /www/docroot/gateway.lp | cut -d'>' -f2 | cut -d'<' -f1)" in
  $VARIANT) TITLE="$VARIANT";;
  $HOSTNAME) TITLE="$HOSTNAME";;
  $VARIANT-$MAC) TITLE="$VARIANT-$MAC";;
  *) TITLE="";;
esac

if [ -f /usr/tch-gui-unhide.theme ]; then
  mv /usr/tch-gui-unhide.theme /etc/tch-gui-unhide.theme
fi
if [ -f /etc/tch-gui-unhide.theme ]; then
  . /etc/tch-gui-unhide.theme
fi
if [ -z "$THEME" ]; then
  KEEPLP=n
  grep -q 'body{background-color:#353c42;' /www/docroot/css/gw.css
  if [ $? -eq 0 ]; then
    THEME=night
  else
    grep -q 'body{background-color:#fff;' /www/docroot/css/gw.css
    if [ $? -eq 0 ]; then
      THEME=light
    else
      THEME=telstra
      grep -q 'body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color' /www/docroot/css/gw-telstra.css
      if [ $? -eq 1 -a -f /www/snippets/tabs-home.lp ]; then
        grep -q 'T"Boost Your Wi-Fi"' /www/snippets/tabs-home.lp
        if [ $? -eq 1 ]; then
          KEEPLP=y
        else
          KEEPLP=n
        fi
      fi
    fi
  fi
  case "$(grep '.smallcard .header{background-color:#......;}' /www/docroot/css/gw.css  | cut -d# -f2 | cut -d\; -f1)" in
    "005c32") COLOR=green;;
    "662e91") COLOR=purple;;
    "f36523") COLOR=orange;;
    "008fd5") COLOR=blue;;
    "272c30") COLOR=monochrome;;
    *) if [ $THEME = light ]; then COLOR=monochrome; else COLOR=blue; fi;;
  esac
  ICONS="$(grep '.card_bg:after{visibility:' /www/docroot/css/gw.css | cut -d: -f3 | cut -d\; -f1)"
fi

grep -q 'rpc.gui.pwd.@' /www/docroot/modals/mmpbx-profile-modal.lp
if [ $? -eq 0 ]; then
  SIP_PWDS=y
else
  SIP_PWDS=n
fi

INSTALLED_RELEASE="$(grep -o -m 1 -E '[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]@[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' /usr/share/transformer/mappings/rpc/gui.map 2>/dev/null)"

grep -q 'rpc.gui.UpdateAvailable' /www/docroot/gateway.lp
if [ $? -eq 0 ]; then
  UPDATE_BTN=y
else
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp
  if [ $? -eq 0 ]; then
    UPDATE_BTN=n
  else
    UPDATE_BTN=y
  fi
fi

FIX_DFLT_USR=n
FIX_FW_UPGRD=n
if [ "$(uci -q get dropbear.lan.enable)" = "1" -a "$(uci -q get dropbear.lan.PasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootLogin)" = "1" ]; then
  FIX_SSH=n
else
  FIX_SSH=y
fi
if [ "$(uci -q get system.config.export_plaintext)" = "1" -a "$(uci -q get system.config.export_unsigned)" = "1" -a "$(uci -q get system.config.import_plaintext)" = "1" -a "$(uci -q get system.config.import_unsigned)" = "1" ]; then
  FIX_CFG_PORT=n
else
  FIX_CFG_PORT=y
fi
echo "$(uci -q get web.parentalblock.roles)" | grep -q "admin"
if [ $? -eq 0 ]; then
  FIX_PARENT_BLK=n
else
  FIX_PARENT_BLK=y
fi

# Keep count of changes so we know whether to restart services
SRV_cron=0
SRV_dropbear=0
SRV_nginx=0
SRV_power=0
SRV_system=0
SRV_transformer=0

check_pwr_setting() {
  section="$1"
  option="$2"
  text="$3"
  if [ -z "$(uci -q get power.$section.$option)" ]; then
    pwrctl show | grep "$text" | grep -q DISABLED
    uci set power.$section.$option="$?"
    SRV_power=$(( $SRV_power + 1 ))
  fi
}

apply_service_changes() {
  if [ $SRV_transformer -gt 0 ]; then
    # Need to stop watchdog whilst we restart transformer, because if it does not find /var/run/transformer.pid, it will reboot the system!
    /etc/init.d/watchdog-tch stop
    /etc/init.d/transformer restart
    /etc/init.d/watchdog-tch start
  fi
  [ $SRV_cron -gt 0 ] && /etc/init.d/cron restart
  [ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear restart
  [ $SRV_system -gt 0 ] && /etc/init.d/system reload
  [ $SRV_nginx -gt 0 ] && /etc/init.d/nginx restart

  if [ -z "$(uci -q get power.cpu)" ];then
    uci set power.cpu='cpu'
  fi

  if [ -z "$(uci -q get power.cpu.cpuspeed)" ]; then
    case "$(pwrctl show | grep "CPU Speed Divisor" | tr -s " " | cut -d" " -f4)" in
      1) uci set power.cpu.cpuspeed="1";;
      2) uci set power.cpu.cpuspeed="2";;
      4) uci set power.cpu.cpuspeed="4";;
      5) uci set power.cpu.cpuspeed="8";;
      *) uci set power.cpu.cpuspeed="256";;
    esac
    SRV_power=$(( $SRV_power + 1 ))
  fi
  check_pwr_setting "cpu" "wait" "CPU Wait"
  check_pwr_setting "ethernet" "ethapd" "Auto Power"
  check_pwr_setting "ethernet" "eee" "Energy Efficient Ethernet"
  check_pwr_setting "ethernet" "autogreeen" "AutoGreeen"
  check_pwr_setting "ethernet" "dgm" "Deep Green Mode"
  [ $SRV_power -gt 0 ] && uci commit power
}

RESTORE=n
WRAPPER=n
YES=n
THEME_ONLY='n'

FILENAME=$(basename $0)

while getopts :c:d:f:h:i:l:p:rt:uv:yTVW option
do
 case "${option}" in
   c) case "$(echo ${OPTARG} | tr "BGMOPR" "bgmopr" | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;; 
        g) COLOR=green;; 
        o) COLOR=orange;; 
        p) COLOR=purple;; 
        r) COLOR=red;; 
        *) COLOR=monochrome;;
      esac;;
   d) case "${OPTARG}" in y|Y) FIX_DFLT_USR=y; DFLT_USR='admin';; n|N) FIX_DFLT_USR=y; DFLT_USR='';;  *) echo 'WARNING: -d valid options are y or n';; esac;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPGRD=y; FW_UPGRD='1';;     n|N) FIX_FW_UPGRD=y; FW_UPGRD='0';; *) echo 'WARNING: -f valid options are y or n';; esac;;
   h) case "${OPTARG}" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        s) TITLE="$VARIANT-$MAC";;
        *) TITLE="$OPTARG";;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   l) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then KEEPLP=y; else KEEPLP=n; fi;;
   p) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then SIP_PWDS=y; else SIP_PWDS=n; fi;;
   r) RESTORE=y;;
   t) case "${OPTARG}" in
        g) THEME=night; COLOR=green; KEEPLP=n; echo WARNING: -tg deprecated. Use -tn -cg in future;; 
        o) THEME=night; COLOR=orange; KEEPLP=n; echo WARNING: -to deprecated. Use -tn -co in future;; 
        p) THEME=night; COLOR=purple; KEEPLP=n; echo WARNING: -tp deprecated. Use -tn -cp in future;; 
        l) THEME=light; COLOR=monochrome; KEEPLP=n;;
        m) THEME=telstramodern; COLOR=blue; KEEPLP=y;;
        n) THEME=night; COLOR=blue; KEEPLP=n;;
        *) THEME=telstra; COLOR=blue; KEEPLP=y;;
      esac;;
   u) RESULT=$(curl -m 5 -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else 
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]
                then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo "002@$(date +%H:%M:%S): Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]
                then
                  chmod +x $FILENAME
                  echo "002@$(date +%H:%M:%S): Successfully updated $FILENAME."
                  return 0
                else
                  echo "002@$(date +%H:%M:%S): Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo "002@$(date +%H:%M:%S): Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   v) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then UPDATE_BTN=y; else UPDATE_BTN=n; fi;;
   y) YES=y;;
   T) THEME_ONLY=y;;
   V) LATEST_RELEASE=$(curl -m 1 -q -s -k -L -r0-9 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt)
      echo "002@$(date +%H:%M:%S): This Release       $RELEASE"
      if [ -z "$INSTALLED_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Installed Release  NOT INSTALLED"
      else
        echo "002@$(date +%H:%M:%S): Installed Release  $INSTALLED_RELEASE"
      fi
      if [ -z "$LATEST_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Latest Release     UNKNOWN (No internet access?)"
      else
        echo "002@$(date +%H:%M:%S): Latest Release     $LATEST_RELEASE"
      fi
      exit;;      
   W) WRAPPER=y;;
   ?) echo "Optional parameters:"
      echo " Control Options:"
      echo " -d y|n         : Enable (y) or Disable (n) Default user (i.e. GUI access without password)"
      echo "                    (Default is current setting)"
      echo " -f y|n         : Enable (y) or Disable (n) firmware upgrade in the web GUI"
      echo "                    (Default is current setting)"
      echo " -p y|n         : Use decrypted text (y) or masked password (n) field for SIP Profile passwords"
      echo "                    (Default is current setting i.e (n) by default)"
      echo " -v y|n         : Enable (y) check for new releases and show 'Update Available' button in GUI, or Disable (n)"
      echo "                    (Default is current setting or (y) for first time installs)"
      echo " Theme Options:"
      echo " -c b|o|g|p|r|m : Set the theme highlight colour"
      echo "                    b=blue o=orange g=green p=purple r=red m=monochrome"
      echo "                    (Default is current setting, or (m) for light theme or (b) for night theme)"
      echo " -h d|s|n|\"txt\" : Set the browser tabs title (Default is current setting)"
      echo "                    (d)=$VARIANT (s)=$VARIANT-$MAC (n)=$HOSTNAME (\"txt\")=Specified \"txt\""
      echo " -i y|n         : Show (y) or hide (n) the card icons"
      echo "                    (Default is current setting, or (n) for light theme and (y) for night theme)"
      echo " -l y|n         : Keep the Telstra landing page (y) or de-brand the landing page (n)"
      echo "                    (Default is current setting, or (n) if no theme has been applied)"
      echo " -t l|n|t|m     : Set a light (l), night (n), or Telstra-branded Classic (t) or Modern (m) theme"
      echo "                    (Default is current setting, or Telstra Classic if no theme has been applied)"
      echo " -T             : Apply theme ONLY - bypass all other processing"
      echo " Update Options:"
      echo " -u             : Check for and download any changes to this script (may be newer than latest release version)"
      echo "                    When specifying the -u option, it must be the ONLY parameter specifed."
      if [ $WRAPPER = y ]; then
      echo " -U             : Download the latest release, including utility scripts (will overwrite all existing script versions)."
      echo "                    When specifying the -U option, it must be the ONLY parameter specifed."
      fi
      echo " Miscellaneous Options:"
      echo " -r             : Restore changed GUI files to their original state (config changes are NOT restored)"
      echo "                    When specifying the -r option, it must be the ONLY parameter specifed."
      echo " -y             : Bypass confirmation prompt (answers 'y')"
      echo " -V             : Show the release number of this script, the current installed release, and the latest available release on GitHub"
      echo 
      echo "NOTE #1: Theme (-t) does not need to be re-specified when re-running the script: current state will be 'remembered'"
      echo "         between executions (unless you execute with the -r option, which will remove all state information)"
      echo "NOTE #2: Use tch-gui-unhide-cards to set card order and visibility"
      echo
      exit;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

if [ $THEME_ONLY = n ]; then
restore_www() {
  # File deployed to incorect location by releases prior to 2021.02.06
  if [ -f /usr/share/transformer/mappings/iperf.map ]; then
    rm /usr/share/transformer/mappings/iperf.map
  fi
  # Need to remove existing version or it doesn't get replaced?? 
  if [ -f /usr/sbin/traffichistory.lua ]; then
    if [ "$1" = "V" ]; then
      echo 010@$(date +%H:%M:%S): Removing file /usr/sbin/traffichistory.lua
    fi
    rm /usr/sbin/traffichistory.lua
  fi
  grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
  if [ $? -eq 0 ]; then
    sed -e '/traffichistory.lua/d' -i /etc/crontabs/root
    SRV_cron=$(( $SRV_cron + 1 ))
  fi
  # Add individual files to be restored here
  for t in /etc/init.d/power
  do
    s=/rom$t
    if [ -f $s ]; then
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        echo 010@$(date +%H:%M:%S): Restoring file $t
        cp -f -p "$s" "$t"
      fi
    fi
  done
  # Add directories to be restored here
  for d in www/cards www/docroot www/lua www/snippets usr/share/transformer/commitapply usr/share/transformer/mappings/rpc usr/share/transformer/mappings/uci
  do
    echo 010@$(date +%H:%M:%S): Restoring directory /$d
    for s in $(find /rom/$d -type f | grep -v -E \(/rom/www/docroot/help\))
    do
      if [ "$s" = "/rom/www/cards/010_lte.lp" ]
      then
        t="/www/cards/003_lte.lp"
      else
        t=$(echo "$s" | cut -c5-)
      fi
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        if [ "$1" = "V" ]; then
          echo 014@$(date +%H:%M:%S): Restoring file $t
        fi
        cp -f -p "$s" "$t"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done

    for f in $(find /$d -type f ! -path '/www/docroot/help*' ! -name '003_lte.lp')
    do
      if [ ! -f "/rom$f" -a -f "$f" ]; then
        if [ "$1" = "V" ]; then
          echo 019@$(date +%H:%M:%S): Removing file $f
        fi
        rm -f "$f"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done
  done
}

if [ $RESTORE = y ]; then
  restore_www V
  for d in /www/docroot/css/light /www/docroot/css/night /www/docroot/css/telstra /www/docroot/img/light /www/docroot/img/night /www/docroot/css/Telstra
  do
    if [ -d "$d" ]
    then
      if [ "$1" = "V" ]; then
        echo 019@$(date +%H:%M:%S): Removing empty directory $d
      fi
      rmdir "$d"
    fi
  done
  for s in $(uci show web | grep normally_hidden | cut -d. -f2)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry web.$s
    uci -q delete web.$s
    uci -q del_list web.ruleset_main.rules="$s"
    SRV_nginx=$(( $SRV_nginx + 2 ))
  done
  for s in $(uci show web | grep '=card' | cut -d= -f1)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry $s
    uci -q delete $s
    SRV_nginx=$(( $SRV_nginx + 1 ))
  done
  RULES=$(uci get web.ruleset_main.rules)
  for s in $(echo $RULES | tr " " "\n" | grep -v dumaos | sort -u)
  do
    TARGET=$(uci -q get web.$s.target)
    if [ ! -z "$TARGET" -a ":$TARGET" != ":/" -a ! -f /www/docroot$TARGET -a ! -f /www$TARGET -a ! -f /www/docroot/ajax$TARGET ]; then
      echo 019@$(date +%H:%M:%S): Removing config entry web.$s
      uci -q delete web.$s
      uci -q del_list web.ruleset_main.rules="$s"
      SRV_nginx=$(( $SRV_nginx + 2 ))
    else
      ROLE=$(uci -q get web.$s.roles)
      if [ ! -z "$ROLE" -a "$ROLE" = "nobody" ]; then
        echo 019@$(date +%H:%M:%S): Resetting admin role on config entry web.$s.roles
        uci -q delete web.$s.roles
        uci add_list web.$s.roles="admin"
        SRV_nginx=$(( $SRV_nginx + 2 ))
      fi
    fi
  done
  uci commit web
  sed -e '/lua_shared_dict *TGU_MbPS/d' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
  apply_service_changes
  echo "************************************************************"
  echo "* Restore complete. You should clear your browser cache of *"
  echo "* images and files to make sure you can see the changes.   *"
  echo "* NOTE: No config changes have been restored, except to    *"
  echo "*       remove added entries to display hidden modals.     *"
  echo "************************************************************"
  exit
fi

VERSION=$(uci get version.@version[0].version | cut -d- -f1)
if [ "$VERSION" = "$TARGET_VERSION" ]
then
  echo 020@$(date +%H:%M:%S): Current version matches target \($TARGET_VERSION\)
else
  echo 020@$(date +%H:%M:%S): WARNING: This script was developed for the $TARGET_VERSION firmware.
  echo 020@$(date +%H:%M:%S): It MAY work on your $VARIANT with $VERSION firmware, but it also may not.
  echo 020@$(date +%H:%M:%S): If you still wish to proceed, reply FORCE \(in capitals as shown\).
  read
  if [ "$REPLY" != "FORCE" ]
  then
    echo 020@$(date +%H:%M:%S): Good choice.
    exit
  fi
fi

echo "030@$(date +%H:%M:%S): This script will perform the following actions:"
if [ $FIX_SSH = y ]; then
echo "030@$(date +%H:%M:%S):  - Properly enable SSH access over LAN"
fi
if [ $FIX_CFG_PORT = y ]; then
echo "030@$(date +%H:%M:%S):  - Enable unsigned configuration export/import in the web GUI"
fi
if [ $FIX_FW_UPGRD = y ]; then
if [ "$FW_UPGRD" = "1" ]; then
echo "030@$(date +%H:%M:%S):  - Enable firmware upgrade in the web GUI"
else
echo "030@$(date +%H:%M:%S):  - DISABLE firmware upgrade in the web GUI"
fi
fi
if [ $FIX_DFLT_USR = y ]; then
if [ "$DFLT_USR" = "admin" ]; then
echo "030@$(date +%H:%M:%S):  - ENABLE the default user in the web GUI (i.e. GUI access without password)"
else
echo "030@$(date +%H:%M:%S):  - Disable the default user in the web GUI"
fi
fi
if [ $FIX_PARENT_BLK = y ]; then
echo "030@$(date +%H:%M:%S):  - Ensure admin role can administer the parental block"
fi
if [ -z "$INSTALLED_RELEASE" ]; then
echo "030@$(date +%H:%M:%S):  - Install tch-gui-unhide release $RELEASE"
else
echo "030@$(date +%H:%M:%S):  - Replace tch-gui-unhide release $INSTALLED_RELEASE with $RELEASE"
fi
echo "030@$(date +%H:%M:%S):  - Allow editing of various settings that are not exposed in the stock GUI"
echo "030@$(date +%H:%M:%S):  - Unhide various cards and tabs contained in the stock GUI that are normally hidden"
echo "030@$(date +%H:%M:%S):  - Add new cards and screens, and modified cards and screens from the Ansuel tch-nginx-gui"
echo "030@$(date +%H:%M:%S):  - The GUI screens will be prettied up a bit and the $THEME theme applied with $COLOR highlights and $ICONS card icons"
if [ -f /www/docroot/landingpage.lp ]; then
echo "030@$(date +%H:%M:%S):  - The Telstra Landing Page will be $(echo $KEEPLP | sed -e 's/y/left UNCHANGED/' -e 's/n/themed and de-branded/')"
fi
if [ ! -z "$TITLE" ]; then
echo "030@$(date +%H:%M:%S):  - The browser tabs titles will be set to $TITLE"
fi
if [ "$SIP_PWDS" = y ]; then
echo "030@$(date +%H:%M:%S):  - SIP Profile passwords will be decrypted and displayed in text fields rather than password fields"
fi
if [ "$UPDATE_BTN" = y ]; then
echo "030@$(date +%H:%M:%S):  - New release checking is ENABLED and 'Update Available' will be shown in GUI when new version released"
else
echo "030@$(date +%H:%M:%S):  - New release checking is DISABLED! 'Update Available' will NOT be shown in GUI when new version released"
fi

echo 030@$(date +%H:%M:%S): If you wish to proceed, enter y otherwise just press [Enter] to stop.
if [ $YES = y ]; then
  REPLY=y
else
  read
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

echo 030@$(date +%H:%M:%S): IMPORTANT NOTE - You can restore changed GUI files to their original state by running: $0 -r

# Package repository for Homeware 18 moved 31/03/2021 (Quick fix in case de-telstra not run)
if [ $(grep -c 'www.macoers.com/repository' /etc/opkg/customfeeds.conf) -gt 0 ]; then
  echo 040@$(date +%H:%M:%S): Fixing opkg repository
  sed -e 's|www.macoers.com/repository|repository.macoers.com|' -i /etc/opkg/customfeeds.conf
fi

if [ $FIX_SSH = y ]; then
  echo 040@$(date +%H:%M:%S): Properly enabling SSH access over LAN
  # We need to enable this properly as you can enable/disable via the GUI, and if done
  # without allowing password auth and root login, it can accidently prevent SSH access
  uci set dropbear.lan.enable='1'
  uci set dropbear.lan.PasswordAuth='on'
  uci set dropbear.lan.RootPasswordAuth='on'
  uci set dropbear.lan.RootLogin='1'
  uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
fi
  
if [ $FIX_CFG_PORT = y ]; then
  echo 040@$(date +%H:%M:%S): Enabling unsigned configuration export/import in the web GUI
  uci set system.config.export_plaintext='1'
  uci set system.config.export_unsigned='1'
  uci set system.config.import_plaintext='1'
  uci set system.config.import_unsigned='1'
  uci commit system
  SRV_system=$(( $SRV_system + 4 ))
fi

if [ $FIX_FW_UPGRD = y ]; then
  if [ $FW_UPGRD = 1 ]; then
    echo 040@$(date +%H:%M:%S): Enabling firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='1'
    uci set web.uidefault.upgradefw_role='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  else
    echo 040@$(date +%H:%M:%S): DISABLING firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='0'
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
  uci commit web
fi

if [ $FIX_DFLT_USR = y ]; then
  if [ "$DFLT_USR" = "admin" ]; then
    echo 040@$(date +%H:%M:%S): Enabling the default user in the web GUI
    uci set web.default.default_user='usr_admin'
    uci set web.uidefault.defaultuser='admin'
  else
    echo 040@$(date +%H:%M:%S): Disabling the default user in the web GUI
    uci -q delete web.default.default_user
    uci -q delete web.uidefault.defaultuser
  fi
  uci commit web
  SRV_web=$(( $SRV_web + 2 ))
fi

if [ $FIX_PARENT_BLK = y ]; then
  echo 040@$(date +%H:%M:%S): Ensuring admin role can administer the parental block
  uci -q del_list web.parentalblock.roles='admin'
  uci add_list web.parentalblock.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

grep -q -E "lua_shared_dict *TGU_MbPS" /etc/nginx/nginx.conf
if [ $? -eq 1 ]; then
  echo 040@$(date +%H:%M:%S): Creating shared dictionary for throughput calculations
  sed -e '/^http/a\    lua_shared_dict TGU_MbPS 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

echo 050@$(date +%H:%M:%S): Ensuring card sequence and visibility is up to date
ALLCARDRULES="$(uci show web | grep =card)"
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="${CARDFILE#*_}"
  CARDRULE="card_$(basename $CARD .lp)"
  MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
  HIDDEN=$(uci -q get web.${CARDRULE}.hide)
  if [ -z "$MODAL" ]
  then
    MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
  fi
  MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
  if [ ! -z "$MODALRULE" -a "$(uci -q get web.$MODALRULE.roles)" != "admin" ]
  then
    echo "050@$(date +%H:%M:%S):  - Converting $CARD card visibility from modal-based visibility"
    HIDDEN=1
    uci -q delete web.$MODALRULE.roles
    uci add_list web.$MODALRULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  if [ -z "$HIDDEN" -o \( "$HIDDEN" != "0" -a "$HIDDEN" != "1" \) ]
  then
    HIDDEN=0
  fi
  uci set web.${CARDRULE}=card
  uci set web.${CARDRULE}.card="$(basename $CARDFILE)"
  uci set web.${CARDRULE}.modal="$MODALRULE"
  uci set web.${CARDRULE}.hide="$HIDDEN"
  SRV_nginx=$(( $SRV_nginx + 4 ))
done
uci commit web

# Do the restore
restore_www
echo 050@$(date +%H:%M:%S): Pre-update restore completed

echo 060@$(date +%H:%M:%S): Deploy modified iperf GUI code
echo H4sIAAAAAAAAA+2UvU7DMBCAM0fKO1ieWqkNTmInExMzEw8QheCWSGls2c6AUN8d2xG0VPQP2iDEfYvj8+l81ndKr9VNcGWIpWDMr5bd1X8nWUGLIrWJRUASQkkWIHbtxhy9NpVCKFBCmEN5x87/KL31r58rxa84Bef7Txhh4H8MNv6Nqjq9EGrFL/1HON8/JbQA/2Pwtf9VJWXTLfVlBuEk/9TmZEWSp6n1z3KWgP8xOOK/r5ufz8D5/nOagf9ROMF/I7laxDb03Tuc4JzSvf4ZyT/7T0ma5QEil3zoPv65/1bUVYtq0S2aZelNo1uE/QeOwiicz5GdgdgHotDNBVcTbENlYkSCp7Hiy0Ybru58iftKTraLTXdrxMNpFA4X+1g5xOzFr1GI0Mduu9DMnWhem0Z0mw591LxIvhMS0uXp94oIYamEEXiG8BPXppRCGbfhXfXYcuxy1lG4ds0eeOJDs5Itd0/cbnuKovC3LQIAAAAAAAAAAAAAAAAAAAAAAADAwBuC/9IzACgAAA== | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified broadband GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified devices GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified eco GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified firewall GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified gateway GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified internet GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified iproutes GUI code
echo H4sIAAAAAAAAA+0ba3PbNjKf+SswdFORE0qWZFm6S+NMHk5SzzWuL07bm3F9HoqEJJ4pkiVI2a7H99tvFwBJ8CH5kcjX6wkfLAJYAIvdxT6w8MXFxfaTNZculNHuLv+FUv3l372dUb876HVHo96Tbq876PafkN11I4YlZYkdE/IkDsNkFdxt/f+j5QL479ixy9YoBXfiP3B8sNMbDXvI/95gtLPh/2OUgv/d3u6ZF8VhmlDW8aOvuAYyeDgYLOP/cNjfqfB/0B8Nn5DuV8Rhafk/53+7HcU0ie2A+XZC3efEDUkQJsSZ2cGUkmTmMTLxfKpp7TZ5F9hjnxI/dGzf+91OvDDQpjRJ6GXSwT9uOLe9wGhd0HHqtZ0wpi1T0zg4mYTx3E7IHmFJ7AXTjqjLztQ7m1E/ojH0x/S31IupocMsnbxDNyWoEwYJDZIl8OXefBCI9eWVCuvaiT0PXernIIwyBvsBoGB62XGSy45skf0AbftHdjIDCH2b19h2dl7avA6nRtc0b5LN9Xxms9eOAxUjH20CSWkAxNy/Cuy555BPfAK5iHsVnDlhGiCdOM4dIO/RoaGzK9ZxfJuxTn5EdYskcUpNTR1UfNuBS7aKahiTLvLw4GgxIMcJ8K6ytBctBs1rp47XCWhyEcbnHb52sXRpkFLhiyv1bPX9w2NNm6SBg6JDWOR7iXFpMRqZ2iXMkIRCOIzLgiuRBfJHfZeh6NAIp9KfAwLXNxlvbRDAGBknRMrQjZN/PmWnz0yAElM/n7J0bEhAmE8iYDimnPtkS/w+653CPA6hgWtqcC5SmFf0aNCUibIbsLM4cs4iKQ3wnRPIA/mLJ7YDRMoIm7WcRUGFtOpEGUnzJRiNFzRmvBM3DxuGDZIziyxgTti2FzOjNDn0Xt+YcIJRBhcdjh6XtupsJ1u1+Z8RvnU5qtMhegGi8803EECeNnVXRhpEtnNuVBcwTQIKJGWUCABkFkF4E070HEC8sQfScKWskMlVt75vYlRRKO+dC+Cis7D9lJJ/A4t0QQgpVOk4m1uIYCY4T5luyVGmpVugG1Q8iu9nZCuboyANqo0IpDcxWr9qv2ovXG9B+JHd01lkBzv6y0rj3PZ9NL3Y0TK/I6SYoVCIHSemoJjfAtz31HZpbHzWD4740YWDAhK+QheZBGYtoaWun1EOUTgbT3WCOrE9nrZRk+/p325dTrq9v3xXRRs+E7QCvB03lu/Hm0c+bbuUObzPI7OYTvb0Lf3lt8GYRS+2PbFRVaGe+V5wvifp35Iz8Z429kikknA69anskG0xnYcJtAHPRIPnAnJ04TlUUEBvWYXWVbijydXIodF6AfomDKbkae8b9vJp/xv3xbZoeSmUY8vSchicP6Mxp1kQhhNR1ZdOwEjLKpSyaWnFrtV2syw9MAkQ9hYC/wEo2WpkcgvVRwORGwmIRoJxc7SClDWjdStfHjYtA2YVVqvCLaXjoex6MOkakAdTSo65hl1JDEWLr54F955ruKqg5u3Ldt7KDVfIYPmEOmWrwJ2Ioq8z9cMxKK0O5R6lC5oW1LYyFvV3UT3pnea6vKzKS8s1DUB3oavXoM9QOFKmrVyW7IHl6Mn1amNhwc/6fnhMjiR0theN+ozeAd71WDYA7McK5X/MJekHbzpLjGJaq74dUPiqmZ744YVjOzNaZ8XEcRLAMkEjwjo4mpZ5UYxFmuS1Jk6oyzQAljiQ92cMWL5UifrVcZyY76GRvOWwZdrfBv0gyueTWrVdZHSvnA0wlS+X/6JCqA3CxkeN/zD+d0MHo9u13QDd8f6vNxzu7oyGA4j/+93N/c/jFJX/0pH86mvc//5vZ6c/2vD/MUoD/wuzkocSX7bGLfd//d3hqML/UW93c//3KOVe938/POTi7x53e3PKmD2lS+HL/cXtXsiW3QcqXcVNH79jsjAyzq8jeS3DePEGHaZiJDoyHkRG9E0Y+tQOtMKdPDuyY3vOr2fQ4zsTfgheCt3i8FocPI6AtglHe9mADARG3KgLc5zq6y7e1GbGptJQGflzB5JvUdK1smuQANenf09pfGUUW7WK1c3apUflGqPqTuU3GKob/GOE4qSDVwXbpfLHNAlZfnUhwtpx6F6RNELGlONhP6qKAV6GaH7UAY8Xb6MMfRv1Hgu8KKIJ2xadXuD4qQsjEnvM2vxmLaCJGFtGBSO0DBf8bs/C2PsdqIox9ZwmsxDCMCSlTmx+0yhRbtSt9eCwSraPgj3MKMs/CHeUd5m10EzcW9KkRJpZMvfFXSJ+nWzxurz7a73w6RQ8UhGFftaPZXigY7X1YjvrbRha85svvMSZAaPfZeJO9EJMdUsVwxO159S8z+yfKAaulPBr+ffymIiVimNTXyvvO1VphivWwluFiFABVpcd+JV3du/BYoC012/hYOB/W+3npcH+1y4Sv3SN1fa/t9sdDSr2fzjcGW3s/2OUNdr/O+T9HpTM+8M5FHfILi6ODw6WOBXHnC4H7OBIwsYht+SVNORzoDf2GDkZAu+3lP6NXlXmBbhPYLnDOXTlwNPXP9fBXgfuzwIJ5KeSguTnH3Smn84D4dtcazNuu/lNykGWdAKfJLDn3N05kPUInQS1IbmKOACKCVRBM7ph4CPSmO+yNDtJcNZr4gVRmvAvJWvSJw7F1cCEkBtyA46MVcZlnzIwUrZwIXJsyq05TuXmNWP20WbnCkqymuMi62tG4gMI2IV9peBRtOSoFE1rxuY4TOOS1OQNOS55y7q5A6fJc1T+ZA0Fh7KWr4/KTf20hdwNFqfNsYN3roczCZ8YG167bqm+T32a0KKJJ+V4RKC74mmBzHxY2thmNMtVNz4kaMIHdZil1HmcwKaNMcJnXFsGClX1YdX3WLwJqb4EEPn6B6T+S8al/gIAE8h8KswgXz6fAhA4kHI4zxo3vQPg3/yOdulTAJn2v8dzAHVEkT8vmzpUzh8RReq+lSBGdaWciBd2cAbLTBreCHgyWd6wJt90TsVZngpvSojz5Sz9lW6e9E8tvSMyBIuOOBewY0BBR+4oTT428at78RYBgp6QZ+LdmRMthrrM0Bftw9iVA/INnWzln4Ih1xzXk96pRT4b8tMkN3kOXmGMSP7dZsnuZT3ATwS+1PXBeu0E8G7eaCoewzJMl1mGOy9uEdRJeU5SZBWzacnNwzTzfIlm/kKS3Mmv8RQgl07s1MeF9EXoRQpCDLSzgyjxHBhKXi7KCpoC6o4Go91+letLODOZ+0j2UziyDn6pqWwEFziH43/hIq99P/t0aWJ7PsOHN6A0ySQO54Tazgw8zwuGeuPDTwd4FIk9DhcQA/CrpaYD1cFVpG7cGovLMYtsCWVc1fEZwjm+HE9D4CRU9DmQogcTZHiGvBX1+/mzcjsoFVE5OT89Qd2wl9UDXkftUgD0KwD9KsBOBWCnCjCoAAyqALsVAKhzZSapE3g+2C0uTELxNDKNvA/TwNXLCk3OgK7GUgWnOg+KI1B6AVH2A+qP+l6hIyAvnLid/6yjzxHQC7mWeC/BgQFSbPUQj0mxlESH3xjl8QkIvOsioPuj4F/mN2VXmM2SoXglNRn68IvhRYBdDLGRRTIRkqHOxcERvtZ4F/PLTwi8ClhuuBCgxBwIjgzVqbHdhR041D04KsIjq+T2wFz4aGIFRIbpD/94azbhqnCWywZqH0EPqRyB2h19KcOL21/FWC0JMA+OINA7TsfAbktD87IUbjE4FNbG0qQxULjz4RcYzRVvPZKUVKCH6XxM44PgE14eGO2/QrEI/jUtLdeuy4cfBO+CdH7MtaKRK0xTkYQSEYSLWmq6o5fapMysxiNlCfbwP3UOmOqLyHvGy/hVDphly7oj5sNj8hPjKYgMGeWRkIJQqXXNSL1NWQJWCHBT0JL0Rto2oNfY+8UOwY3K0eaYTGz4niFZwLxgElaU8JJIYZXm44TaD5jBHYtMn1jknF7lwgh6xSI0jvNAilMnd/HFSP68VQYLAqJ4VSxH8BghmyzTpaKPK1K8J4TuuqHDtXN/fIn9QvoWWqzOTEXzZHuucAevJRGt/Dk36gNTPOmCr3p4Um4tIhSNd4jzB/PxGhczL3CpfDyu//MVUAxIVt9PFhwi06s7lFF0wO4cPxeKxFJl0Cq2bCGNc/KZD83BlV4Ry9wbf4JeS739WZJv9RfS60+95Tm1SrII6Q/e1Cf5OrWcIspzbbVno1X8uOSsvnSpXuSUDVvtgsfUViXB7rW50tNa8jYMJt40jUVc/YU7voMBb/AOyltvchy+zu7RjH0pS6t6oNAk6i5ISbncin01hfknSWJuyoNLSRWvaY37v//r9weDzfu/xygl/ldt71da45b3f93RoJr/390Z7m7y/49R7p7/v2O+f2UyPPuXyITKN3PXet0p45chR+TdJaDFdIwU9Tm48GUA6bqSo9D3nCsBNY49d0rbU5gwgr7ygDe8k3yQnfqNlmWRHu1fVng8CJ4uRDiJwWlgkWu96UmYVf5XEf3GzEINSVQ2syFs/Yjw4C98L98jZE6rbBZrmI/7DwWbsimbsimbsimbsimbsimb8oct/wHo0jviAFAAAA== | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified lte GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified management GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified multiap GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified qos GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified system GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified telephony GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified theme GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified tod GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified wireless GUI code
echo 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 | base64 -d | tar -xzf - -C /

if [ -f /www/docroot/booster.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local lp = require("web.lp")/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    -e 's#/booster.lp#/modals/wireless-boosters-boosters-modal.lp#' \
    /www/docroot/booster.lp > /www/docroot/modals/wireless-boosters-boosters-modal.lp
fi
if [ -f /www/docroot/boosterstatus.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster status screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/require("web.content_helper")/a local ui_helper = require("web.ui_helper")' \
    -e '/local type_convert/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#networkmap span12#networkmap#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/boosterstatus.lp > /www/docroot/modals/wireless-boosters-status-modal.lp
fi
if [ -f /www/docroot/wifidevices.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster Wi-Fi devices screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local content =/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/wifidevices.lp > /www/docroot/modals/wireless-boosters-devices-modal.lp
fi

grep -q swshaper /usr/share/transformer/mappings/uci/qos.map
if [ $? -eq 1 ]; then
  echo 066@$(date +%H:%M:%S): Configure transformer for QoS shaping
  sed \
    -e 's/"force_pcp" }/"force_pcp", "swshaper" }/' \
    -e '$a \\' \
    -e '$a \--uci.qos.swshaper' \
    -e '$a \local qos_swshaper = {' \
    -e '$a \  config = config_qos,' \
    -e '$a \  type = "swshaper",' \
    -e '$a \  options = { "enable", "max_bit_rate" }' \
    -e '$a \}' \
    -e '$a \mapper("uci_1to1").registerNamedMultiMap(qos_swshaper)' \
    -i /usr/share/transformer/mappings/uci/qos.map
  SRV_transformer=$(( $SRV_transformer + 1 ))
fi

echo 066@$(date +%H:%M:%S): Importing Traffic Monitor into Diagnostics
sed \
  -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
  -e '/^local attributes/i \    ngx.print(ui_helper.createHeader(T"Diagnostics", false, false, nil, nil) )' \
  -e '/"tabs-services/i <div class="modal-body update">\\' \
  -e '/^<div class="container toplevel">/d' \
  -e '/^<div class="row">/d' \
  -e '/^<div class="span11">/d' \
  -e '/^<fieldset>/,/^\\/d' \
  -e '/^<\/script>/a <\/script>\\' \
  -e '/^<\/script>/a <\/div>\\' \
  -e '/^<\/script>/,/^\\/d' \
  -e 's|tabs-services|tabs-diagnostics|' \
  -e 's|lp.include("footer.lp")|ngx.print(ui_helper.createFooter())|' \
  -e 's|800px;|900px;margin:0 auto;|' \
  -e 's|traffic.lp|modals/diagnostics-traffic-modal.lp|' \
  -e 's|<a href="%s" target="_self">|<a href="#" data-remote="%s">|' \
  /www/docroot/traffic.lp > /www/docroot/modals/diagnostics-traffic-modal.lp

echo 067@$(date +%H:%M:%S): Creating QoS Reclassify Rules modal
sed \
  -e 's/\(classify[\.-_%]\)/re\1/g' \
  -e 's/Classify/Reclassify/' \
  /www/docroot/modals/qos-classify-modal.lp > /www/docroot/modals/qos-reclassify-modal.lp

if [ -f /etc/init.d/cwmpd ]
then
  echo 070@$(date +%H:%M:%S): CWMP found - Leaving in GUI
else
  echo 070@$(date +%H:%M:%S): CWMP not found - Removing from GUI
  rm /www/cards/090_cwmpconf.lp
  rm /www/docroot/modals/cwmpconf-modal.lp
  uci -q delete web.cwmpconfmodal
  uci -q del_list web.ruleset_main.rules=cwmpconfmodal
  uci -q delete web.card_cwmpconf
fi

if [ $(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | wc -l) -eq 0 ]
then
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs not found - Removing from GUI
  rm /www/cards/010_fon.lp
  rm /www/docroot/modals/fon-modal.lp
  uci -q delete web.fon
  uci -q delete web.fonmodal
  uci -q del_list web.ruleset_main.rules=fon
  uci -q del_list web.ruleset_main.rules=fonmodal
  uci -q delete web.card_fon
else
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs FOUND - Leaving in GUI
fi

# Check all modals are enabled, except:
#  - diagnostics-airiq-modal.lp (requires Flash player)
#  - mmpbx-sipdevice-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - mmpbx-statistics-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - speedservice-modal.lp
#  - wireless-qrcode-modal.lp (fails with a nil password index error)
echo 070@$(date +%H:%M:%S): Checking modal visibility
for f in $(ls /www/docroot/modals | grep -E -v \(diagnostics-airiq-modal.lp\|mmpbx-sipdevice-modal.lp\|mmpbx-statistics-modal.lp\|speedservice-modal.lp\|wireless-qrcode-modal.lp\) )
do
  MODAL=$(basename $f)
  uci show web | grep -q "/modals/$MODAL"
  if [ $? -eq 1 ]
  then
    CREATE_RULE=y
    RULE=$(basename $f .lp | sed -e 's/-//g')
  else
    CREATE_RULE=n
    RULE=$(uci show web | grep "/modals/$MODAL" | grep -m 1 -v card_ | cut -d. -f2)
  fi
  if [ $CREATE_RULE = y ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL
    uci add_list web.ruleset_main.rules=$RULE
    uci set web.$RULE=rule
    uci set web.$RULE.target=/modals/$MODAL
    uci set web.$RULE.normally_hidden='1'
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL 
    uci -q delete web.$RULE.roles
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
done
uci commit web

echo 070@$(date +%H:%M:%S): Processing any additional cards
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="$(basename $CARDFILE)"
  CARDRULE=$(uci show web | grep "^web\.card_.*${CARDFILE#*_}" | cut -d. -f2)
  if [ -z "$CARDRULE" -o -z "$(uci -q get web.${CARDRULE}.modal)" ]
  then
    CARDRULE="card_$(basename ${CARDFILE#*_} .lp)"
    MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
    if [ -z "$MODAL" ]
    then
      MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
    fi
    MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
    uci set web.${CARDRULE}=card
    uci set web.${CARDRULE}.card="$CARD"
    uci set web.${CARDRULE}.modal="$MODALRULE"
    uci set web.${CARDRULE}.hide='0'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  fi
done

if [ "$(uci -q get web.broadbandstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling broadband-status.lua
  uci add_list web.ruleset_main.rules='broadbandstatusajax'
  uci set web.broadbandstatusajax='rule'
  uci set web.broadbandstatusajax.target='/ajax/broadband-status.lua'
  uci set web.broadbandstatusajax.normally_hidden='1'
  uci add_list web.broadbandstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.networkthroughputajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling network-throughput.lua
  uci add_list web.ruleset_main.rules='networkthroughputajax'
  uci set web.networkthroughputajax='rule'
  uci set web.networkthroughputajax.target='/ajax/network-throughput.lua'
  uci set web.networkthroughputajax.normally_hidden='1'
  uci add_list web.networkthroughputajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.devicesstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling devices-status.lua
  uci add_list web.ruleset_main.rules='devicesstatusajax'
  uci set web.devicesstatusajax='rule'
  uci set web.devicesstatusajax.target='/ajax/devices-status.lua'
  uci set web.devicesstatusajax.normally_hidden='1'
  uci add_list web.devicesstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.gatewaystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling gateway-status.lua
  uci add_list web.ruleset_main.rules='gatewaystatusajax'
  uci set web.gatewaystatusajax='rule'
  uci set web.gatewaystatusajax.target='/ajax/gateway-status.lua'
  uci set web.gatewaystatusajax.normally_hidden='1'
  uci add_list web.gatewaystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.internetstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling internet-status.lua
  uci add_list web.ruleset_main.rules='internetstatusajax'
  uci set web.internetstatusajax='rule'
  uci set web.internetstatusajax.target='/ajax/internet-status.lua'
  uci set web.internetstatusajax.normally_hidden='1'
  uci add_list web.internetstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.telephonystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling telephony-status.lua
  uci add_list web.ruleset_main.rules='telephonystatusajax'
  uci set web.telephonystatusajax='rule'
  uci set web.telephonystatusajax.target='/ajax/telephony-status.lua'
  uci set web.telephonystatusajax.normally_hidden='1'
  uci add_list web.telephonystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.ssidstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling ssid-status.lua
  uci add_list web.ruleset_main.rules='ssidstatusajax'
  uci set web.ssidstatusajax='rule'
  uci set web.ssidstatusajax.target='/ajax/ssid-status.lua'
  uci set web.ssidstatusajax.normally_hidden='1'
  uci add_list web.ssidstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi

SERIAL=$(uci get env.var.serial)
echo 080@$(date +%H:%M:%S): Change config export filename from config.bin to $VARIANT-$SERIAL-$VERSION@YYMMDD.bin
echo 080@$(date +%H:%M:%S): Add reset/upgrade warnings
sed \
  -e "s/=config.bin/=$VARIANT-$SERIAL-$VERSION@\" .. os.date(\"%Y%m%d\") .. \".bin/" \
  -e '/local basic =/i local lose_root_warning = { alert = { class = "alert-info", style = "margin-bottom:5px;" }, }' \
  -e '/T"Reset"/i \    html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Using the <b><i class=\\"icon-bolt\\" style=\\"width:auto;\\">\</i> Reset</b> button will cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script from the command line to factory reset and still retain root access.", lose_root_warning)' \
  -e '/T"Upgrade"/i \          html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Upgrading firmware using this method may cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script with the -f option from the command line to upgrade to the firmware and still retain root access.", lose_root_warning)' \
  -e '/"uci.versioncusto.override.fwversion_override"/a \   unhide_version = "rpc.gui.UnhideVersion",' \
  -e '/"Serial Number"/i \    html[#html + 1] = ui_helper.createLabel(T"tch-gui-unhide Version", content["unhide_version"], basic)' \
  -e '/Global Information/d' \
  -i /www/docroot/modals/gateway-modal.lp

if [ "$UPDATE_BTN" = y ]; then
  echo 080@$(date +%H:%M:%S): Add update available button
  sed \
    -e '/uci.version.version.@version\[0\].timestamp/a\    updatable = "rpc.gui.UpdateAvailable",' \
    -e '/isBridgedMode/i\        if cui.updatable == "1" then' \
    -e "/isBridgedMode/i\          html[#html + 1] = '<a href=\"https://github.com/seud0nym/tch-gui-unhide/releases/latest\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"btn\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<i class=\"icon-info-sign orange\"></i>&nbsp;<small>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Update Available\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</small></a>'" \
    -e '/isBridgedMode/i\        end' \
    -i /www/docroot/gateway.lp
else
  echo 080@$(date +%H:%M:%S): Update available button will NOT be shown in GUI
fi

echo 080@$(date +%H:%M:%S): Add auto-refresh management
sed \
  -e '/<title>/a \<script>\\' \
  -e '/<title>/a \window.intervalIDs=new Array();\\' \
  -e '/<title>/a \function clearRegisteredIntervals(){\\' \
  -e '/<title>/a \  for(let i=0;i<window.intervalIDs.length;i++){\\' \
  -e '/<title>/a \    clearInterval(window.intervalIDs[i]);\\' \
  -e '/<title>/a \  }\\' \
  -e '/<title>/a \}\\' \
  -e '/<title>/a \var modalLoaded=false;\\' \
  -e '/<title>/a \$(document).bind("DOMSubtreeModified",function(){\\' \
  -e '/<title>/a \  if(!modalLoaded){\\' \
  -e '/<title>/a \    if($(".modal").length>0){\\' \
  -e '/<title>/a \      modalLoaded=true;\\' \
  -e '/<title>/a \      clearRegisteredIntervals();\\' \
  -e '/<title>/a \    }\\' \
  -e '/<title>/a \  }\\' \
  -e '/<title>/a \});\\' \
  -e '/<title>/a \</script>\\' \
  -i /www/docroot/gateway.lp

echo 080@$(date +%H:%M:%S): Fix uptime on basic Broadband tab
sed -e 's/days > 1/days > 0/' -i /www/docroot/broadband.lp

echo 085@$(date +%H:%M:%S): Decrease LOW and MEDIUM LED levels
sed -e 's/LOW = "2"/LOW = "1"/' -e 's/MID = "5"/MID = "4"/' -i /www/docroot/modals/gateway-modal.lp

echo 085@$(date +%H:%M:%S): Add Device Capabilities and LTE Band Selection to Mobile Configuration screen
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/local function get_session_info_section/i \local function get_device_capabilities_section(page, html)' \
  -e '/local function get_session_info_section/i \	local section = {}' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.arfcn_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"ARFCN Selection Support" .. ":", page.device.capabilities.arfcn_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.band_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Band Selection Support" .. ":", page.device.capabilities.band_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.manual_plmn_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Manual PLMN Selection" .. ":", page.device.capabilities.manual_plmn_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.strongest_cell_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Strongest Cell Selection" .. ":", page.device.capabilities.strongest_cell_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_modes ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported Modes" .. ":", page.device.capabilities.supported_modes))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_cdma ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported CDMA Bands" .. ":", page.device.capabilities.supported_bands_cdma))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_gsm ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported GSM Bands" .. ":", page.device.capabilities.supported_bands_gsm))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_lte ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported LTE Bands" .. ":", page.device.capabilities.supported_bands_lte))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.max_data_sessions ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Max Data Sessions" .. ":", page.device.capabilities.max_data_sessions))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_reading ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Reading" .. ":", page.device.capabilities.sms_reading))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_sending ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Sending" .. ":", page.device.capabilities.sms_sending))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if utils.Len(section) > 0 then' \
  -e '/local function get_session_info_section/i \		tinsert(html, "<fieldset><legend>" .. T"Device Capabilities" .. "</legend>")' \
  -e '/local function get_session_info_section/i \		tinsert(html, section)' \
  -e '/local function get_session_info_section/i \		tinsert(html, "</fieldset>")' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \end' \
  -e '/local function get_session_info_section/i \\' \
  -e '/local function get_profile_select/i \local function validate_lte_bands(device)' \
  -e '/local function get_profile_select/i \    local choices = setmetatable({}, untaint_mt)' \
  -e '/local function get_profile_select/i \    local b' \
  -e '/local function get_profile_select/i \    for b in string.gmatch(device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/local function get_profile_select/i \      choices[string.untaint(b)] = true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \    return function(value, object, key)' \
  -e '/local function get_profile_select/i \      local uv' \
  -e '/local function get_profile_select/i \      local concatvalue = ""' \
  -e '/local function get_profile_select/i \      if not value then' \
  -e '/local function get_profile_select/i \        return nil, T"Invalid input."' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      if type(value) == "table" then' \
  -e '/local function get_profile_select/i \        uv = value' \
  -e '/local function get_profile_select/i \      else' \
  -e '/local function get_profile_select/i \        uv = { value }' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      for i,v in ipairs(uv) do' \
  -e '/local function get_profile_select/i \        if v ~= "" then' \
  -e '/local function get_profile_select/i \          if concatvalue ~= "" then' \
  -e '/local function get_profile_select/i \            concatvalue = concatvalue.." "' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \          concatvalue = concatvalue..string.untaint(v)' \
  -e '/local function get_profile_select/i \          if not choices[v] then' \
  -e '/local function get_profile_select/i \            return nil, T"Invalid value."' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \        end' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      object[key] = concatvalue' \
  -e '/local function get_profile_select/i \      return true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \end' \
  -e '/local function get_profile_select/i \\' \
  -e '/p.mapParams\["interface_enabled"\]/a \		if utils.radio_tech_map[device.leds.radio] == "LTE" then' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapParams["lte_bands"] = device.uci_path .. "lte_bands"' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapValid["lte_bands"] = validate_lte_bands(device)' \
  -e '/p.mapParams\["interface_enabled"\]/a \		end' \
  -e '/"Access Technology"/a \	 			if utils.radio_tech_map[page.device.leds.radio] == "LTE" then' \
  -e '/"Access Technology"/a \	 				local b, lte_bands, lte_bands_checked = nil, {}, {}' \
  -e '/"Access Technology"/a \	 				for b in string.gmatch(page.device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/"Access Technology"/a \	 					lte_bands[#lte_bands+1] = { string.untaint(b), b }' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				if not page.content["lte_bands"] or page.content["lte_bands"] == "" then' \
  -e '/"Access Technology"/a \	 					for k,v in ipairs(lte_bands) do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[k] = string.untaint(v[1])' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				else' \
  -e '/"Access Technology"/a \	 					for b in string.gmatch(page.content["lte_bands"], "%d+") do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[#lte_bands_checked+1] = string.untaint(b)' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				tinsert(html, ui_helper.createCheckboxGroup(T"LTE Bands", "lte_bands", lte_bands, lte_bands_checked, {checkbox = { class="inline" }}, nil))' \
  -e '/"Access Technology"/a \	 			end' \
  -e '/^\s*get_device_info_section/a get_device_capabilities_section(page, html)' \
  -i /www/docroot/modals/lte-modal.lp

echo 085@$(date +%H:%M:%S): Add new Mobile tabs
sed \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-autofailover.lp", T"Auto-Failover"},' \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-operators.lp", T"Network Operators"},' \
  -i /www/snippets/tabs-mobiled.lp

echo 085@$(date +%H:%M:%S): Configure transformer for missing WanSensing settings
sed \
  -e 's/\("autofailover\)/\1", \1maxwait/' \
  -e '/timeout/ {n; :a; /timeout/! {N; ba;}; s/\("timeout"\)/\1, "fasttimeout"/;}' \
  -i /usr/share/transformer/mappings/uci/wansensing.map
SRV_transformer=$(( $SRV_transformer + 1 ))

if [ -z "$TITLE" ]
then
  echo 090@$(date +%H:%M:%S): Leaving browser tabs title unchanged
else
  echo 090@$(date +%H:%M:%S): Change the title in browser tabs to $TITLE
  for f in /www/docroot/gateway.lp /www/lua/hni_helper.lua /www/snippets/header.lp
  do
      sed -e "s,title>.*</title,title>$TITLE</title," -i $f
  done
  sed -e "s,<title>');  ngx.print( T\"Change password\" ); ngx.print('</title>,<title>$TITLE - Change Password</title>," -i /www/docroot/password.lp
fi

echo 090@$(date +%H:%M:%S): Change Gateway to $VARIANT
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/001_gateway.lp
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/003_internet.lp

sed -e "s/\(Modem\|Gateway\)/$VARIANT/g" -i /www/lua/telstra_helper.lua
sed -e '/local telstra_helper/,/local symbolv1/d' -e 's/symbolv1/"LAN"/' -i /www/cards/005_LAN.lp

echo 095@$(date +%H:%M:%S): Add forceprefix to transformer mapping for network interface
sed \
  -e 's/"reqprefix", "noslaaconly"/"reqprefix", "forceprefix", "noslaaconly"/' \
  -i /usr/share/transformer/mappings/uci/network.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 100@$(date +%H:%M:%S): Fix card visibility check
sed \
  -e '/local access/,/end/d' \
  -e 's/access and/session:hasAccess(card.modal) or/' \
  -i /www/lua/cards.lua

echo 100@$(date +%H:%M:%S): Remove obsolete help links
for m in $(grep -l 'local help_link = ' /www/docroot/modals/*)
do
  sed -e 's/\(local help_link = \)\(.*\)/\1nil/' -i "$m"
done

echo 100@$(date +%H:%M:%S): Update gateway card and status ajax with hardware temperature monitors
elements=""
for m in $(find /sys/devices/i2c-*/ -name temp1_input)
do
  elements="$elements\"$m\","
done
for f in /www/cards/001_gateway.lp /www/docroot/ajax/gateway-status.lua
do
  sed -e "s|\(^local temp1_input = {\)|\1$elements|" -i $f
done

echo 100@$(date +%H:%M:%S): Fix display bug on Mobile card and hide if no devices found
sed \
  -e '/<script>/a var divs = $("#mobiletab .content").children("div");if(divs.length>0){var p=$("#mobiletab .content .subinfos");divs.appendTo(p);}\\' \
  -e '/require("web.lte-utils")/a local result = utils.getContent("rpc.mobiled.DeviceNumberOfEntries")' \
  -e '/require("web.lte-utils")/a local devices = tonumber(result.DeviceNumberOfEntries)' \
  -e '/require("web.lte-utils")/a if devices and devices > 0 then' \
  -e '$ a end' \
  -i $(find /www/cards -type f -name '*lte.lp')

echo 100@$(date +%H:%M:%S): Add DHCPv6 Server status and prefix to LAN card 
sed \
  -e '/local dhcpState$/a local dhcp6State_text = ""' \
  -e '/local dhcpState$/a local dhcp6State' \
  -e '/local dhcpState$/a local slaacState_text = ""' \
  -e '/local dhcpState$/a local slaacState' \
  -e '/local dhcpState$/a local ipv6State_text' \
  -e '/@lan.dhcpv4/a \    ipv6State = "uci.network.interface.@lan.ipv6",' \
  -e '/@lan.dhcpv4/a \    dhcpv6State = "uci.dhcp.dhcp.@lan.dhcpv6",' \
  -e '/@lan.dhcpv4/a \    slaacState = "uci.dhcp.dhcp.@lan.ra",' \
  -e '/@lan.netmask/a \    ipv6prefix = "rpc.network.interface.@wan6.ip6prefix",' \
  -e 's/localdevIP = "uci/localdevIP = "rpc/' \
  -e 's/dhcpState/dhcp4State/g' \
  -e 's/DHCP enabled/DHCPv4 enabled/' \
  -e 's/DHCP disabled/DHCPv4 disabled/' \
  -e '/getExactContent/a \if mapParams["ipv6State"] == "" or mapParams["ipv6State"] == "1" then' \
  -e '/getExactContent/a \  if mapParams["dhcpv6State"] == "" or mapParams["dhcpv6State"] == "server" then' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 enabled"' \
  -e '/getExactContent/a \    dhcp6State = "1"' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \  if mapParams["slaacState"] == "" or mapParams["slaacState"] == "server" then' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA enabled"' \
  -e '/getExactContent/a \    slaacState = "1"' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA disabled"' \
  -e '/getExactContent/a \    slaacState = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    dhcp6State_text = T"IPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \if mapParams["ipv6prefix"] == "" then' \
  -e '/getExactContent/a \    ipv6State_text = T""' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    ipv6State_text = T"Prefix: "' \
  -e '/getExactContent/a \end' \
  -e '/createSimpleLight/a \            ui_helper.createSimpleLight(dhcp6State, dhcp6State_text)' \
  -e '/createSimpleLight/a \        )' \
  -e '/createSimpleLight/a \        if mapParams["ipv6State"] == "1" then' \
  -e '/createSimpleLight/a \            ngx.print(ui_helper.createSimpleLight(slaacState, slaacState_text))' \
  -e '/createSimpleLight/a \        end' \
  -e '/createSimpleLight/a \        ngx.print(' \
  -e 's/and netmask is/<br>Subnet Mask:/' \
  -e "s/IP is/IP:/" \
  -e "/<\/p>/i \            '<br>'," \
  -e "/<\/p>/i \            format(T'%s <nobr><strong style=\"letter-spacing:-1px\">%s</strong></nobr>', ipv6State_text, mapParams[\"ipv6prefix\"])," \
  -e '/^\\$/d' \
  -e "s/<strong>/<strong style=\"letter-spacing:-1px\">/g" \
  -i /www/cards/005_LAN.lp

echo 100@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
  -e '/getExactContent/a \ ' \
  -e '/getExactContent/a local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
  -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\)\(.*\)\( then\)/if not server_addr or \(server_addr\2\)\3/' \
  -e 's/\r//' \
  -i /www/cards/018_relaysetup.lp

echo 100@$(date +%H:%M:%S): Add SAMBA and DLNA server names to the Content Sharing card
sed \
  -e 's/\t/  /g' \
  -e '/Light(content\["dlna/i\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["samba_name"]))' \
  -e '/Light(content\["dlna/a\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["dlna_name"]))' \
  -i /www/cards/012_contentsharing.lp

echo 100@$(date +%H:%M:%S): Only show xDSL Config card if WAN interface is DSL 
sed \
 -e '/uci.xdsl.xdsl.@dsl0.enabled/a \      wan_ifname = "uci.network.interface.@wan.ifname",' \
 -e '/if session:hasAccess/i \local wan_ifname = content["wan_ifname"]' \
 -e 's/if session:hasAccess/if wan_ifname and (wan_ifname == "ptm0" or wan_ifname == "atmwan") and session:hasAccess/' \
 -i /www/cards/093_xdsl.lp

echo 100@$(date +%H:%M:%S): Enable cards in Bridge Mode
# https://www.crc.id.au/hacking-the-technicolor-tg799vac-and-unlocking-features/#mozTocId685948
sed -e '/if info.bridged then/,/end/d' -i /www/lua/cards_limiter.lua

echo 100@$(date +%H:%M:%S): Show individual helper status on NAT Helpers card
sed \
  -e '/local enabled/,/^  end/d' \
  -e '/convertResultToObject/a \  local htmlLeft = {}' \
  -e '/convertResultToObject/a \  local htmlRight = {}' \
  -e '/convertResultToObject/a \  local attributes = {' \
  -e '/convertResultToObject/a \    span = { style = "display:inline-block;font-size:smaller;letter-spacing:-1px;vertical-align:unset;" },' \
  -e '/convertResultToObject/a \  }' \
  -e '/convertResultToObject/a \  for _, v in ipairs(helper_uci_content) do' \
  -e '/convertResultToObject/a \      if v.intf ~= "loopback" then' \
  -e '/convertResultToObject/a \          local state = v.enable' \
  -e '/convertResultToObject/a \          local text' \
  -e '/convertResultToObject/a \          if state ~= "0" then' \
  -e '/convertResultToObject/a \              text =" enabled<br>"' \
  -e '/convertResultToObject/a \              state = "1"' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              text = " disabled<br>"' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \          if #htmlRight >= #htmlLeft then' \
  -e '/convertResultToObject/a \              htmlLeft[#htmlLeft+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              htmlRight[#htmlRight+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \      end' \
  -e '/convertResultToObject/a \  end' \
  -e '/divtable/,/div>/d' \
  -e '/card_bg/a \            <div style="display:flex;flex-direction:row;">\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlLeft);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlRight);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \            </div>\\' \
  -i /www/cards/092_natalghelper.lp

echo 105@$(date +%H:%M:%S): Changing description of router DNS Server from Telstra to $VARIANT 
sed -e "s/Telstra/$VARIANT/" -i /www/docroot/modals/ethernet-modal.lp

if [ -f ipv4-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv4 DNS Servers
  sed -e 's/\r//g' ipv4-DNS-Servers | sort -r | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      sed -e "/127.0.0.1/a \    {\"$ip\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

if [ -f ipv6-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv6 DNS Servers
  sed -e 's/\r//g' ipv6-DNS-Servers | sort | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      ipv6=$(echo $ip  | tr ':' '-')
      sed -e "/2001-4860-4860--8888/i \    {\"$ipv6\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

echo 105@$(date +%H:%M:%S): Added switch to enable/disable DHCPv6 Server and SLAAC
sed \
 -e '/"\.dhcpv4"/a \    dhcpv6State = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".dhcpv6",' \
 -e '/"\.dhcpv4"/a \    slaacState = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".ra",' \
 -e 's/dhcpv4Stateselect/dhcpStateselect/' \
 -e 's/DHCP Server/DHCPv4 Server/' \
 -e 's/\(ui_helper.createSwitch(T"IPv6 state", "localIPv6", content\["localIPv6"\]\)/\1, switch_class_enable/' \
 -e '/local stdattributes/i \              local switch_class_enable = {' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  class = "monitor-changes",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e '/Lease time/a \                 ,[[<div class="monitor-localIPv6 monitor-1 monitor-hidden-localIPv6">]]' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"DHCPv6 Server", "dhcpv6State", content["dhcpv6State"], switchDHCP)' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"SLAAC + RA", "slaacState", content["slaacState"], switchDHCP)' \
 -e '/Lease time/a \                 ,[[</div>]]' \
 -e '/gVIES(/a \    dhcpv6State = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    slaacState = gVIES(dhcpStateselect),' \
 -i /www/docroot/modals/ethernet-modal.lp

 if [ "$VERSION" != "18.1.c.0462" ]
then
  if [ "$(uci get dumaos.tr69.dumaos_enabled)" = '1' ]
  then
    echo 105@$(date +%H:%M:%S): Add DumaOS button
    sed \
      -e "/id=\"basicview\"/i\            html[#html + 1] = '<a href=\"desktop/index.html#com.netdumasoftware.desktop\" class=\"btn\" id=\"dumaos\">'" \
      -e "/id=\"basicview\"/i\            html[#html + 1] = T\"DumaOS\"" \
      -e "/id=\"basicview\"/i\            html[#html + 1] = '</a>'" \
      -e '/<div class="header span12">/a <script>if(window.self !== window.top){$("div.header").hide();}</script>\\' \
      -i /www/docroot/gateway.lp
  else
    echo 105@$(date +%H:%M:%S): DumaOS button NOT added - DumaOS is disabled
  fi
fi

echo 105@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
 -e '/local function getRelayBackUpValues/i local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
 -e '/local function getRelayBackUpValues/i \ ' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\[1\].value\)\( ==.*\)\( then\)/if not server_addr or \(server_addr\[1\].value\2\)\3/' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\[1\].value ~= ""\)\(.*\)\( then\)/if server_addr and server_addr\[1\].value ~= ""\2\3/' \
 -i /www/docroot/modals/relay-modal.lp

echo 106@$(date +%H:%M:%S): Fix setting of firewall forwarding rule when NAT enabled/disabled
for r in dhcp pppoa pppoe static
do
  sed -e '/-- 106-BEGIN/d' -e '/-- 106-END/d' -i /www/snippets/internet-${r}-routed.lp
done

echo 110@$(date +%H:%M:%S): Enable various things that only the guest role\(!!!\) was allowed to do or see
for f in $(ls /www/docroot/modals/gateway-modal.lp /www/docroot/modals/internet-modal.lp /www/docroot/modals/wireless-modal.lp /www/docroot/modals/wanservices-modal.lp /www/snippets/tabs-diagnostics.lp /www/snippets/tabs-voice.lp)
do
  sed -e 's/\(if [^ ]*role[^=]*==[^"]*"\)\(guest\)\("\)/\1admin\3/g' -i $f
done
sed \
  -e 's/if role ~= "admin"/if role == "admin"/' \
  -e 's/if w\["provisioned"\] == "1"/if role == "admin" or w\["provisioned"\] == "1"/' \
  -i /www/docroot/modals/mmpbx-service-modal.lp

echo 115@$(date +%H:%M:%S): Show firewall default incoming policy and rules count on card
sed \
  -e '/^local format/a \local proxy = require("datamodel")' \
  -e '/firewall\.mode/a \    enabledRuleCount = "rpc.gui.firewall.enabledRuleCount",' \
  -e '/firewall\.mode/a \    ipv4PacketFilterCount = "rpc.gui.firewall.ipv4PacketFilterCount",' \
  -e '/firewall\.mode/a \    ipv6PacketFilterCount = "rpc.gui.firewall.ipv6PacketFilterCount",' \
  -e '/firewall\.mode/a \    fwd_ipv4_rules = "uci.firewall.userredirectNumberOfEntries",' \
  -e '/firewall\.mode/a \    fwd_ipv6_rules = "uci.firewall.pinholeruleNumberOfEntries",' \
  -e '/firewall\.mode/a \    lanIpv6Enabled = "uci.network.interface.@lan.ipv6",' \
  -e '/firewall\.mode/a \    pinholeEnabled = "uci.firewall.rulesgroup.@pinholerules.enabled",' \
  -e '/getExactContent/a \local fw_incoming_policy' \
  -e '/getExactContent/a \local zones = content_helper.convertResultToObject("uci.firewall.zone.", proxy.get("uci.firewall.zone."))' \
  -e '/getExactContent/a \for key,zone in ipairs(zones) do' \
  -e '/getExactContent/a \  if zone.wan == "1" then' \
  -e '/getExactContent/a \    fw_incoming_policy = string.untaint(zone.input)' \
  -e '/getExactContent/a \    break' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \local fw_status_light_map = {' \
  -e '/getExactContent/a \  DROP = "1",' \
  -e '/getExactContent/a \  REJECT = "2",' \
  -e '/getExactContent/a \  ACCEPT = "4"' \
  -e '/getExactContent/a \}' \
  -e 's/T"low"/T"Low"/' \
  -e 's/T"normal"/T"Normal"/' \
  -e 's/T"high"/T"High"/' \
  -e 's/T"user"/T"User Defined"/' \
  -e "/subinfos/i \    ');" \
  -e '/subinfos/i \    local fw_status = format("Default Incoming Policy: <strong>%s</strong>", fw_incoming_policy)' \
  -e '/subinfos/i \    ngx.print(ui_helper.createSimpleLight(fw_status_light_map[fw_incoming_policy], fw_status))' \
  -e "/subinfos/i \    ngx.print('\\\\" \
  -e '/Firewall level/a \            local pkt_filter_count = content.ipv4PacketFilterCount + content.ipv6PacketFilterCount' \
  -e '/Firewall level/a \            local pkt_filter_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-iptables-modal.lp\\" data-id=\\"firewall-iptables-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Packet Filter rule</strong> active","<strong %1$s>%2$d Packet Filter rules</strong> active", pkt_filter_count), pkt_filter_modal_link, pkt_filter_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local rules_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-rules-modal.lp\\" data-id=\\"firewall-rules-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Firewall rule</strong> active","<strong %1$s>%2$d Firewall rules</strong> active", content.enabledRuleCount), rules_modal_link, content.enabledRuleCount)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local fwd_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-port-forwarding-modal.lp\\" data-id=\\"firewall-port-forwarding-modal\\""' \
  -e '/Firewall level/a \            local fwd_count = tonumber(content.fwd_ipv4_rules)' \
  -e '/Firewall level/a \            if content.lanIpv6Enabled ~= "0" and content.pinholeEnabled == "1" then' \
  -e '/Firewall level/a \              fwd_count = fwd_count + tonumber(content.fwd_ipv6_rules)' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Port Forwarding rule</strong> defined","<strong %1$s>%2$d Port Forwarding rules</strong> defined", fwd_count), fwd_modal_link, fwd_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local nat_alg_card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/Firewall level/a \            if nat_alg_card_hidden and nat_alg_card_hidden[1] and nat_alg_card_hidden[1].value == "1" then' \
  -e '/Firewall level/a \              local alg_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/nat-alg-helper-modal.lp\\" data-id=\\"nat-alg-helper-modal\\""' \
  -e '/Firewall level/a \              local helper_uci_path = "uci.firewall.helper."' \
  -e '/Firewall level/a \              local helper_uci_content = proxy.get(helper_uci_path)' \
  -e '/Firewall level/a \              helper_uci_content = content_helper.convertResultToObject(helper_uci_path,helper_uci_content)' \
  -e '/Firewall level/a \              local disabled_count = 0' \
  -e '/Firewall level/a \              local enabled_count = 0' \
  -e '/Firewall level/a \              for _,v in ipairs(helper_uci_content) do' \
  -e '/Firewall level/a \                if v.intf ~= "loopback" then' \
  -e '/Firewall level/a \                  if v.enable ~= "0" then' \
  -e '/Firewall level/a \                    enabled_count = enabled_count + 1' \
  -e '/Firewall level/a \                   else' \
  -e '/Firewall level/a \                    disabled_count = disabled_count + 1' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              if enabled_count > 0 then' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> enabled","<strong %1$s>%2$d NAT Helpers</strong> enabled", enabled_count), alg_modal_link, enabled_count)' \
  -e '/Firewall level/a \              else' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> disabled","<strong %1$s>%2$d NAT Helpers</strong> disabled", disabled_count), alg_modal_link, disabled_count)' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            end' \
  -e '/numrules/,/numrules_v6/d' \
  -e '/if content.mode/,/end/d' \
  -i /www/cards/008_firewall.lp

echo 115@$(date +%H:%M:%S): Fix NAT ALG modal errors and include in Firewall tabs if card hidden
sed \
  -e '/^local ui_helper/i \local proxy = require("datamodel")' \
  -e 's/T"Enable"/T"Enabled"/' \
  -e 's/, readonly="true"/ /' \
  -e 's/unique/readonly/' \
  -e 's/string.upper/string.lower/' \
  -e '/attr = { input = { class="span1"/i \    readonly = true,' \
  -e '/^local hlp_attributes/i \table.insert(hlp_columns, table.remove(hlp_columns, 1))' \
  -e '/return true/i \  if object["enable"] == "" then' \
  -e '/return true/i \    object["enable"] = "1"' \
  -e '/return true/i \  end' \
  -e '/return true/i \  object["helper"] = string.lower(object["helper"])' \
  -e '/--Look for the enable set to nothing/,/^end/d' \
  -e '/^local UI_helper/i \local proxy = require("datamodel")' \
  -e "/modal-body/a \  ');" \
  -e '/modal-body/a \  local card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/modal-body/a \  if card_hidden and card_hidden[1] and card_hidden[1].value == "1" then' \
  -e '/modal-body/a \    local lp = require("web.lp")' \
  -e '/modal-body/a \    lp.setpath("/www/snippets/")' \
  -e '/modal-body/a \    lp.include("tabs-firewall.lp")' \
  -e '/modal-body/a \  end' \
  -e "/modal-body/a \  ngx.print('\\\\" \
  -e "/createTable/i \        ngx.print('<legend>');  ngx.print( T'NAT Helpers (ALG\\\\'s)' ); ngx.print('</legend>');" \
  -e "s/\"NAT Helpers (ALG's)\"/\"Firewall\"/" \
  -e 's/Dest Port/Destination Port/' \
  -i /www/docroot/modals/nat-alg-helper-modal.lp

echo 115@$(date +%H:%M:%S): Remove Port Forwarding from WAN Services - Moved to Firewall tab
sed \
  -e '/-- In UCI/,/local pfw_data,/d' \
  -e '/local ipv6Data/,/local pfw_v6_data,/d' \
  -e "/Port forwarding table/,/ngx.print('/d" \
  -e '/if ipv6Data.lanIpv6Enabled/,/end$/d' \
  -e '/local function getConfPath/,/local uri = ngx.var.uri/d' \
  -e 's/\(local help_link =\).*/\1 nil/' \
  -e '/if #alg_sip_paths/,/ end /d' \
  -e '/if zonenum ~= "" /,/ end /d' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 115@$(date +%H:%M:%S): Improving WAN Services card
sed \
  -e 's/class = "span4",//' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  upnp_status = "uci.upnpd.config.enable_upnp",' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  dnsrule_count = "uci.dhcp.dnsruleNumberOfEntries",' \
  -e '/local n_upnp_rules/a \    local n_dns_rules = tonumber(wan_services_data["dnsrule_count"])' \
  -e '/local n_upnp_rules/a \    local upnpstate' \
  -e '/local n_upnp_rules/a \    if wan_services_data["upnp_status"] == "1" then' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP enabled"' \
  -e '/local n_upnp_rules/a \    else' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP disabled"' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/local n_upnp_rules/a \    local wol = io.open("/lib/functions/firewall-wol.sh", "r") and proxy.get("uci.wol.config.")' \
  -e '/local n_upnp_rules/a \    local wolstate = ""' \
  -e '/local n_upnp_rules/a \    if wol then' \
  -e '/local n_upnp_rules/a \      wolenabled = proxy.get("uci.wol.config.enabled")' \
  -e '/local n_upnp_rules/a \      if wolenabled then' \
  -e '/local n_upnp_rules/a \        if wolenabled[1].value == "1" then' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("1", "WoL over Internet enabled")' \
  -e '/local n_upnp_rules/a \        else' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("0", "WoL over Internet disabled")' \
  -e '/local n_upnp_rules/a \        end' \
  -e '/local n_upnp_rules/a \      end' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/<p>/a \            wolstate,' \
  -e '/<p>/a \            ui_helper.createSimpleLight(ddns_light_map[format("%s", wan_services_data["upnp_status"])] or "0", upnpstate),' \
  -e '/firewall_rules/d' \
  -e '/port forwarding<\/strong> rule /,/subinfos/d' \
  -e "/modal\"', n_upnp_rules/a            '<br>'," \
  -e "/modal\"', n_upnp_rules/a            format( N(\"<strong %s>%d DNS rule</strong> defined\"," \
  -e "/modal\"', n_upnp_rules/a                      \"<strong %s>%d DNS rules</strong> defined\", n_dns_rules)," \
  -e "/modal\"', n_upnp_rules/a                      'class=\"modal-link\" data-toggle=\"modal\" data-remote=\"modals/wanservices-modal.lp\" data-id=\"wanservices-modal\"', n_dns_rules)," \
  -e 's|<p></p>||' \
  -e 's|upnp</strong> rule |UPnP rule</strong> |' \
  -e 's|upnp</strong> rules|UPnP rules</strong>|' \
  -i /www/cards/007_wanservices.lp

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule.
sed \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule_v6.
sed \
  -e '/src = {/i \      name = {' \
  -e '/src = {/i \        access = "readWrite",' \
  -e '/src = {/i \        type = "string",' \
  -e '/src = {/i \      },' \
  -e '/src =  function(mapping, paramname, k/i \    name =  function(mapping, paramname, key)' \
  -e '/src =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/src =  function(mapping, paramname, k/i \    end,' \
  -e '/src =  function(mapping, paramname, p/i \    name =  function(mapping, paramname, paramvalue, key)' \
  -e '/src =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/src =  function(mapping, paramname, p/i \    end,' \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule_v6.map
SRV_transformer=$(( $SRV_transformer + 1 ))

SRV_firewall=0
# Version 2021.02.22 set an incorrect value for synflood_rate, so have to fix it
synflood_rate="$(uci -q get firewall.@defaults[0].synflood_rate)" 
if [ ! -z "$synflood_rate" ]; then
  echo $synflood_rate | grep -q -E '^[0-9]+/s$'
  if [ $? = 1 ]; then
    synflood_rate="$(echo $synflood_rate | grep -o -E '^[0-9]+')" 
    uci set firewall.@defaults[0].synflood_rate="$synflood_rate/s"
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
fi
# Version 2021.02.22 allowed setting of tcp_syncookies but it is not enabled in kernel, so have to remove it
if [ ! -z "$(uci -q get firewall.@defaults[0].tcp_syncookies)" ]; then
  uci -q delete firewall.@defaults[0].tcp_syncookies
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ $SRV_firewall -gt 0 ]; then
  uci commit firewall
  /etc/init.d/firewall reload 2> /dev/null
fi

echo 120@$(date +%H:%M:%S): Show the hidden Telephony tabs and fix default tab
sed \
  -e 's/\(--\)\( *{"mmpbx-service-modal.lp\)/  \2/' \
  -e '/mmpbx-contacts/d' \
  -e '/T"Service"/i \    {"mmpbx-inoutgoingmap-modal.lp", T"In\/Outgoing Map"},' \
  -e '/T"Service"/a \    {"mmpbx-codec-modal.lp", T"Codecs"},' \
  -e '/T"Service"/a \    {"mmpbx-dial-plan-modal.lp", T"Dial Plans"},' \
  -e '/T"DECT"/a    \    {"mmpbx-contacts-modal.lp", T"Phone Book"},' \
  -i /www/snippets/tabs-voice.lp
# Default telephony tab is DECT!!! 
if [ "$VERSION" != "18.1.c.0462" ]
then
  sed \
    -e 's/if emission_state == "1"/if mmpbx_state == "1"/' \
    -e 's/modalPath = "\/modals\/mmpbx-dect-modal.lp"/modalPath = "\/modals\/mmpbx-info-modal.lp"/' \
    -i /www/cards/008_telephony.lp
else
  sed \
    -e 's/if mmpbx_state == "1" and (emission_state == "1" or emission_state == "0")/if mmpbx_state == "0"/' \
    -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/,/elseif session:hasAccess("\/modals\/mmpbx-global-modal.lp") then/d' \
    -i /www/cards/008_telephony.lp
fi

echo 125@$(date +%H:%M:%S): Display Telephony tabs even when mmpbx disabled
sed \
 -e '/if mmpbx_state == "1" then/d' \
 -e '/elseif session:hasAccess/,/end/d' \
 -i /www/snippets/tabs-voice.lp

if [ $SIP_PWDS = y ]; then
  echo 125@$(date +%H:%M:%S): Always display decrypted SIP passwords
  sed \
  -e '/local mask_password/d' \
  -e '/if password == mask_password then/,/end/d' \
  -e '/v\[scns\["password"\]\] = mask_password/d' \
  -e '/ipairs(v)/a if sip_columns[j].name == "password" then' \
  -e '/ipairs(v)/a   w = proxy.get("rpc.gui.pwd.@" .. v[scns["profile"]] .. ".password")[1].value' \
  -e '/ipairs(v)/a   sip_columns[j].type = "text"' \
  -e '/ipairs(v)/a end' \
  -i /www/docroot/modals/mmpbx-profile-modal.lp
fi

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  echo 125@$(date +%H:%M:%S): Remove non-existing FXS2 device CODEC config
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 125@$(date +%H:%M:%S): Add missing insert option on dial plan entries
sed \
  -e 's/registerMultiMap/registerNamedMultiMap/' \
  -e 's/modify", "remove/modify", "insert", "remove/' \
  -i /usr/share/transformer/mappings/uci/mmpbx.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 130@$(date +%H:%M:%S): Add missing icons on Diagnostics card and change default tab to Traffic Monitor
sed \
 -e 's^"Diagnostics", "modals/diagnostics-xdsl-modal.lp"^"Diagnostics", "modals/diagnostics-traffic-modal.lp"^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-xdsl\)^<td><div data-toggle="modal" data-remote="modals/diagnostics-traffic-modal.lp" data-id="diagnostics-traffic-modal"><img href="#" rel="tooltip" data-original-title="TRAFFIC" src="/img/light/Profit-01-WF.png" alt="traffic"></div></td>\\\n\1^' \
 -e 's^\(alt="ping/trace"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/logviewer-modal.lp" data-id="logviewer-modal"><img href="#" rel="tooltip" data-original-title="LOGVIEWER" src="/img/light/log-viewer.png" alt="logviewer"></div></td>\2^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-connection\)^<td><div data-toggle="modal" data-remote="modals/log-connections-modal.lp" data-id="log-connections-modal"><img href="#" rel="tooltip" data-original-title="CONNECTIONS" src="/img/light/Data-Sync-WF.png" alt="connections"></div></td>\\\n\1^' \
 -e 's^\(alt="network"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/diagnostics-tcpdump-modal.lp" data-id="diagnostics-tcpdump-modal"><img href="#" rel="tooltip" data-original-title="TCPDUMP" src="/img/light/tcp-dump.png" alt="tcpdump"></div></td>\2^' \
 -e 's|\(alt="\)\([^/"]*\)|class="diag-\2" \1\2|g' \
 -i /www/cards/009_diagnostics.lp

echo 130@$(date +%H:%M:%S): Rename Diagnostics tabs and add Connections and Traffic Monitor tabs
sed \
 -e 's/"Connection"/"Connection Check"/' \
 -e 's/Log viewer/Log Viewer/' \
 -e 's/"Network"/"Ports"/' \
 -e 's/Tcpdump/TCP Dump/' \
 -e '/xdsl-modal/i       \    {"diagnostics-traffic-modal.lp", T"Traffic Monitor"},'  \
 -e '/connection-modal/a \    {"log-connections-modal.lp", T"Network Connections"},'  \
 -e '/string.len(ngx.var.args)/,/^end/d' \
 -e '/airiq/,/^[ ]*$/d' \
 -i /www/snippets/tabs-diagnostics.lp
sed \
 -e 's/tabs-management/tabs-diagnostics/' \
 -e 's/"Management"/"Diagnostics"/' \
 -i /www/docroot/modals/log-connections-modal.lp

echo 130@$(date +%H:%M:%S): Fix headings on Diagnostics tabs
for m in $(grep -L 'createHeader(T"Diagnostics"' /www/docroot/modals/diagnostics-*)
do 
    sed -e 's/\(createHeader(\)\([T]*\)\("Diagnostics\)\([^"]*\)\("\)/\1T\3\5/' -i $m
done

echo 135@$(date +%H:%M:%S): Add missing DHCP Relay configuration
sed \
 -e '/local format/a \local exists = proxy.get("uci.dhcp.relay.@relay.server_addr")' \
 -e '/local format/a \if not exists then' \
 -e '/local format/a \  proxy.add("uci.dhcp.relay.","relay")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.server_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.local_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.interface","")' \
 -e '/local format/a \  proxy.apply();' \
 -e '/local format/a \end' \
 -i /www/docroot/modals/relay-modal.lp


echo 140@$(date +%H:%M:%S): Sort the device map hosts by name
sed \
 -e 's/loadTableData("rpc.hosts.host.", dcols)/loadTableData("rpc.hosts.host.", dcols, nil, "FriendlyName")/' \
 -i /www/snippets/networkmap.lp

echo 145@$(date +%H:%M:%S): Allow increase in WiFi output power to +6dBm
sed \
 -e '/{"-6", T"25%"}/a \    {"-5", T"&nbsp;-5 dBm"},' \
 -e '/{"-6", T"25%"}/a \    {"-4", T"&nbsp;-4 dBm"},' \
 -e '/{"-2", T"75%"}/a \    {"-1", T"&nbsp;-1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+1", T"&nbsp;+1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+2", T"&nbsp;+2 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+3", T"&nbsp;+3 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+4", T"&nbsp;+4 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+5", T"&nbsp;+5 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+6", T"&nbsp;+6 dBm"},' \
 -e 's/-6", T"25%/-6", T"\&nbsp;-6 dBm/' \
 -e 's/-3", T"50%/-3", T"\&nbsp;-3 dBm/' \
 -e 's/-2", T"75%/-2", T"\&nbsp;-2 dBm/' \
 -e 's/0", T"100%/0", T"\&nbsp;0 dBm/' \
 -e 's/T"Output Power"/T"Output Power Adjustment"/' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Add cogs to card headers
for f in $(grep -l createCardHeaderNoIcon /www/cards/*)
do
  sed -e 's/createCardHeaderNoIcon/createCardHeader/' -i $f
done
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/switchName, content\["cwmp_state"\], {input = {id = "cwmp_card_state"}}/nil, nil, nil/' -i /www/cards/090_cwmpconf.lp

echo 150@$(date +%H:%M:%S): Fix mobile signal placement
sed \
 -e '/^<\/script>/i var div = document.querySelector("#mobiletab").querySelector(".header-title");\\' \
 -e '/^<\/script>/i var signal = document.querySelector("#signal-strength-indicator-small");\\' \
 -e '/^<\/script>/i div.parentNode.insertBefore(signal, div.nextSibling);\\' \
 -i $(find /www/cards -type f -name '*lte.lp')
sed \
 -e '$ a #signal-strength-indicator-small .absolute{float:right;margin-top:unset;margin-left:unset;height:unset;padding-left:10px;width:unset;position:relative;}' \
 -i /www/docroot/css/mobiled.css

echo 150@$(date +%H:%M:%S): Handle Wi-Fi switch
sed \
 -e '/Take the input/i \if ngx.var.request_method == "POST" then' \
 -e '/Take the input/i \  local radio_state = ngx.req.get_post_args().set_wifi_radio_state' \
 -e '/Take the input/i \  if radio_state then' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_2G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_5G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.apply()' \
 -e '/Take the input/i \     ngx.exit(ngx.HTTP_NO_CONTENT)' \
 -e '/Take the input/i \  end' \
 -e '/Take the input/i \end' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Handle Telephony switch
 sed \
  -e '/local sipnet_options/i \if ngx.var.request_method == "POST" then' \
  -e '/local sipnet_options/i \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/local sipnet_options/i \  if mmpbx_enable then' \
  -e '/local sipnet_options/i \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/local sipnet_options/i \    proxy.apply()' \
  -e '/local sipnet_options/i \    ngx.sleep(20)' \
  -e '/local sipnet_options/i \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/local sipnet_options/i \  end' \
  -e '/local sipnet_options/i \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 155@$(date +%H:%M:%S): Make Content Sharing Screen nicer
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/<form class/<form id="content-sharing-modal" class/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/T"General status"/d' \
  -e '/"File Server Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"File Server Status" .. "<\/legend>")' \
  -e '/"File Server descript/a\                tinsert(html, "<\/fieldset>")' \
  -e '/DLNA Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"DLNA Server Status" .. "<\/legend>")' \
  -i /www/docroot/modals/contentsharing-modal.lp

else # THEME_ONLY = y
  echo 160@$(date +%H:%M:%S): Restoring CSS files to apply theme change
  cp -p /rom/www/docroot/css/gw.css /rom/www/docroot/css/gw-telstra.css /rom/www/docroot/css/responsive.css /www/docroot/css/
fi # End of if [ THEME_ONLY = n ]   

echo 160@$(date +%H:%M:%S): Adding or updating card background icons
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf012;"/' -i $(ls /www/cards/*_lte.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf129;"/' -i $(ls /www/cards/*_gateway.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0c1;"/' -i $(ls /www/cards/*_broadband.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0ac;"/' -i $(ls /www/cards/*_internet.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf09e;"/' -i $(ls /www/cards/*_wireless.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf015;"/' -i $(ls /www/cards/*_LAN.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf109;"/' -i $(ls /www/cards/*_Devices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c2;"/' -i $(ls /www/cards/*_wanservices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf132;"/' -i $(ls /www/cards/*_firewall.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf095;"/' -i $(ls /www/cards/*_telephony.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf188;"/' -i $(ls /www/cards/*_diagnostics.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c0;"/' -i $(ls /www/cards/*_usermgr.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf115;"/' -i $(ls /www/cards/*_contentsharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf02f;"/' -i $(ls /www/cards/*_printersharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf023;"/' -i $(ls /www/cards/*_parental.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf074;"/' -i $(ls /www/cards/*_iproutes.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf017;"/' -i $(ls /www/cards/*_tod.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf079;"/' -i $(ls /www/cards/*_relaysetup.lp)
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf019;"/' -i $(ls /www/cards/*_cwmpconf.lp)
sed -e 's/xf0ad/xf0ec;"/' -i $(ls /www/cards/*_natalghelper.lp)
sed -e 's/xf0ad/xf0b1;"/' -i $(ls /www/cards/*_xdsl.lp)
[ -f /www/cards/*_nfc.lp ] && sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0b2;"/' -i $(ls /www/cards/*_nfc.lp)
[ -f /www/cards/*_fon.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf143;"/' -i $(ls /www/cards/*_fon.lp)

sed \
  -e 's/:56px/:80px/' \
  -e 's/:170px/:150px/' \
  -i /www/docroot/css/responsive.css

for f in $(grep -l -r '</head>\\' /www 2>/dev/null | grep -v '\(airiq\|help\|landingpage\)')
do
  grep -q 'lp.include("../snippets/theme' $f
  if [ $? -eq 1 ]; then
    grep -q "/css/gw.css" $f
    if [ $? -eq 0 ]; then
      LP="advanced"
    else
      LP="basic"
    fi
    req=$(grep -n 'local lp = require("web.lp")' $f | cut -d: -f1)
    if [ -z "$req" ]; then
      sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
    else
      head=$(grep -n '</head>\\' $f | cut -d: -f1)
      if [ $head -lt $req ]; then
        sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -e "${req}d" -i $f
      else
        sed -e "/<\/head>\\\/i '); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
      fi
    fi
  fi
done

echo 165@$(date +%H:%M:%S): Deploy theme files
echo  | base64 -d | tar -xzf - -C /

# Fix directory permissions after tar extracts
chmod +x /www /www/docroot /www/docroot/css /www/docroot/css/telstra /www/docroot/css/light /www/docroot/css/night /www/docroot/img /www/docroot/img/telstra /www/docroot/img/light /www/docroot/img/night /www/snippets

echo 165@$(date +%H:%M:%S): Persisting theme settings
echo -n "THEME=$THEME COLOR=$COLOR ICONS=$ICONS KEEPLP=$KEEPLP" > /etc/tch-gui-unhide.theme

sed \
  -e '$ a .card_bg:after{font-size:110px;bottom:-5px;z-index:-20;}' \
  -i /www/docroot/css/gw.css
if [ -f /www/docroot/landingpage.lp -a "$KEEPLP" = "n" ]
then
  echo 166@$(date +%H:%M:%S): Theming and de-branding landing page
  sed \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color:#f8f8f8;}" \
    -e "$ a body.landingpage #login_part_mobile>div:nth-child(2){display:none;}" \
    -e "$ a body.landingpage #icon_down{display:none !important;}" \
    -e "$ a body.landingpage #detailed_info_mobile{display:block !important;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(1){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(2){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(3)>table>tbody>tr>td{padding:0px 5px;width:50%;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(4){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(6){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(7){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(8){display:none;}" \
    -e "$ a body.landingpage #footer_picture_mobile{display:none !important;}" \
    -i /www/docroot/css/gw-telstra.css
  sed \
    -e 's/.hidden-desktop{display:none/.hidden-desktop{display:inherit/' \
    -e 's/.visible-desktop{display:inherit/.visible-desktop{display:none/' \
    -i /www/docroot/css/responsive.css
  sed \
    -e "s,<title>');  ngx.print( T\"Login\" ); ngx.print('</title>,<title>$TITLE Login</title>," \
    -e 's,<img src="/img/TELSTRA_LOGO.png" style="width:57px;height:65px;">,<img class="lp-logo" style="width:240px;margin-bottom:60px;">,' \
    -e 's/Firmware Number/Firmware Version/' \
    -e 's/Modem Make Model/Model/' \
    -e 's/height:60%;min-height:400px;/height:30%;min-height:350px;width:100%;/' \
    -e 's/"-webkit-border-radius: 20px;-moz-border-radius: 20px;border-radius: 20px;width:50%;"/"display:block;margin-bottom:2px;width:220px;"/' \
    -e 's/"erroruserpass alert alert-error hide"/"erroruserpass alert alert-error hide" style="width:212px;margin:auto;padding:10px;"/' \
    -e 's/buttonborder linear-mobile" style="width:50%/linear-mobile" style="width:65px/' \
    -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-basic.lp\"); ngx.print('\\\\" \
    -e '/uci.versioncusto.override.fwversion_override/a \  unhide_version = "rpc.gui.UnhideVersion",' \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         </tr>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <tr>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <td style=\"text-align:right;font-weight: 900;color:#808080;\">tch-gui-unhide</td>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <td style=\"text-align:left;color:#808080;\">');  ngx.print( cui[\"unhide_version\"] ); ngx.print('</td>\\\\" \
    /rom/www/docroot/landingpage.lp>/www/docroot/landingpage.lp
  # Have to restart if changing landing page
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi
if [ -f /www/snippets/tabs-home.lp ]
then
  sed -e '/^else/,/T"Boost Your Wi-Fi"/d' -i /www/snippets/tabs-home.lp
fi
for f in /www/docroot/modals/assistance-modal.lp /www/docroot/modals/usermgr-modal.lp
do
  sed \
    -e '/^if not bridged.isBridgedMode/i \  local lp = require("web.lp")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.setpath("/www/snippets/")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.include("tabs-management.lp")' \
    -e '/^if not bridged.isBridgedMode/,/^end/d' \
    -i $f
done

SRV_transformer=$(( $SRV_transformer + 2 ))

echo 175@$(date +%H:%M:%S): Fix Time of Day tabs
sed \
  -e 's/T"Time of day access control"/T"Device Access Control"/' \
  -e "/update\">\\\/a ');" \
  -e '/update">\\/a local lp = require("web.lp")' \
  -e '/update">\\/a lp.setpath("/www/snippets/")' \
  -e '/update">\\/a lp.include("tabs-tod.lp")' \
  -e "/update\">\\\/a ngx.print('\\\\" \
  -i /www/docroot/modals/tod-modal.lp

echo 175@$(date +%H:%M:%S): Restart Time of Day processing after updates applied 
sed -e 's|reload$|reload; /etc/init.d/tod restart;|' -i /usr/share/transformer/commitapply/uci_tod.ca
SRV_transformer=$(( $SRV_transformer + 1 ))

# Initial invocation of transformer code will fail if history directory does not exist
if [ ! -d /root/trafficmon/history ]; then
  echo 180@$(date +%H:%M:%S): Create directory to retain traffic monitor daily history
  mkdir -p /root/trafficmon/history
fi
if [ ! -f /root/trafficmon/history/.wan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wan_rollover
fi
if [ ! -f /root/trafficmon/history/.wwan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WWAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wwan_rollover
fi

grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
if [ $? -eq 1 ]; then
  echo 180@$(date +%H:%M:%S): Create cron job to retain traffic monitor daily history
  echo "9,19,29,39,49,59 * * * * /usr/sbin/traffichistory.lua" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

if [ $THEME_ONLY = n ]; then
  # Run any extra feature scripts
  for s in $(ls tch-gui-unhide-xtra.* 2>/dev/null)
  do
    echo -n 190@$(date +%H:%M:%S): Executing extra feature script for $(echo $s | cut -d. -f2-):
    . $s
  done
fi

echo 195@$(date +%H:%M:%S): Sequencing cards
for RULE in $(uci show web | grep '=card' | cut -d= -f1)
do
  CARD=$(uci -q get ${RULE}.card)
  FILE=$(ls /www/cards/ | grep "..._${CARD#*_}")
  if [ "$CARD" != "$FILE" ]
  then
    echo "195@$(date +%H:%M:%S):  - Renaming $FILE to $CARD"
    mv /www/cards/$FILE /www/cards/$CARD
  fi
done

if [ -z "$ALLCARDRULES" -a -f tch-gui-unhide-cards ]
then
  ./tch-gui-unhide-cards -s -a -q
fi

if [ $THEME_ONLY = n ]; then
  for l in $(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)
  do
    echo 200@$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in $l
    sed -e "s/\(current_year); ngx.print('\)/\1 \[tch-gui-unhide 2021.03.17 for FW Version 18.1.c.0585\]/" -i $l
  done
fi

echo 200@$(date +%H:%M:%S): Applying service changes if required...
apply_service_changes

chmod 644 /usr/share/transformer/mappings/rpc/gui.*
echo "************************************************************"
echo "* Done!! You should clear your browser cache of images and *"
echo "* files, otherwise you won't see the theme changes.        *"
echo "************************************************************"
echo
echo "++ TIP #1: Bookmark http://$(uci get network.lan.ipaddr)/gateway.lp"
echo "++         to bypass the Telstra Basic web GUI..."
echo
echo "++ TIP #2: Use the tch-gui-unhide-cards script to"
echo "++         change card order and visibility"
echo
if [ "$UPDATE_BTN" = n ]; then
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "++ WARNING! The Update Available notification is DISABLED! +"
  echo "++          You must check for updates manually.           +"
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo
fi
