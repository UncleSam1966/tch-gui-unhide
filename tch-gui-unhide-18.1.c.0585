#!/bin/sh
echo 000@$(date +%H:%M:%S): Built for firmware version 18.1.c.0585 - Release 2021.04.01
RELEASE='2021.04.01@16:27'
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on various pages https://hack-technicolor.readthedocs.io/en/stable/

TARGET_VERSION=""
for x in $(basename $0 | tr '-' "$IFS")
do 
  TARGET_VERSION=$x
done
echo "$TARGET_VERSION" | grep -q '\.'
if [ $? -eq 1 ]
then
  echo "ERROR: Unable to determine Target Version!"
  echo "       Did the script get renamed??"
  echo "       Aborting..."
  exit 1
fi
SCRIPT=$(basename $0 | sed "s/-$TARGET_VERSION//")

DFLT_USR=$(uci -q get web.uidefault.defaultuser)
FW_UPGRD=$(uci -q get web.uidefault.upgradefw)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC=$(uci -q get env.var.ssid_mac_postfix_r0)
HOSTNAME=$(uci -q get system.@system[0].hostname)
case "$(grep 'title>.*</title' /www/docroot/gateway.lp | cut -d'>' -f2 | cut -d'<' -f1)" in
  $VARIANT) TITLE="$VARIANT";;
  $HOSTNAME) TITLE="$HOSTNAME";;
  $VARIANT-$MAC) TITLE="$VARIANT-$MAC";;
  *) TITLE="";;
esac

if [ -f /usr/tch-gui-unhide.theme ]; then
  mv /usr/tch-gui-unhide.theme /etc/tch-gui-unhide.theme
fi
if [ -f /etc/tch-gui-unhide.theme ]; then
  . /etc/tch-gui-unhide.theme
fi
if [ -z "$THEME" ]; then
  KEEPLP=n
  grep -q 'body{background-color:#353c42;' /www/docroot/css/gw.css
  if [ $? -eq 0 ]; then
    THEME=night
  else
    grep -q 'body{background-color:#fff;' /www/docroot/css/gw.css
    if [ $? -eq 0 ]; then
      THEME=light
    else
      THEME=telstra
      grep -q 'body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color' /www/docroot/css/gw-telstra.css
      if [ $? -eq 1 -a -f /www/snippets/tabs-home.lp ]; then
        grep -q 'T"Boost Your Wi-Fi"' /www/snippets/tabs-home.lp
        if [ $? -eq 1 ]; then
          KEEPLP=y
        else
          KEEPLP=n
        fi
      fi
    fi
  fi
  case "$(grep '.smallcard .header{background-color:#......;}' /www/docroot/css/gw.css  | cut -d# -f2 | cut -d\; -f1)" in
    "005c32") COLOR=green;;
    "662e91") COLOR=purple;;
    "f36523") COLOR=orange;;
    "008fd5") COLOR=blue;;
    "272c30") COLOR=monochrome;;
    *) if [ $THEME = light ]; then COLOR=monochrome; else COLOR=blue; fi;;
  esac
  ICONS="$(grep '.card_bg:after{visibility:' /www/docroot/css/gw.css | cut -d: -f3 | cut -d\; -f1)"
fi

grep -q 'rpc.gui.pwd.@' /www/docroot/modals/mmpbx-profile-modal.lp
if [ $? -eq 0 ]; then
  SIP_PWDS=y
else
  SIP_PWDS=n
fi

INSTALLED_RELEASE="$(grep -o -m 1 -E '[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]@[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' /usr/share/transformer/mappings/rpc/gui.map 2>/dev/null)"

grep -q 'rpc.gui.UpdateAvailable' /www/docroot/gateway.lp
if [ $? -eq 0 ]; then
  UPDATE_BTN=y
else
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp
  if [ $? -eq 0 ]; then
    UPDATE_BTN=n
  else
    UPDATE_BTN=y
  fi
fi

FIX_DFLT_USR=n
FIX_FW_UPGRD=n
if [ "$(uci -q get dropbear.lan.enable)" = "1" -a "$(uci -q get dropbear.lan.PasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootLogin)" = "1" ]; then
  FIX_SSH=n
else
  FIX_SSH=y
fi
if [ "$(uci -q get system.config.export_plaintext)" = "1" -a "$(uci -q get system.config.export_unsigned)" = "1" -a "$(uci -q get system.config.import_plaintext)" = "1" -a "$(uci -q get system.config.import_unsigned)" = "1" ]; then
  FIX_CFG_PORT=n
else
  FIX_CFG_PORT=y
fi
echo "$(uci -q get web.parentalblock.roles)" | grep -q "admin"
if [ $? -eq 0 ]; then
  FIX_PARENT_BLK=n
else
  FIX_PARENT_BLK=y
fi

# Keep count of changes so we know whether to restart services
SRV_cron=0
SRV_dropbear=0
SRV_nginx=0
SRV_power=0
SRV_system=0
SRV_transformer=0

check_pwr_setting() {
  section="$1"
  option="$2"
  text="$3"
  if [ -z "$(uci -q get power.$section.$option)" ]; then
    pwrctl show | grep "$text" | grep -q DISABLED
    uci set power.$section.$option="$?"
    SRV_power=$(( $SRV_power + 1 ))
  fi
}

apply_service_changes() {
  if [ $SRV_transformer -gt 0 ]; then
    # Need to stop watchdog whilst we restart transformer, because if it does not find /var/run/transformer.pid, it will reboot the system!
    /etc/init.d/watchdog-tch stop
    /etc/init.d/transformer restart
    /etc/init.d/watchdog-tch start
  fi
  [ $SRV_cron -gt 0 ] && /etc/init.d/cron restart
  [ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear restart
  [ $SRV_system -gt 0 ] && /etc/init.d/system reload
  [ $SRV_nginx -gt 0 ] && /etc/init.d/nginx restart

  if [ -z "$(uci -q get power.cpu)" ];then
    uci set power.cpu='cpu'
  fi

  if [ -z "$(uci -q get power.cpu.cpuspeed)" ]; then
    case "$(pwrctl show | grep "CPU Speed Divisor" | tr -s " " | cut -d" " -f4)" in
      1) uci set power.cpu.cpuspeed="1";;
      2) uci set power.cpu.cpuspeed="2";;
      4) uci set power.cpu.cpuspeed="4";;
      5) uci set power.cpu.cpuspeed="8";;
      *) uci set power.cpu.cpuspeed="256";;
    esac
    SRV_power=$(( $SRV_power + 1 ))
  fi
  check_pwr_setting "cpu" "wait" "CPU Wait"
  check_pwr_setting "ethernet" "ethapd" "Auto Power"
  check_pwr_setting "ethernet" "eee" "Energy Efficient Ethernet"
  check_pwr_setting "ethernet" "autogreeen" "AutoGreeen"
  check_pwr_setting "ethernet" "dgm" "Deep Green Mode"
  [ $SRV_power -gt 0 ] && uci commit power
}

RESTORE=n
WRAPPER=n
YES=n
THEME_ONLY='n'

FILENAME=$(basename $0)

while getopts :c:d:f:h:i:l:p:rt:uv:yTVW option
do
 case "${option}" in
   c) case "$(echo ${OPTARG} | tr "BGMOPR" "bgmopr" | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;; 
        g) COLOR=green;; 
        o) COLOR=orange;; 
        p) COLOR=purple;; 
        r) COLOR=red;; 
        *) COLOR=monochrome;;
      esac;;
   d) case "${OPTARG}" in y|Y) FIX_DFLT_USR=y; DFLT_USR='admin';; n|N) FIX_DFLT_USR=y; DFLT_USR='';;  *) echo 'WARNING: -d valid options are y or n';; esac;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPGRD=y; FW_UPGRD='1';;     n|N) FIX_FW_UPGRD=y; FW_UPGRD='0';; *) echo 'WARNING: -f valid options are y or n';; esac;;
   h) case "${OPTARG}" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        s) TITLE="$VARIANT-$MAC";;
        *) TITLE="$OPTARG";;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   l) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then KEEPLP=y; else KEEPLP=n; fi;;
   p) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then SIP_PWDS=y; else SIP_PWDS=n; fi;;
   r) RESTORE=y;;
   t) case "${OPTARG}" in
        g) THEME=night; COLOR=green; KEEPLP=n; echo WARNING: -tg deprecated. Use -tn -cg in future;; 
        o) THEME=night; COLOR=orange; KEEPLP=n; echo WARNING: -to deprecated. Use -tn -co in future;; 
        p) THEME=night; COLOR=purple; KEEPLP=n; echo WARNING: -tp deprecated. Use -tn -cp in future;; 
        l) THEME=light; COLOR=monochrome; KEEPLP=n;;
        m) THEME=telstramodern; COLOR=blue; KEEPLP=y;;
        n) THEME=night; COLOR=blue; KEEPLP=n;;
        *) THEME=telstra; COLOR=blue; KEEPLP=y;;
      esac;;
   u) RESULT=$(curl -m 5 -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else 
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]
                then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo "002@$(date +%H:%M:%S): Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]
                then
                  chmod +x $FILENAME
                  echo "002@$(date +%H:%M:%S): Successfully updated $FILENAME."
                  return 0
                else
                  echo "002@$(date +%H:%M:%S): Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo "002@$(date +%H:%M:%S): Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   v) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then UPDATE_BTN=y; else UPDATE_BTN=n; fi;;
   y) YES=y;;
   T) THEME_ONLY=y;;
   V) LATEST_RELEASE=$(curl -m 1 -q -s -k -L -r0-9 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt)
      echo "002@$(date +%H:%M:%S): This Release       $RELEASE"
      if [ -z "$INSTALLED_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Installed Release  NOT INSTALLED"
      else
        echo "002@$(date +%H:%M:%S): Installed Release  $INSTALLED_RELEASE"
      fi
      if [ -z "$LATEST_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Latest Release     UNKNOWN (No internet access?)"
      else
        echo "002@$(date +%H:%M:%S): Latest Release     $LATEST_RELEASE"
      fi
      exit;;      
   W) WRAPPER=y;;
   ?) echo "Optional parameters:"
      echo " Control Options:"
      echo " -d y|n         : Enable (y) or Disable (n) Default user (i.e. GUI access without password)"
      echo "                    (Default is current setting)"
      echo " -f y|n         : Enable (y) or Disable (n) firmware upgrade in the web GUI"
      echo "                    (Default is current setting)"
      echo " -p y|n         : Use decrypted text (y) or masked password (n) field for SIP Profile passwords"
      echo "                    (Default is current setting i.e (n) by default)"
      echo " -v y|n         : Enable (y) check for new releases and show 'Update Available' button in GUI, or Disable (n)"
      echo "                    (Default is current setting or (y) for first time installs)"
      echo " Theme Options:"
      echo " -c b|o|g|p|r|m : Set the theme highlight colour"
      echo "                    b=blue o=orange g=green p=purple r=red m=monochrome"
      echo "                    (Default is current setting, or (m) for light theme or (b) for night theme)"
      echo " -h d|s|n|\"txt\" : Set the browser tabs title (Default is current setting)"
      echo "                    (d)=$VARIANT (s)=$VARIANT-$MAC (n)=$HOSTNAME (\"txt\")=Specified \"txt\""
      echo " -i y|n         : Show (y) or hide (n) the card icons"
      echo "                    (Default is current setting, or (n) for light theme and (y) for night theme)"
      echo " -l y|n         : Keep the Telstra landing page (y) or de-brand the landing page (n)"
      echo "                    (Default is current setting, or (n) if no theme has been applied)"
      echo " -t l|n|t|m     : Set a light (l), night (n), or Telstra-branded Classic (t) or Modern (m) theme"
      echo "                    (Default is current setting, or Telstra Classic if no theme has been applied)"
      echo " -T             : Apply theme ONLY - bypass all other processing"
      echo " Update Options:"
      echo " -u             : Check for and download any changes to this script (may be newer than latest release version)"
      echo "                    When specifying the -u option, it must be the ONLY parameter specifed."
      if [ $WRAPPER = y ]; then
      echo " -U             : Download the latest release, including utility scripts (will overwrite all existing script versions)."
      echo "                    When specifying the -U option, it must be the ONLY parameter specifed."
      fi
      echo " Miscellaneous Options:"
      echo " -r             : Restore changed GUI files to their original state (config changes are NOT restored)"
      echo "                    When specifying the -r option, it must be the ONLY parameter specifed."
      echo " -y             : Bypass confirmation prompt (answers 'y')"
      echo " -V             : Show the release number of this script, the current installed release, and the latest available release on GitHub"
      echo 
      echo "NOTE #1: Theme (-t) does not need to be re-specified when re-running the script: current state will be 'remembered'"
      echo "         between executions (unless you execute with the -r option, which will remove all state information)"
      echo "NOTE #2: Use tch-gui-unhide-cards to set card order and visibility"
      echo
      exit;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

if [ $THEME_ONLY = n ]; then
restore_www() {
  # File deployed to incorect location by releases prior to 2021.02.06
  if [ -f /usr/share/transformer/mappings/iperf.map ]; then
    rm /usr/share/transformer/mappings/iperf.map
  fi
  # Need to remove existing version or it doesn't get replaced?? 
  if [ -f /usr/sbin/traffichistory.lua ]; then
    if [ "$1" = "V" ]; then
      echo 010@$(date +%H:%M:%S): Removing file /usr/sbin/traffichistory.lua
    fi
    rm /usr/sbin/traffichistory.lua
  fi
  grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
  if [ $? -eq 0 ]; then
    sed -e '/traffichistory.lua/d' -i /etc/crontabs/root
    SRV_cron=$(( $SRV_cron + 1 ))
  fi
  # Add individual files to be restored here
  for t in /etc/init.d/power
  do
    s=/rom$t
    if [ -f $s ]; then
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        echo 010@$(date +%H:%M:%S): Restoring file $t
        cp -f -p "$s" "$t"
      fi
    fi
  done
  # Add directories to be restored here
  for d in www/cards www/docroot www/lua www/snippets usr/share/transformer/commitapply usr/share/transformer/mappings/rpc usr/share/transformer/mappings/uci
  do
    echo 010@$(date +%H:%M:%S): Restoring directory /$d
    for s in $(find /rom/$d -type f | grep -v -E \(/rom/www/docroot/help\))
    do
      if [ "$s" = "/rom/www/cards/010_lte.lp" ]
      then
        t="/www/cards/003_lte.lp"
      else
        t=$(echo "$s" | cut -c5-)
      fi
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        if [ "$1" = "V" ]; then
          echo 014@$(date +%H:%M:%S): Restoring file $t
        fi
        cp -f -p "$s" "$t"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done

    for f in $(find /$d -type f ! -path '/www/docroot/help*' ! -name '003_lte.lp')
    do
      if [ ! -f "/rom$f" -a -f "$f" ]; then
        if [ "$1" = "V" ]; then
          echo 019@$(date +%H:%M:%S): Removing file $f
        fi
        rm -f "$f"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done
  done
}

if [ $RESTORE = y ]; then
  restore_www V
  for f in /etc/tch-gui-unhide.ignored_release /etc/tch-gui-unhide.theme
  do
    if [ -f "$f" ]
    then
      echo 019@$(date +%H:%M:%S): Removing $f
      rm "$f"
    fi
  done
  for d in /www/docroot/css/light /www/docroot/css/night /www/docroot/css/telstra /www/docroot/img/light /www/docroot/img/night /www/docroot/css/Telstra
  do
    if [ -d "$d" ]
    then
      echo 019@$(date +%H:%M:%S): Removing empty directory $d
      rmdir "$d"
    fi
  done
  for s in $(uci show web | grep normally_hidden | cut -d. -f2)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry web.$s
    uci -q delete web.$s
    uci -q del_list web.ruleset_main.rules="$s"
    SRV_nginx=$(( $SRV_nginx + 2 ))
  done
  for s in $(uci show web | grep '=card' | cut -d= -f1)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry $s
    uci -q delete $s
    SRV_nginx=$(( $SRV_nginx + 1 ))
  done
  RULES=$(uci get web.ruleset_main.rules)
  for s in $(echo $RULES | tr " " "\n" | grep -v dumaos | sort -u)
  do
    TARGET=$(uci -q get web.$s.target)
    if [ ! -z "$TARGET" -a ":$TARGET" != ":/" -a ! -f /www/docroot$TARGET -a ! -f /www$TARGET -a ! -f /www/docroot/ajax$TARGET ]; then
      echo 019@$(date +%H:%M:%S): Removing config entry web.$s
      uci -q delete web.$s
      uci -q del_list web.ruleset_main.rules="$s"
      SRV_nginx=$(( $SRV_nginx + 2 ))
    else
      ROLE=$(uci -q get web.$s.roles)
      if [ ! -z "$ROLE" -a "$ROLE" = "nobody" ]; then
        echo 019@$(date +%H:%M:%S): Resetting admin role on config entry web.$s.roles
        uci -q delete web.$s.roles
        uci add_list web.$s.roles="admin"
        SRV_nginx=$(( $SRV_nginx + 2 ))
      fi
    fi
  done
  uci commit web
  sed -e '/lua_shared_dict *TGU_MbPS/d' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
  apply_service_changes
  echo "************************************************************"
  echo "* Restore complete. You should clear your browser cache of *"
  echo "* images and files to make sure you can see the changes.   *"
  echo "* NOTE: No config changes have been restored, except to    *"
  echo "*       remove added entries to display hidden modals.     *"
  echo "************************************************************"
  exit
fi

VERSION=$(uci get version.@version[0].version | cut -d- -f1)
if [ "$VERSION" = "$TARGET_VERSION" ]
then
  echo 020@$(date +%H:%M:%S): Current version matches target \($TARGET_VERSION\)
else
  echo 020@$(date +%H:%M:%S): WARNING: This script was developed for the $TARGET_VERSION firmware.
  echo 020@$(date +%H:%M:%S): It MAY work on your $VARIANT with $VERSION firmware, but it also may not.
  echo 020@$(date +%H:%M:%S): If you still wish to proceed, reply FORCE \(in capitals as shown\).
  read
  if [ "$REPLY" != "FORCE" ]
  then
    echo 020@$(date +%H:%M:%S): Good choice.
    exit
  fi
fi

echo "030@$(date +%H:%M:%S): This script will perform the following actions:"
if [ $FIX_SSH = y ]; then
echo "030@$(date +%H:%M:%S):  - Properly enable SSH access over LAN"
fi
if [ $FIX_CFG_PORT = y ]; then
echo "030@$(date +%H:%M:%S):  - Enable unsigned configuration export/import in the web GUI"
fi
if [ $FIX_FW_UPGRD = y ]; then
if [ "$FW_UPGRD" = "1" ]; then
echo "030@$(date +%H:%M:%S):  - Enable firmware upgrade in the web GUI"
else
echo "030@$(date +%H:%M:%S):  - DISABLE firmware upgrade in the web GUI"
fi
fi
if [ $FIX_DFLT_USR = y ]; then
if [ "$DFLT_USR" = "admin" ]; then
echo "030@$(date +%H:%M:%S):  - ENABLE the default user in the web GUI (i.e. GUI access without password)"
else
echo "030@$(date +%H:%M:%S):  - Disable the default user in the web GUI"
fi
fi
if [ $FIX_PARENT_BLK = y ]; then
echo "030@$(date +%H:%M:%S):  - Ensure admin role can administer the parental block"
fi
if [ -z "$INSTALLED_RELEASE" ]; then
echo "030@$(date +%H:%M:%S):  - Install tch-gui-unhide release $RELEASE"
else
echo "030@$(date +%H:%M:%S):  - Replace tch-gui-unhide release $INSTALLED_RELEASE with $RELEASE"
fi
echo "030@$(date +%H:%M:%S):  - Allow editing of various settings that are not exposed in the stock GUI"
echo "030@$(date +%H:%M:%S):  - Unhide various cards and tabs contained in the stock GUI that are normally hidden"
echo "030@$(date +%H:%M:%S):  - Add new cards and screens, and modified cards and screens from the Ansuel tch-nginx-gui"
echo "030@$(date +%H:%M:%S):  - The GUI screens will be prettied up a bit and the $THEME theme applied with $COLOR highlights and $ICONS card icons"
if [ -f /www/docroot/landingpage.lp ]; then
echo "030@$(date +%H:%M:%S):  - The Telstra Landing Page will be $(echo $KEEPLP | sed -e 's/y/left UNCHANGED/' -e 's/n/themed and de-branded/')"
fi
if [ ! -z "$TITLE" ]; then
echo "030@$(date +%H:%M:%S):  - The browser tabs titles will be set to $TITLE"
fi
if [ "$SIP_PWDS" = y ]; then
echo "030@$(date +%H:%M:%S):  - SIP Profile passwords will be decrypted and displayed in text fields rather than password fields"
fi
if [ "$UPDATE_BTN" = y ]; then
echo "030@$(date +%H:%M:%S):  - New release checking is ENABLED and 'Update Available' will be shown in GUI when new version released"
else
echo "030@$(date +%H:%M:%S):  - New release checking is DISABLED! 'Update Available' will NOT be shown in GUI when new version released"
fi

echo 030@$(date +%H:%M:%S): If you wish to proceed, enter y otherwise just press [Enter] to stop.
if [ $YES = y ]; then
  REPLY=y
else
  read
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

echo 030@$(date +%H:%M:%S): IMPORTANT NOTE - You can restore changed GUI files to their original state by running: $0 -r

# Package repository for Homeware 18 moved 31/03/2021 (Quick fix in case de-telstra not run)
if [ $(grep -c 'www.macoers.com/repository' /etc/opkg/customfeeds.conf) -gt 0 ]; then
  echo 040@$(date +%H:%M:%S): Fixing opkg repository
  sed -e 's|www.macoers.com/repository|repository.macoers.com|' -i /etc/opkg/customfeeds.conf
fi

if [ $FIX_SSH = y ]; then
  echo 040@$(date +%H:%M:%S): Properly enabling SSH access over LAN
  # We need to enable this properly as you can enable/disable via the GUI, and if done
  # without allowing password auth and root login, it can accidently prevent SSH access
  uci set dropbear.lan.enable='1'
  uci set dropbear.lan.PasswordAuth='on'
  uci set dropbear.lan.RootPasswordAuth='on'
  uci set dropbear.lan.RootLogin='1'
  uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
fi
  
if [ $FIX_CFG_PORT = y ]; then
  echo 040@$(date +%H:%M:%S): Enabling unsigned configuration export/import in the web GUI
  uci set system.config.export_plaintext='1'
  uci set system.config.export_unsigned='1'
  uci set system.config.import_plaintext='1'
  uci set system.config.import_unsigned='1'
  uci commit system
  SRV_system=$(( $SRV_system + 4 ))
fi

if [ $FIX_FW_UPGRD = y ]; then
  if [ $FW_UPGRD = 1 ]; then
    echo 040@$(date +%H:%M:%S): Enabling firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='1'
    uci set web.uidefault.upgradefw_role='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  else
    echo 040@$(date +%H:%M:%S): DISABLING firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='0'
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
  uci commit web
fi

if [ $FIX_DFLT_USR = y ]; then
  if [ "$DFLT_USR" = "admin" ]; then
    echo 040@$(date +%H:%M:%S): Enabling the default user in the web GUI
    uci set web.default.default_user='usr_admin'
    uci set web.uidefault.defaultuser='admin'
  else
    echo 040@$(date +%H:%M:%S): Disabling the default user in the web GUI
    uci -q delete web.default.default_user
    uci -q delete web.uidefault.defaultuser
  fi
  uci commit web
  SRV_web=$(( $SRV_web + 2 ))
fi

if [ $FIX_PARENT_BLK = y ]; then
  echo 040@$(date +%H:%M:%S): Ensuring admin role can administer the parental block
  uci -q del_list web.parentalblock.roles='admin'
  uci add_list web.parentalblock.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

grep -q -E "lua_shared_dict *TGU_MbPS" /etc/nginx/nginx.conf
if [ $? -eq 1 ]; then
  echo 040@$(date +%H:%M:%S): Creating shared dictionary for throughput calculations
  sed -e '/^http/a\    lua_shared_dict TGU_MbPS 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

echo 050@$(date +%H:%M:%S): Ensuring card sequence and visibility is up to date
ALLCARDRULES="$(uci show web | grep =card)"
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="${CARDFILE#*_}"
  CARDRULE="card_$(basename $CARD .lp)"
  MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
  HIDDEN=$(uci -q get web.${CARDRULE}.hide)
  if [ -z "$MODAL" ]
  then
    MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
  fi
  MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
  if [ ! -z "$MODALRULE" -a "$(uci -q get web.$MODALRULE.roles)" != "admin" ]
  then
    echo "050@$(date +%H:%M:%S):  - Converting $CARD card visibility from modal-based visibility"
    HIDDEN=1
    uci -q delete web.$MODALRULE.roles
    uci add_list web.$MODALRULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  if [ -z "$HIDDEN" -o \( "$HIDDEN" != "0" -a "$HIDDEN" != "1" \) ]
  then
    HIDDEN=0
  fi
  uci set web.${CARDRULE}=card
  uci set web.${CARDRULE}.card="$(basename $CARDFILE)"
  uci set web.${CARDRULE}.modal="$MODALRULE"
  uci set web.${CARDRULE}.hide="$HIDDEN"
  SRV_nginx=$(( $SRV_nginx + 4 ))
done
uci commit web

# Do the restore
restore_www
echo 050@$(date +%H:%M:%S): Pre-update restore completed

echo 060@$(date +%H:%M:%S): Deploy modified iperf GUI code
echo H4sIAAAAAAAAA+2UvU7DMBCAM0fKO1ieWqkNTmInExMzEw8QheCWSGls2c6AUN8d2xG0VPQP2iDEfYvj8+l81ndKr9VNcGWIpWDMr5bd1X8nWUGLIrWJRUASQkkWIHbtxhy9NpVCKFBCmEN5x87/KL31r58rxa84Bef7Txhh4H8MNv6Nqjq9EGrFL/1HON8/JbQA/2Pwtf9VJWXTLfVlBuEk/9TmZEWSp6n1z3KWgP8xOOK/r5ufz8D5/nOagf9ROMF/I7laxDb03Tuc4JzSvf4ZyT/7T0ma5QEil3zoPv65/1bUVYtq0S2aZelNo1uE/QeOwiicz5GdgdgHotDNBVcTbENlYkSCp7Hiy0Ybru58iftKTraLTXdrxMNpFA4X+1g5xOzFr1GI0Mduu9DMnWhem0Z0mw591LxIvhMS0uXp94oIYamEEXiG8BPXppRCGbfhXfXYcuxy1lG4ds0eeOJDs5Itd0/cbnuKovC3LQIAAAAAAAAAAAAAAAAAAAAAAADAwBuC/9IzACgAAA== | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified broadband GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified devices GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified eco GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified firewall GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified gateway GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified internet GUI code
echo H4sIAAAAAAAAA+w9a3fbNrL9rF+BwzTX4paiJT/k3STOJnGcxuc2jjd22w+uq0ORkMWGIlmSku16fX/7ncGL4EsPv9o9a6a1KHIwGGAGg5kBMLq4uFj/5oGvLlw729vsE67yJ7vvbcHfjV6319/5ptvrbsIH2X5owvCappmTEPJNEkXZPLhF7/9Drwvgv+skXvqAUrAk/zd7G9tbO5vI/952d+OJ/49x5fzvdjcHfpjRJKSZHcT3WAcyuL+11cT/zW6/X+L/1sZ2/xvSvUcaGq//cv53OnFCs8QJ08DJqPeCeBEJo4y4Yyc8pyQb+ykZ+QFttTodsh86w4CSIHKdwP/DyfwobJ3TLKOXmY1/vGji+GF77YIOp37HjRK6ZrZaDJzESXR5RXZJQn+f+gltG56TOZPIo4FhCpALJxz4o9CZUIBj8DZgbxtT17dBKC+i5KvNJHTkuNR+A+A2BwcMLX+kl3dCT//6f7vEMKAxNBRVuRHgCbPBmAYxTXSygHa7+FbR512FmTNsKFN4qYr4k7EOKMcXtrsC6taC4uAsg079BiLUC0P1O6vKcTN/hr1aoNKGPnZpmraBStN2p0kCjbaxw7A3CwXz/htFCRlYM+KHxI8dP+GlQWywzMz26MiZBhmWyJIp5WWKNMx4FcOEOl9bNPTU/znFTnDkZNgdoR+IpykQCvKGz84vbTe7tMUTrFfcvhg76VuXNclYZ2jSddmPHfYdFJthKqJUNXOgdcrG2SQAaOAUCuaBgN0DDn08+fRDW2smdD+SGSeAsL32S+uV58+IGzhpumuksRNuGq9LDydOECCv8cWa+ZKQvHzOb9uFTssoq5E6Hk3aJ4Ykg/CWG1begSYBRI10CCknTMKG5wbBEdkZnndwKO8a//PsctR13JeKUt/bVVLZwUIdgaGGZOypSt3rgOX1nM/UTfw4g7sZaGT/wzR0D96//KU1ghtUNWQaA4VU7/a2ef1L61s7jlJQE+vOb85lzkHQ69k0tYOpA11ymgHPaEAnQO7e8ZcPWfSVhm3zzCISextbz9C1jWf1zTRtbBYDPDXw1jgzgb4bixi/pVFomL+07JHjB22FM6FpHIUpRbz+SH21OW27uzDp/fvfNU+3zGs3oE7C2jpzgrboDfPlDdTHKkVCTRvEwbvK6zOvBeBuKuQTC1f7zdrAidd8eeGHXnTBlSpAHrxP7XiajrXqsK5X64ozwGYcEH/2rPV03deF9p8XuWjdPJgHsJT9v7mzs4UeYH8T7L+N7vbWk/3/GJfOf6Y/H6CO1f2/ze6T//c4V4X/NfPnXetY4P/1YLiX+N/vb3ef/L/HuLhhi+ZLwTf7yg2aOzg+y3szS/lI/7HezEo+g+huMDChyHVLlM3Q60an1HW4ZQ0G5y/AHat1I4sMp6MRY831DVKO3LNp6AJywuxVi1xDGz0093fJCDwdauVlxM2NcIzQaE+dqzZ/bLYoQKuHxvUNcAPbh0/opZ+18ebjycnR4PP/mq0/W56frtUuXf8LH/je67jF/L+52X+a/x/jquF/JQZy1zoWzP/b3Y2tyvzfe4r/Psp15/gvPD78vrPT3fnHP+4zFhzEZTsDI3erxD+FwQAWgXNOG+GL7+9i8WAQqqGA9io3ZVYxe6A6YRQ0mzwFE0mYP9x4wKJFg0iDjGJkY6pBiiethYFXLWwfx/EgCHD9aFSM3Sex2xS7hzK2KFNYAkBc0YwmAyebYGzWUMF9vRYZ4deenfbO7JkTSDutSlcTfKum2rwNaZb44bkNpuLEEasRl9nEBjCPznxszfPUNqwydtPEZQcMYDMDqkqNUYgt43tkSPPSBxiAI//cloCGmdOPHYSjttIOZeR+LRi5OueVtQvomGkMCCJH2Mfc9EzoBDAWSlnkq1ln9ApCylKHriXHCPoiCoMr4vlpHDhXRBTwIuhjYCphkDgqaJoxpbPHUQRXFiLghR1v5oQu9UA10cAjoKPwFXQQPOSxYqTVxuLHEVbhZ2spq8cP3WDqUY8hA52ET0lIERX0EtYvUQ+nWQZWtBbHL4fh54Tg0Vvgf81yGLwYhGdzbGcYeVcivM3C7ShrEgLvO+Mo8f+IYOgHBqi0bBx5uwZqFYM4rL0CUd0Cxmuscq1ARbkhn7gSBLkoaEPQW7F6ZZpmyaW5vil6ZRmME+g0mjLfJXE8P2J3rB0o734Y+CE1WjdWyw/jaVZ8G0ad1JlRw2qdsvmgAw03zvDN8c8HJ3sfB58+v9830Oe50avlbGKotFuBgi0OMhy8m3LkbNw0oRfqhg9HgBgmvndODc39y/WrfMnEH3vm9Bn+/Q4HE1l7xQQ0BdHA1RMUUD52JXOVtI19ePp6rQZDQM8B9es1YtvkxNgDFJqIG/h07dW6BKqUL7P6ADv+C/IG5PYTYgBnMqQXE35bHOJ6U60yl82Fdb1j/GgbgPfEOL7wM3fMxqhOP9TuwzMwEM5l9ZyNVfTQTNmb0NBWabGpJZRpDNNTFjvZuG2so3Gbhn4c0yxd1xaJK4zFyaRuomQLxwXuA36hQvIpu8MhPG6iSDIkWBnvzKcX5n0rytJCG+oMbWVt0fj/ALYtKDKTL+48+fD/RRcOkWDqPOgewNX9/17vaf/f41yS/zUB2vsI/bNrvv8PrN7eLPF/e2dj58n/f4zrDtuhVvDCp2C5goQNJlkZlj03TDuHEEVGfghGOne6LHKeTodQVLpi7F3BL1NfEVLapZ+Elap2kHxaHIOXpuXQD+iAr4Exi/ICDYcpRiUafVp0aqcxsyGLXYa17l9CDXv8cbuAXvPc2VM/Ln73wBdnKxhaGVuRA/T0are2cXhGO3h9npcsIp1DAfl+3F8Ovi8KeCx+MBcYQFKagFsK3lEruRwMr7ijMLeQhIMi2ZJFsrzIQi4Ue8rETi4+El2ibx9UPAJCaoFbOdeqIMhKjAbU1dQvVwVAzxqgXu2Sjb8vQVC/ShGOj3aVLMtg/4gh1nt0tCLysfYKd67BOLsKKLqlYdZJ/T/oi95GfGm8fp6+Wsf3r9esBjrMIiErY11IuanCENB14EJMJ0OwakslpEyZ5G+k1+2SV42QmYLUO5qPv1NDDEDuQm4Y5df4KfzLT3wgqiDB8cEnNOoxsuL90yh09xKlhQNFPaNhpTF3y5Xag94/OErbXEAtIvhhEei92Rb/6Nf5W7HanTgd+uEoSg3Jp4mTnPthZxiBqzZ5sRVfvkTXvjOm/vk4e9HbgQd13qzg+cnaz28PycHRC/IKtHYE/oxAG2AAOekAx13Q5S86PSUDDAylgDeCDVY5GtB7qxk/jZW/Giavb1OxkOJ6R389rvXem7twtQ57f3h8m95iY4b9Ebw2fn2e/q1td0z4+BZHzfOeYepDaG6/4hMmLdpdUWOxatTbrXn8YHxYq+3OnFW3azGjrKwYGnjGRhA42+++HLz/fr9ur0AxAMAnWW4UzJzEd3gYiIYzG77a4tFglPiAObgasBjUMrMRGgLLCFCNmJysfQ8K4wKjBCmGeTnFrCF1QsnaDU1+/3HvSM5H5UZ7Yzeua/LU9Qeo+pxphuG9eZvzEYSZE4usiRWNDyfsF40PkLP52AvWBxfbBfgLJZbinVg4gm5jahwtL0NGu8Jzo/J+MHFi1qNyLkA+GsgSNTtA1Urd52/zGUC9xpAQvj9JrvAWOCNekGmKD7CcbdusKRodASqfOjqMaDQqYzeiBJcESzQZ5wmlIUOMRg3MXbqAwBSGCqArBKnmNTNfZVEhBGcvAtycTV6TLi9X26lsBsS5s7nL2QRZBVHdy8f+ojDmsT+JA/oD9lU79AOrxMPT/OsZbrNhnYodSmRou9jXOjy5ITdM5eoEFprIO0BM4HofWaLH+vpXNhb0L33jjCs/GO1HR5/3m0Y7rvnQWjcC+MX9H1xaSqKFg57BgDyspiOWttUBlVmiEIZxTmGs8XnB2iM3sixVjiZJtEhNYTkG91+i1/IuVsvc8Vz9dXRUUF9wW1JRAkAbpmUlhxBzdJz2mpfOsRVp0HFI3vKXkoNvfzz5ODj5fLS//2Xw4e3BD/vvFQjIJYyFzHfZLgeCxzoYosP97z+fHLw9Ofh8WC4S0vMo80vwN62UZhMKHYZd0i70nqXFRfTuXaSWSw02ktqurujrpdR4PggY0toeEu9qu0K8q2m2alVTs7nzo3vhqDeUHilMJHUAfCrJMeV2pPEc12Q1YbYLusIkoB0FTVi9joKZr9AjpWe6eIAQcqoKVVcmIrF+064jQ/S6rGw+yI/HwIwv+//6cf/4RB5m06jmk1IjirMaWhuB+exZbBcfPPmqfxWiOL+uPL0WG5KjbphdC7Klg6vJtcS7psk174TCLFt83K99ns+75af6BHx8AoNlr2kKRgp998nkXsHkXmxx5ntr1KZq7ViwuOZ3qThiDI1Ig+6AhlwZ6wUv4Q3/8wZhbAHDi0jJy+tKr1KbCa8og4GArn3MwFADZ2MkUSsmysALO46SzH4Dd1vitOAyXSWbb8r1b36CMe8I6DT02NsYV2/XA1hGnE26oG5ACc0Fc7IJONxKK+VgeV8YfJ/Rj3FDYGCehgAVDx79MRsr5EA3FMy7Wsl8WM4h+DA69s9D3IKzOtlbRbIL5slDUK4kVdDevQ3R3QrRHOV9ELwaJRtISdW7vfCzMVEEood7Z9LyCPKckTJ3BMDoNOoGQGFgC7ZM7zwG7leM/kJCrdsXfw2p1fY45ssjK3OvaR3BIvWLAIpsVadFmJ2Ur6awB2LnUUKzaRKyxYDCg0/123rK6//3vPTPrgX7/zf6mxvl/C87G9tP6/+PcS2xIb+0mF5aWwKfZn8SZ1dt3HPH97Xl+5fZs3xbtrYYIKQSd8gWxJSdTeNPSqv28awvDRpFk0xhwRe5lRXLbdo4oSP/cqERLOCYIcW2SvuFrdKqMUeHTbvZDbnTF3dSi839fIu32JMAPqg7bs9s7A6LkfNconme43luv2mf/vrcPvvOfI4TGa7EIBo5k3Cc0Jx+4hX9YHuxBQ9llAEvXFHOthIKs4J4YTcK1KIbVdFFNj8W00x+fTM5t2dUe1FD9lduMSv1UG1WyFdtNS+4dLtv1eyHbPVtG71Cm2/T5Ads8X03WD8tIZSeQFucrx9H/5fnf+340SPt/+vCZF+e/7d3Njef5v/HuBYe2Vv6xB53gFhEbmHqtkBL3ZafYrp7FjiOobhZkG8ILKaHU+fDVEX5l5wedW5LQckjW2KMXreuW/INWy+3WipjAD8CBN957iR+gk6s4CbRFMPu/ABECw8EEHY8RhwnQFQdDoNHCqwWbspFCD1F44AtGRagxtT9ykyh62VW6IjxK6L41rix8EROBCPekUcBl0bBWg2l54L3i/DgTS0uIaNuGmOqhcon4pYiSJM9fX+MEF+9QkBnmLhFJmU7ZQyT9xRiV2znC6c633l2hQrjj46Oon3B+TqmM0SLuc7A7sh2huNufOfNXoojTaAPyhJnWZa8XcAS5/FY4tydJc7yLKkDfTCWiLWNJXiSx22atCPHtZgtHO6OfOFI7sYY0fgVtOTSJW6rJZep4H4lQOyhW0IC3uV71+rYr521a2B8EaKJ5TW98isvCdy+PbNFO5fiQiNsExekiWXba2TNtotcF/+teHpP2v/p2Emo9wkPDZ84w4/36gAssP+7O1u9iv3ffcr/8SjX6gmFaw7ViFPkQnjafkYn+amWaYIbyPDwKW6PhW9aUouU41qUaKImSxerQmQumJP9l52PxswGpr4erJJ3YXYGQMBI3CXNxVQBg98VMjdAO/hGHVBkcDM73Tiz8hL8xmqBlIEbQ7Rcw6oSGLQ8z4IfpjTJ8MQw6Ff4q605zDm8L7o9ZeVMeRB6yTBC4Yj0A8nY6uc/Nza2N5/Ofz7GVeB/zSR7H3Us0P+bvc1K/qfu5tP5z0e5/kr5/x/6FOotc0Etn9gJN1nzjEzk6PPxCfl9SpOrlbGU0jJdXyvjGazjw4jkKUDAdLwWgScRWmJPpLelu1PshQhWyGiEcZNncHHiIydxJim57V7vPEa2OFDX0uv9CWTJq1Sr9QmG/xgQS1+yH04nxzSADihmMcpx5ouCOhKQZy+g/0KOtFVrLVm/SMghjBSRVWPAM+2wdQnkZ3FhQtgpAIsEDlhdMMenbf0g6alMPHO2u2scv/1pPz8ppSBUs8XetcJxIx4ATZcLgBLmVHTAZwA54iWdOA6u2mZx2aGcj0ilVeEJ3u+eKKiYjkQmpyn9qoF09TwtKYxR+sUCldlGJDGpHHUU6U8ZogGej2KS5ARgR5FCeiH2qIMQBsvxo+3ZIN+R2l0bb7HIO6jhaxtGEpM5zMJyFU3R88pwIxJICahEPx0TR09tA/9hQioxjRLFLRh7Gqn5YfPV0ifBv1ul+ckFrZzop04WaxL+VHLulAVJS9ADvPqz57ana/FVb/8VVyDuWsd8+29ze3Onmv9z5yn/96NcT/bfQvsPE201lNFeKXCZTgCXAMWtMnYydyxzmpR2B5XSmaxqNIqFz58O9o+XM54WxlzwvAI7SId8uq/DrU3nWveaj3vt6Ue9lI33AMdXdW7jpMeQstwUWkJBfJvQUULTMT+8ul3ISKgKD9Q5lVZ+p2Zy3J/GakeTfcB3/g9+2H/PUiOinCdRwM0ADqZtG7YWUiJImR0fHJREYSbk4JhJ2kF6cCTl5vNPVan5zIwDJxDSgzIhMB9WhExiPoxCtvOG16CYFaa6P8ODXbxl+Co/9DF0UhqLX+SaY+1CIfsNHmYWRmnKJeWt55GQXpD3h8eE4wSQiQ9CD9Qws6oL353L/PumLlFAiRsF04mM97fGLL0nF1xACT6Ula/2K7rhYYy+BD7lSSWtVnYVMyjUiUWuYLmZcnhyLPAVmNBGpplFaJ69H++wryesrVW/5gS7lDs3WkMsvevFrmF+glmSYbZk8DTNIqaVRZWGJe/MypbPc7n7gA31tjx6k+fmAN3xwT+fJpSACZFbv4TBy60YlUN9LPMEIigf/xahzMrB79Lz4pFv+bJ4GE0L26rmpHHgsyy/FgENodQ4j+resOAzJnXA6LPcUsL2/+uHC+GFyYtjTLoczbUYAu6EyY2vzrCWGOx1mG8xHSMLAIu9NfFsS6TNMYz8WT9/VhMjx/IiQi42oOIaV/u5h/tLaz6+VacWRG278sa287ZiRo2ZOCwgSdiVN3WA2q75Z6odr0mvWFc+HbJFRvHU6lmqTKdnypMZz1TbdTz9Wjx9DU9fxyMYoapSHarOy985lCMzmSX0wgmCwR9RWLOnSb628bVdX2ogtGLpoBd8Bd2RfaHpNMhOos/D3zAsUofVKqCTdeA9WARcgrgAEV2CqjRIgWrPTg2ZXFfs2hTCk+MEEKYZ8XdHLo2z0h7IUiuh9gsn8fhc3dRDOVBNP+Uv79Bbeg1WDWpVKzzxluq6Ell6B6aJq/UfO1gETz2aZuJxkHerVuFS/Sr1iZqZYVCy6ckiEWu4Rb7SK9kcBgUOf2V2kcXfRVFAnbAWBeYOZ1MaNkCyP88XpLb+z5d72xZFbbifOOnv2s7A2lDYvPI4I4BT437FsEcvl5ULTx6LE1RPaSGDngbAthWIiab0uKcOdOdc2dV/UkhySoTgPG+uHIOq6XX7nXf73x8c8rDR1A88cuEHYAGAsZ4JN2yIkSgUsQ8/k96OvWFfWmRIXWeaUuJnmPmH5QsW+ognNEfQv9s92yVtYGvqo/vGvD3U06C+hJvXIUIb8i7xMSv6BRkAey3yJqf2lIncGXFSRUbuu01ZSLTbeuwByQbfsiNPksk/vyM9xkl9NOvNZSu0HBRujDND8mr/8H2jOOoUs/mQoUapxPFuCWV5i+JMMVhCK9yivNhEggnlBxcbwa1wqKPN+lgS1sD9YQOWVKPXuYQKVaUyd+2xrTXThAUnNHe1uKix+il6WQK1kSyxUGupYv0lauqXquqj0Lo0P5Ywr6gGWiDWXdA6gBDn+GWZmNJEWJLzVns4lFZuBhyIEu7JzSkowfR2LlVlX6vzhrH6eBwlmTvNUgy+z5RnSrhGYU8nzldKMFKekhShVfhl9m7+5FaxxQ+OZn2YwX4EMx7HzrLz5+wdh9RmRm3vCbMyYcYOJlVDR+aQw4QVDGSA0EbBC1il6JZh1s9zzNVSdKyw0DQVfWFYGgI1T+tDt4JJ/lgKoGH5C1jTxPS8uAhmHygU4Q7ISO+UW7dj6z7a0V29HV1jRWVXs2haUmuzdxW9pZmAVeVUkvEmTVRE64pwxbzg0qe3e2adhtExafqjCV0xomTWahBEWV79tci8cEl5GZjk68CgZOQWVX4KRF+qnZfbrgGmYC+WgfrLYOpXUT3aLy/l7+ARpluSptxj/SpTqdqVf4Rp/k87lWtY9iebtJYXf2qpkjtvcMmqvM4bw37ZrFwxmA9Ttl+ZDYvYXzSjxr6EdRfCuv6KCfaQ5nzdRllQ+T7NTMTU+WHtYsIuLPz/7V15dxs3kt9/R58Cryd+Zm8oOrbldiYTedMiKYkzOjg87GRljR5F0go3EsmwSTl+GeezbxVuoNEXdVh2ut+MIzaOKlTjKBSqfqiJVmgB36yek6xWnTIpKxoyQjyJzLAwmeEaZMSnQ1II8GFQS/ialAhmdtFhjqvstbVwsVqTPDjojXv0xhy31stBo4pBQE3Hvy1/nqWi20N2nisb8d3Gf6K6wsVqkF4moAvjajr5dTWmbVFwU2eXs9n8fEBd+ZNqEFkM0gjtFo5GsB2G5Y5fyUOYgxTaWvlBQUSENCEjaH6SmrJdo7mX9FpkuIqWM81GbwJnEMeNfsqzi5qSg3/irvo6eM222lPCPZpNAA4b8YDtXqMTWhw7Fq9AXw7Yodh4EDHU/9V8ObmSQJjRh2g5vqqxl+oU7EzkSRkwelYoKSikFaF5RN6z8W9zkEjW/sLIy+EYtCOHA0zuAQsV1oYqoQWqhJeQN0fi29k5ovlRc80sqqEiUfEe7ZJHPegR8ALLV3yySSoS/J1Var4TfP+xzW1Z4gV8x28wq8zJZCLzsZ80F7pDaYwpUaTw9fVaPPAWAD2uPRqSqBr0WbfRjq+5YhTCG6YcDUErEuKvDKleRK1Q1CwFA5NaqvD6DGpnwh/0oFN0RXrVgHlOlKAhVYmGtydhlKcRO4BhhzPZao1r8CsDIujaJ/9+VD392tMISOh7IKMduzDS/oZ1lltj/yZh+kanGww7UcIgFoYRRoBDi6hvwqlk2iwsrBWpUdbM2yjUHHM4XlyMRweTKI+MrWldFy8VJ9+UCWr0nWaTpouAMqPmDO1mG2CxYRXFGTS9eqHarW9zhxKo4eYtD9KaHsijqZEbYzJD+VIzt78Bo8EYuHyE6KOXahbGlKgqgOHFpngoRvTXbEo+rcZfyjlXgVzR8U6HOqx2c1ylrPmBXaqJlmK8im64XMEHDv8R/sgPynKAN7pH+jCid3qsMV5ZSdnv+F0E7KYC6tEU8d7AochrWl3XgVStBkNm8KVIQFNoRwRdZDwdoscAiAE9AcSNfNyR5xxt7leza9TkQEFaDAjeTzCOBDwl2q8YbJz8ZZ9wq2zbWiYab+k9ir5mUZVSPVWgZHqt+DuhXpp128joqtuESc89e0f69E33z1CKL4FUL8UcVpdm6rdM0Pu15+UARC8ynuLUYWQ4Sd/dkBJbpxVwez1Bh4sz+BvRPOMzoZapdnE5Ox9cSkO576gHfehkiOrOboP69+9MRkB+yDx4yC6zwJPGeCncrFnQKfRmFjoA/xWvpI+W7rBFPqqrA2LEzwR+Dd3TOJqobY3jhYX3zO8bdprQFx0C4dHBegntgC5DimlNUc45Dm6of10lVshPYoQZphLllWKaShBTNYljX+4pBUSRYRd0mJfMDC4rVc2wP6XVESRXouYLYcrPMJupbBmWs3z1Bc4KRbCHCN5ggR4wc1qhHnztmU1kvLoOUjOny0cRPca8sVtW8sd2gsyLhIAwm7KzHn+DN8GwPmR/ZnXssCYgj43tg0wWqypIq2tLRgvl4ooFNjiZKlRREK9JKKi8cSBETWr5v6KG6KDKx78eJ8aY/mNbwuoItVjIZdu4xicnBzZWT5y86ED0vVZ1zFJlhgF9qigj/dKc9BAjFWAU0duqz+huj0/ozKoWv7f8ajadLGeLTeZKERn+wHSLospcLGaruV5aFjbHoHj71OOYDnbUU7G9qbpvJjNuiG1PWdwgehuTzAtvYjvWTCxcKlqg0Wpfb/GQAmp025nNqH+DoWDGZjQ+oeWmchT29ErZGX2sUnxdoNIQeNikcMfou0sbwlSp2DJWTVkIi8kqSJFVkCCsgDvmOrpzUeK7eBxI2tzdQKNsuCHEGdCSq9p4uImwA0vYQYq0tfXfJJ+mquaKruNBqD0P7zLsqqoovo6lpXkOxc2ly0nuYxUU6SwaM6LP2Ewpz5ucTEg0efddek4J9WA3jOGHYZ1057PZO1J5M5gSPBj2qtqAHLoGCb4+5dMPP8m1ErMFojPxmh41txoaZeWWEicv0xJ5UDk0U2EN40VqzCHG3HNmz7yD8/ElMHrATMeiXJU496+SYhpxsQctSFta4B2b5GzK3BSQmyadPLEIrOyeaU3IJiYOpHJT49ckckKieA5KOIMUa5MKQxHtYrOQRulW7KIGfr00CMk3tkko4aMFhb9aEPtqgeOzaTYrcQhocCle5WSTZy/G514/lDwKeslMCrBfQ5biXV5pCsDgQnzKxdUimsRrTiPg5ibziYswIAf1gU0eN0ZWczyBooefGHLGrtM4Pjr4CTsvMMS7b+KIAGrFWohjomuPCeQ51sT0UHMt0Jxp7UYQxuXc82v8rLeiwapOo03eIpqljE//r8T4b0NUN6WRhf/8LAjs+O+Xz56W8d/38dxb/HeBOO2C8VV5Lq+gRpEBXh6N4bzevyvwnDw9/Z+3b0c+/vOfZyffbG6d0r9ewJ8vTv23b2v+788/Zubzv9Ii8rZghkuNImWzH9syhmL9lGGlsLI3phF1SswRVyqilIm0MMi7omGaxiuTrga/wWJwsfx523v6An4rEegC+Ug+GnYG3g49ZHc4mDZHEwVrDb8x3Fb72WCRKuKNGeO7JWNlbx7iezR+L3fcXJxZcb5b1Y0IPcGRHenTMKiSc+kqIZ0oBjUVW+WT71XCuZ5AlyhLXNc6jpH4ivDbsPEPRteD6XA8arVVWLXmvIr6Sf4eFNxvD3r+N8/VVYLb7SpBwa4S5OgrwUPqK0HevhIP178OqrduWtSq44c4OW3glsNJirU3xTRLFwxyhJ2X92sZzMNstXmMtXwAskh5/iNnsLw5ZVetqU8PmddHuZ9ivKaVJ9VrsGgSMfn2pctL8qFMoFcYFGpzYPEWJLY5KNRmV70Gi5KI6r42+z4bMan6/qfWmr6cx63/W8j3N6SRgf/0/OVL+/6Xl9+8LPX/e3kK6f9He5vfbgXfPv87/etvL14+L2Gh8sJCGeBPVXqDaJWs5qx0ChKU+klL8B+04C0BjmYhQYn65nmxneyb6GniUMdxWg/9ybr3Xq+WlhV31/e8Jr2jPOH6enqiJG9vn+Gdg5PL5Bvte97R+GK2nFh5peakLrO3xUzfe35N5cBAkKsxCJEumIZEq1pFvi7zLJQrSyrewvkNYvBXuVCxhER5pU5x8jSn7HgayCrWcNksZ8M/fxSubLQkHkHG/qCSvimCEpTCw0gN4oLT4PgU8C31FwNtGMAAs5O54i+SKnqaNpqFg21FNoPmiPcVeS24E7dJ3WFt0ZA+nwkwUFYpo+NbJc20tNI2TfVe+Y/BKmm1WYpQvep3of2d5r/6zW5PuxXaGPonssipQVW+NhGt6CsFZ0XT+JcXs0OJflWiX90E/apEriqRq0rkqhK5qkSuKpGrSuSqO0Kuul2QKoFok1FKAd8obBbYD0HWLBQnke3GwFgicCI7mmFtgKqbg0VdvG61Wwckhoqsju1a79qL2bw1xRBSUajuwFGuz6ajSQKUcnHA7kwQq6IYzcXRoiFvOyNvG0Qpm2hnNqTY5r2qIBJ1iSz9RSJLi34k4KiIUNuQL1aElYA9cJWjrUFP1/DWcFcOicY+mmfWZ10N4kUcw54xM3VWD6GZCgLq+Hq8Fb5gF63wuk51/BpUzXB7LWALfvBMowkVcs9rTdm3FtM5CJ5xj5qW2O4LoSmnZTn7o62Kb1YfP4p+eBQ9rhJOMpFN37hYUIWSWd9wEr0ZTLnbuVPr5hWwdwmYWs6ab4zHp9sORJjzeuF7xs5Bq++PbaLp/esj/rmC3YpC/9ncWjuGnOFgPLAkDaYvD0ZgHmy8W4MFLNi0FOS+PLCBhZt2H0iBoP6o5ZKAXjZ7H5ExrvusK0SEWT4R7wCPj+S5wvlqKYAfJjBP0uuTmREQapssKfADbvXo0gQ7vAXuuaAdSJFXCS/EnhN7Gm7xaD2RqmgAFQ2mH94PPig1OBemoabmgrZV0Sebamz5qLKlz3rr+07dN14dqC4VXF589qdeLgVaUai3SciKdwhc2ITJiJ4DztmhoIQdoGqZNA6mLYJFr/2700XTZHMxHyo259pFNBlIhzQfZxfLqUOt9HJjfogoymkwgDmxFasPC4WtxFETOGqqRyUAqqUiY6nS9waRlR/Xk/V2HaAof1nW4/WynyM0l3G6vBYyl3k6lweYq+BHcWPa/OlRuhQSE4WgyrtYgCAS4aRUlrVxpcwqSDLAlJlRIk3FXtuQU9Mxm1a5HwSdKfiSPYO/F+8n0ZhYjWeTDN4ofzmT9qf3awDm6nOhZy11atCnQtoyvFqbeK3mKZhamm2YlG2oZxtPh+5skKBl+9Pg6AoJK5CYGMxuUYDdFDIFIXE5+m4SMG9RSN4UMmti9UJvzo/Vi5lvDas3t8kntugbVhrmvJCSh85pP5z+t2cgjYklbBXlAoWyPIdSMKJUxdrs8igyZ5KaoaP7qDzyyU13fllFymvGeudwTbJy6N5J7JvojMXuhJMeOy4uLQ+e9Cy5PHoSqzh1MJuYmVszjIbl8f4xS5g+QA8ElKfdLoDJE8O/gQbTuGIQ5mCJJzfvI4I18h5fRD9UsjrNcSW4Gx/H/PZajQ69Ec+lKFAHZXg2fTJ79y4HYQnuoQF6FATKyax6PaiczGrREKLX60Yqo6+peFAuYnoTJgAKXKPZfnQkJhWiBhPUs2/x9Ea4eKLjaCDOSeIse9+PJtc84u0x9/jcpJFUj199f0k7mJVIXz5+RY/Xe56w7dCfHnRaTH3lqDSCInlERjciCrYkPts7oEr0lcCUkwO1RGX2c69PDrmRHwj3MEgob4HEKIE/AeG8Yv96G+Jrz81DQNYKzTRnNiuHIHXkl7Y8t9bQmdS7ODyTSMsjT5XZ37gtPBQdV0NXziUsyl2iougEFTzKraKjWMAoOsUYQko6kOR2ihLlgn0sBDlFGgJy6lagvcRpmzGveMa84r16FDkmEZEp8l495mCtUn7ZIEgsNi92dKsOf81DXO04OF73YzZwHxu6Le+bBgCNM+kOkWjCpBETxIeMtXEQGU3Ul4TEe4J/SaCe1QoDD8aRkIv7NWFdHCOZ4rrYsC5oRu4dktftJ6/rIlyDx8QTZxwz7AVE+s8TCvqrAj2u57AzNLYh5Akx9iJ8W8gWJ77FpRN7YjruRPOoN0IArDVA93UdXb6Ro6psUpGKmtPhYB6tLlngM48Ns80JilG0hpz6OqmCkDks/i85/nN8T/GfL54/ffE0Fv8ZBGX8530894b/cleBngXOjW4U7lkwnLJgdGiBcFX7MFe69dNgURFm6govtQJKrWjTeHgpFzAIvk/PJL+fcI3krYcvN1fzy9lgRDOAArOA7nKxGHx464F+P3lFPK18Y/aenhETu4oRJOSpJDk6dY0gzDKgNSGgtYxO/VNGp8ovfZ/BqdYYJPIeSMOYqm/xoILe4gMZXMDn2NALrn8OK9Rom55mbh5n2aPHzmBZM/WuwmWdVPBAOcafFRabkm7Hvsp8Qlhl4OvDCXx96HGvZdhrGfZahr2WYa9l2GsZ9lqGvZZhr3/isNcgT+v42Tj6y8AkYZZkwYC0saBjLseDEZmBkjeDfdhQXFO5FGVYFMI75s3Cr7D8wADe0d/4CXPdrtIJX85Jwvxrwn8jKxFOWMADulo8QTu8DasaEar9ajIaZjQVcnC393WjfKV4chUMzPhg1Q3bbRQG74jGndlJnUncoY2bJhgoHepq8CFiHiZYqvYDs6BjbirpCIQd1Ra/nY0Ws/lc2kCgcDdv4aVe+HwxG4yGg2hZhLYspFdQhL5ewebmFSwCk0I8yBIYPiv+LsDAfPjLkkbFDn8ZL6MiTedFVOEizVaF6Q60EGFWQhYtQlYWPf+wHBciSguIgoU+MC+4mhb7sECTF1GFi9DVC/8Cmsy0AGUQExvRGY652lD3PxE8QOgIbg+nozgsQIkjUOIIlDgCDxlH4NPACHwxKAKfMYjAZ4MhcAPogFtDDBARYYx+geuMnSACUnb6lvOhIgqwpm/dtOlbt9H0EnHgS0YckJaFRMgBthtH1tK0LbyZMwmmwLHXvi/0ghKm4M8FUwCCHI7xNAD0vTOhzmY0hc0pZ7GidnXcLLVGbfSe2g1xgWR6JQGdRWFT++tqTDsHF9wDBWD4suAUlDdLiaZQoimUaArAC7xjxmZi+MrD/07avyxPifY3Kp3U4bOq28ZF+W5VunM60zs+0JJW4rWpKeN0Ej1l/8Z5Yqgsy2vTVPboJJrK3o2t5CbLtekJK2kSNWGCRVrcAL02LWHzTqIlDOpIS6gd61HiVu4kQtx+TnvJB6oV2XR2JJWdxN5BrdqJPYMay9kXoqZkd1u8ZLkzA7TPMEhgEeJ7E1B4YFW0Vi/cgLCjfLqxWa5gzIf/CH/kN/HkVCMZgIkZzlMTOlksxs1IzTlt8mUn7vmo1yn1OjdJpfbloykUwHSidN50E2RT6g3maN0AdPvAMJ9siufmSasJ+fBmNImISKLbR4sRCRg9iSQMsdhkfTR4gaIQ3+1hwJN2iY2qzmhniUiTf7N6O4g0HI3GM4FV8gDPeE54lSQyw8JkhmuQ0dFiYJ+THy0GMxekgz0J6VxeDjPp0AA/wjPfGirNQ0KmSdqwGQgW1bwgMzkyUvXDrzqWWV+43LA6NDQuiaG5grF1PcGTqDP4ez5bLOOzvZapdnE5Ox9cSpcp31EPhr/xszzi7ew2PDyU2ZmMJgsGiwLZd5kvFmmMlwIq5WMVs7OYW3rwJ1/JiCU9fIlo1zXHiJ9xUbDO5GiidgYRLyyOFX/fsNPEzOUQCCbDtKWX0Fw1M6SY1hR1aungJsfJeCVWpZ/EZsrBOXKYKOYUq2iCdKtJDY2BTCWDOzkzGG6xt4ix4KgtyFdd4KyPajsXv9UW41/xw51dwbQ7G1V8WhOai41rkUczevM4W76UfnbDm63jQg7iUlanbZN33GqZUxek2Z2Y30GxqoK0uraEzTwfV8x67mSqUEVBvCb7amtn/1zjxNFVj7/Bu4S+PGuSBfLaJytClIu6qpVPJMYkxmmxH0VI8ZMMVTpOiAeEOW8MX+Pw0q6eol3iO63CmFrxGSKL8bWE4r6cMbQfNssTE2NKhmVezaaT5WyxyfzwIyOyU91pTpxQFrKwOYmIt0+xMrXAfRFoZ06IEe4/aycaqF1bJKJ25E1Y8ED9FWGHuqnmRFQkVhU/Ca8qCXKjzx15jUU5GkPvGUW9WQ/SKk56oEISC9jki4N1y4GQtDkSCEmt9vXWTWGSiuLIBQkCCvi2wTGob9K+wGpfkNJATZOparMCA/9T6lyqzp3FKYU444prz8MYWK1m5NPWGz2HKunSLmVjYhU4UK0S5acxQ7S+7VCnXXy5mRAFTuWQuyOowBIp8KEhBX5RQIHF2DoM66Q7n83ekcqbwZSgk45X1WbzoYs3fH3K1+sYLzQxYW0uDlcIM38WYCG5f8RC4gQRZLniXiJGL3ZyGC+Tm9e6VpQcGWMzkZ+qrV9kM4VfdT2eoEulssQ7062CQAqNIR0JMu0rPnTIQfsLxvlnrkTuBoi0nC3g2Ys1Ya8fxtkXhHPw/1lgJmY141OCJorYyZzgiQZ2YuK5WAmqeJugipZhIwasqMEqUqRyA3vscu75Ne6rp/DorPBajx39V/RzEcOfiW9rdaKabSXdEKIi5XIZQpTNwd3NmZdPoZ17/m/V4D5KbRFueceuStkrmop3LdCMHen+dMOGFPKCMhqzuXly8pe/OJukQnALNOlQelfdsEmFnKyMJp2eJtiSpoVb05/eSltyO3Bl9zMRYFygETdkPrdHWDbzHJWrwJzM45rv1MMsx+D+sBwXGtcsNvqO/NWy+eWOacV6OvOAa9MTh7Quk+0OZzBYEGoYF9FPDXRbPs7Hjf/M4gpuCwA6Hf/52cvn8LeF//zs2csS//k+niL4z5v4f9I8CncOmuTguB4etP6XQqrStGwgaFEDokK2Os0GOWjtdMJOq9mVSaYr23cE6loMhkuEr2KzFoWsXczoXodgWDKhGNKwVcDwsMvBh/GCViSnxO8IfYR5ldAZEmuZwQZqfA4ZyfvJ6ALdqyvsyADN4tgIggaQD1WyGIwmM4xSXNIY9fGSxqZs6odG3xkkzsc/D64nswWSoAFt/GATg3SmS8Y+Jw3Tck+he7Fq8XCVc43PKuLQYDxukp0dJ7SdVPBKQNzLwuxLmK9ExNg1T1e/QzqjFdRIfl5dDaYExDKiB5/CVWUypXQ4o5Vx7aJG2OqKBnvGC9RxNV8yAjcB8S4Af10QhzsH7HhhQPDPCyZSRLsyXHDm3radgAFOU79MpNQHD5X6uWGllvCjJfxoCT9awo+W8KMl/OjnAz+aMN3hicy9zHfOaC6WXXNgUoF/uIuwUi/eJ6exYy99etERn4yTyyrhh+iUr4PwiB+mkcFiLCcFBZ+fiPrCNm7dZq/fJrvHHdLutI56raM90gh7IU1XmfaPO716v9elGTGdtMPeflfbPkArWnPksA1DkEJ+EBEWkB7aqMofjZewHvyiKkgvP2XZtQq4XPJWcMF9EVQ768dHu629fodulGkzdzvHh+QwBAm14FVF1HQ1mOt7JxMUVxMFhllQQcTEQ2PFZItZvm2HFGg+2TAtn9XY6g2weNfDxV0HKjYPlm5gsRfkAY2RvtYb1mBMLyRO/bViOEozC128N/ljgzezGD/cpvA7os/ttpoHDfI6POg3CQzA5l6n1fuJ7PaP6mih0YdYbhjKabPVzsrqBBQyoSGrehZxsgo1yzrELJsXtJHPya2wi7GtSahGrTYw2l2dgxwrgS9n8m6r1U4rpmAq8TpiB1SUa1iCSCtUWqYrMUyzeMxrNtY9Yt0tuN7iGd3DtxhZa2CnxjDlQJ1aB1RKjcEc3SY22PXFOj5AaX+wByD73K4xxrOzEUT2YK4m9X6n0zzqsRk7PGqQ/eZBmxw2u91wr9llczi15+1D4kGzw8YdrmRHXTXn43Crkmart9/skL1mT1bLxiZkP2iGr5tkB5bcf5KdsNtskOMjGL9HDVg16UC1CIftdjPskKPmjz3SO0ZKvc7xQZdUmj+Gh+0DHO9Qd0uM/manc9xhS2wPi9CZoWtdsrc2UFcZDlmGQ/5JwiFTgv3cObSoRbEs9zqtvb0mHnY0+h3UiukEctxusokCR36rTcJGowOjnZaA56lPJ6QuyxzSFZxOSGFnr38Ic4k2GYkyz3xSh4kFBv5xv2dNWjAViTdnOLXAxPSvfhOmikpvv3Pc39snj7Vgq8ekHh4c+KLi5z4Jd3tQpL7frP8Tm/Bmv1XfB829Ex42MaHVxXmO6vz9NkyezUaVvG52WrsISq3pJaLGLZ+0dlVCq8FE0Q673WYXBmvz4ADkFh51YQo7hPoll+3O8Y8/+TgHtvd/6raQzZ84SZPCC5/0jxrNzsFPyNR+2Gm8CTtN3H/0gSadlPl0DR8m7PeOD4EFWl2xcFPsvXXZl/VytF8PFhdRRd4ISucrGGlyva8Lr22W5J26glilMZuVJPHSpkIia+H7GlosXkJXQGQRvpNJKKKrH1AEJaXaxK2SOiNWlK/NJtlmjdLsAPHdDc3hDKuMkTZaFKdtNhi/lpSPyYG9cVL58vFhiCnOhylFVKCk0E0+7I2ZyucIz1S4K/TejxtAEss64oG5QdHIXAEm66zHHWRaxlnffpz1lxbqvFY8Mvoh0QV5H5arbpOtqd0mLKX9NqwGXVjKWnWuNcNy2e3vbMJK2yeVw+NGyFfDZgjrHle/YVXp0pzHbbaQ72JtdBEMe7Dq7/R7sPpV3nRQe2/glvyYhMSrH8Aq59FKwtZRs8Mqbh0xvuqwG6jCrzYs4ZruTnDxAgWhDRv5FtqUkMu9EHcYSK91hAslW0TDHVz+kS8MCURDQGc3rDddsmD6AoFVz6EuUP3g1oO2c/ktdxmoab1YDLdyXdYsie0690yG1+r3iUcjAunsK2/tfTdbMNwJa53Cy3TngyU6RvE1Czom+72h0+LLhklQf5lJ1Vih8pLlq4RJVn+ZSdZYkHKRfWDh8tiV+y21LT5oUa1YKsvkGTnsgx7N/gl7hu56BP9lvV4ZX2Fw8T30mxYMjuM67OCF+i5HFNc7u/lDYmnIE4+FRWxe2CEt14j3zqByJ9He9NwgmfW7CcVWIa77k9FoPK14K8OK5KLHl4wysPomgdW5JHTX0alFmKAjSwXkxaZwkrgJqWrLhMaLnW0NdpjlmRzi0VLVMb+T5M1J1V5PTM7MzGuwpoJn4/M/Sd6rVO31xmTLzFyYLXkuSSr1VqPjm9MLPVxx4CyIWEu1lsR7lMi1BkuapDS7spMTeJ3JB+ZZgwvtbNYhm7kVAnkSS8rkS+Qr7Ni/VrSbWWU0XEzmS3IJ+sEKtEZY9v9vcD1gbz0g81XF+6u5zPg1pk1UJFi8T35/S52k0O/FAEylKV9VmA50ghuXbXOtOIXqoEDFYy7vnv/3txsfCfon5C6J92niNvrvNrMUcZfliadCX0hM499DT/8I/2P5RrPh6gq+s19Dl90PmhS4EMhXteViclXBKq2JjNXo+zWGgkG+3/6G/Oc/VgFjfslVwhj6jhL8K7x9/FdYhAaXm9MZVwjfPvZrGIBaYU2TGbi6iMkId1TRJfD9E9Y5WBf81P7z5VM+5VM+5VM+5VM+5VM+5VM+5VM+5VM+5VM+D/n5f+yIUa8AkAEA | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified iproutes GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified lte GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified management GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified multiap GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified qos GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified system GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified telephony GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified theme GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified tod GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified wireless GUI code
echo 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 | base64 -d | tar -xzf - -C /

if [ -f /www/docroot/booster.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local lp = require("web.lp")/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    -e 's#/booster.lp#/modals/wireless-boosters-boosters-modal.lp#' \
    /www/docroot/booster.lp > /www/docroot/modals/wireless-boosters-boosters-modal.lp
fi
if [ -f /www/docroot/boosterstatus.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster status screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/require("web.content_helper")/a local ui_helper = require("web.ui_helper")' \
    -e '/local type_convert/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#networkmap span12#networkmap#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/boosterstatus.lp > /www/docroot/modals/wireless-boosters-status-modal.lp
fi
if [ -f /www/docroot/wifidevices.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster Wi-Fi devices screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local content =/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/wifidevices.lp > /www/docroot/modals/wireless-boosters-devices-modal.lp
fi

grep -q swshaper /usr/share/transformer/mappings/uci/qos.map
if [ $? -eq 1 ]; then
  echo 066@$(date +%H:%M:%S): Configure transformer for QoS shaping
  sed \
    -e 's/"force_pcp" }/"force_pcp", "swshaper" }/' \
    -e '$a \\' \
    -e '$a \--uci.qos.swshaper' \
    -e '$a \local qos_swshaper = {' \
    -e '$a \  config = config_qos,' \
    -e '$a \  type = "swshaper",' \
    -e '$a \  options = { "enable", "max_bit_rate" }' \
    -e '$a \}' \
    -e '$a \mapper("uci_1to1").registerNamedMultiMap(qos_swshaper)' \
    -i /usr/share/transformer/mappings/uci/qos.map
  SRV_transformer=$(( $SRV_transformer + 1 ))
fi

echo 066@$(date +%H:%M:%S): Importing Traffic Monitor into Diagnostics
sed \
  -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
  -e '/^local attributes/i \    ngx.print(ui_helper.createHeader(T"Diagnostics", false, false, nil, nil) )' \
  -e '/"tabs-services/i <div class="modal-body update">\\' \
  -e '/^<div class="container toplevel">/d' \
  -e '/^<div class="row">/d' \
  -e '/^<div class="span11">/d' \
  -e '/^<fieldset>/,/^\\/d' \
  -e '/^<\/script>/a <\/script>\\' \
  -e '/^<\/script>/a <\/div>\\' \
  -e '/^<\/script>/,/^\\/d' \
  -e 's|tabs-services|tabs-diagnostics|' \
  -e 's|lp.include("footer.lp")|ngx.print(ui_helper.createFooter())|' \
  -e 's|800px;|900px;margin:0 auto;|' \
  -e 's|traffic.lp|modals/diagnostics-traffic-modal.lp|' \
  -e 's|<a href="%s" target="_self">|<a href="#" data-remote="%s">|' \
  /www/docroot/traffic.lp > /www/docroot/modals/diagnostics-traffic-modal.lp

echo 067@$(date +%H:%M:%S): Creating QoS Reclassify Rules modal
sed \
  -e 's/\(classify[\.-_%]\)/re\1/g' \
  -e 's/Classify/Reclassify/' \
  /www/docroot/modals/qos-classify-modal.lp > /www/docroot/modals/qos-reclassify-modal.lp

if [ -f /etc/init.d/cwmpd ]
then
  echo 070@$(date +%H:%M:%S): CWMP found - Leaving in GUI
else
  echo 070@$(date +%H:%M:%S): CWMP not found - Removing from GUI
  rm /www/cards/090_cwmpconf.lp
  rm /www/docroot/modals/cwmpconf-modal.lp
  uci -q delete web.cwmpconfmodal
  uci -q del_list web.ruleset_main.rules=cwmpconfmodal
  uci -q delete web.card_cwmpconf
fi

if [ $(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | wc -l) -eq 0 ]
then
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs not found - Removing from GUI
  rm /www/cards/010_fon.lp
  rm /www/docroot/modals/fon-modal.lp
  uci -q delete web.fon
  uci -q delete web.fonmodal
  uci -q del_list web.ruleset_main.rules=fon
  uci -q del_list web.ruleset_main.rules=fonmodal
  uci -q delete web.card_fon
else
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs FOUND - Leaving in GUI
fi

# Check all modals are enabled, except:
#  - diagnostics-airiq-modal.lp (requires Flash player)
#  - mmpbx-sipdevice-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - mmpbx-statistics-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - speedservice-modal.lp
#  - wireless-qrcode-modal.lp (fails with a nil password index error)
echo 070@$(date +%H:%M:%S): Checking modal visibility
for f in $(ls /www/docroot/modals | grep -E -v \(diagnostics-airiq-modal.lp\|mmpbx-sipdevice-modal.lp\|mmpbx-statistics-modal.lp\|speedservice-modal.lp\|wireless-qrcode-modal.lp\) )
do
  MODAL=$(basename $f)
  uci show web | grep -q "/modals/$MODAL"
  if [ $? -eq 1 ]
  then
    CREATE_RULE=y
    RULE=$(basename $f .lp | sed -e 's/-//g')
  else
    CREATE_RULE=n
    RULE=$(uci show web | grep "/modals/$MODAL" | grep -m 1 -v card_ | cut -d. -f2)
  fi
  if [ $CREATE_RULE = y ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL
    uci add_list web.ruleset_main.rules=$RULE
    uci set web.$RULE=rule
    uci set web.$RULE.target=/modals/$MODAL
    uci set web.$RULE.normally_hidden='1'
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL 
    uci -q delete web.$RULE.roles
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
done
uci commit web

echo 070@$(date +%H:%M:%S): Processing any additional cards
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="$(basename $CARDFILE)"
  CARDRULE=$(uci show web | grep "^web\.card_.*${CARDFILE#*_}" | cut -d. -f2)
  if [ -z "$CARDRULE" -o -z "$(uci -q get web.${CARDRULE}.modal)" ]
  then
    CARDRULE="card_$(basename ${CARDFILE#*_} .lp)"
    MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
    if [ -z "$MODAL" ]
    then
      MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
    fi
    MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
    uci set web.${CARDRULE}=card
    uci set web.${CARDRULE}.card="$CARD"
    uci set web.${CARDRULE}.modal="$MODALRULE"
    uci set web.${CARDRULE}.hide='0'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  fi
done

if [ "$(uci -q get web.broadbandstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling broadband-status.lua
  uci add_list web.ruleset_main.rules='broadbandstatusajax'
  uci set web.broadbandstatusajax='rule'
  uci set web.broadbandstatusajax.target='/ajax/broadband-status.lua'
  uci set web.broadbandstatusajax.normally_hidden='1'
  uci add_list web.broadbandstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.networkthroughputajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling network-throughput.lua
  uci add_list web.ruleset_main.rules='networkthroughputajax'
  uci set web.networkthroughputajax='rule'
  uci set web.networkthroughputajax.target='/ajax/network-throughput.lua'
  uci set web.networkthroughputajax.normally_hidden='1'
  uci add_list web.networkthroughputajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.devicesstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling devices-status.lua
  uci add_list web.ruleset_main.rules='devicesstatusajax'
  uci set web.devicesstatusajax='rule'
  uci set web.devicesstatusajax.target='/ajax/devices-status.lua'
  uci set web.devicesstatusajax.normally_hidden='1'
  uci add_list web.devicesstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.gatewaystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling gateway-status.lua
  uci add_list web.ruleset_main.rules='gatewaystatusajax'
  uci set web.gatewaystatusajax='rule'
  uci set web.gatewaystatusajax.target='/ajax/gateway-status.lua'
  uci set web.gatewaystatusajax.normally_hidden='1'
  uci add_list web.gatewaystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.internetstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling internet-status.lua
  uci add_list web.ruleset_main.rules='internetstatusajax'
  uci set web.internetstatusajax='rule'
  uci set web.internetstatusajax.target='/ajax/internet-status.lua'
  uci set web.internetstatusajax.normally_hidden='1'
  uci add_list web.internetstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.telephonystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling telephony-status.lua
  uci add_list web.ruleset_main.rules='telephonystatusajax'
  uci set web.telephonystatusajax='rule'
  uci set web.telephonystatusajax.target='/ajax/telephony-status.lua'
  uci set web.telephonystatusajax.normally_hidden='1'
  uci add_list web.telephonystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.ssidstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling ssid-status.lua
  uci add_list web.ruleset_main.rules='ssidstatusajax'
  uci set web.ssidstatusajax='rule'
  uci set web.ssidstatusajax.target='/ajax/ssid-status.lua'
  uci set web.ssidstatusajax.normally_hidden='1'
  uci add_list web.ssidstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi

SERIAL=$(uci get env.var.serial)
echo 080@$(date +%H:%M:%S): Change config export filename from config.bin to $VARIANT-$SERIAL-$VERSION@YYMMDD.bin
echo 080@$(date +%H:%M:%S): Add reset/upgrade warnings
sed \
  -e "s/=config.bin/=$VARIANT-$SERIAL-$VERSION@\" .. os.date(\"%Y%m%d\") .. \".bin/" \
  -e '/local basic =/i local lose_root_warning = { alert = { class = "alert-info", style = "margin-bottom:5px;" }, }' \
  -e '/T"Reset"/i \    html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Using the <b><i class=\\"icon-bolt\\" style=\\"width:auto;\\">\</i> Reset</b> button will cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script from the command line to factory reset and still retain root access.", lose_root_warning)' \
  -e '/T"Upgrade"/i \          html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Upgrading firmware using this method may cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script with the -f option from the command line to upgrade to the firmware and still retain root access.", lose_root_warning)' \
  -e '/"uci.versioncusto.override.fwversion_override"/a \   unhide_version = "rpc.gui.UnhideVersion",' \
  -e '/"Serial Number"/i \    html[#html + 1] = ui_helper.createLabel(T"tch-gui-unhide Version", content["unhide_version"], basic)' \
  -e '/Global Information/d' \
  -i /www/docroot/modals/gateway-modal.lp

if [ "$UPDATE_BTN" = y ]; then
  echo 080@$(date +%H:%M:%S): Add update available button
  sed \
    -e '/uci.version.version.@version\[0\].timestamp/a\    updatable = "rpc.gui.UpdateAvailable",' \
    -e '/isBridgedMode/i\        if cui.updatable == "1" then' \
    -e "/isBridgedMode/i\          html[#html + 1] = '<div class=\"btn-group\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn\"><i class=\"icon-info-sign orange\"></i>&nbsp;'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Update Available\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"caret\"></span></button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<ul class=\"dropdown-menu pull-right\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"https://github.com/seud0nym/tch-gui-unhide/releases/latest\" target=\"_blank\" rel=\"noopener noreferrer\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Open Download Page\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"/gateway.lp?ignore_update=1\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Ignore This Update\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</ul></div>'" \
    -e '/isBridgedMode/i\        end' \
    -e '/local getargs/a\if getargs and getargs.ignore_update then' \
    -e '/local getargs/a\  local proxy = require("datamodel")' \
    -e '/local getargs/a\  proxy.set("rpc.gui.IgnoreCurrentRelease", getargs.ignore_update)' \
    -e '/local getargs/a\end' \
    -i /www/docroot/gateway.lp
else
  echo 080@$(date +%H:%M:%S): Update available button will NOT be shown in GUI
fi

echo 080@$(date +%H:%M:%S): Add auto-refresh management
sed \
  -e '/<title>/a \<script>\\' \
  -e '/<title>/a \window.intervalIDs=new Array();\\' \
  -e '/<title>/a \function clearRegisteredIntervals(){\\' \
  -e '/<title>/a \  for(let i=0;i<window.intervalIDs.length;i++){\\' \
  -e '/<title>/a \    clearInterval(window.intervalIDs[i]);\\' \
  -e '/<title>/a \  }\\' \
  -e '/<title>/a \}\\' \
  -e '/<title>/a \var modalLoaded=false;\\' \
  -e '/<title>/a \$(document).bind("DOMSubtreeModified",function(){\\' \
  -e '/<title>/a \  if(!modalLoaded){\\' \
  -e '/<title>/a \    if($(".modal").length>0){\\' \
  -e '/<title>/a \      modalLoaded=true;\\' \
  -e '/<title>/a \      clearRegisteredIntervals();\\' \
  -e '/<title>/a \    }\\' \
  -e '/<title>/a \  }\\' \
  -e '/<title>/a \});\\' \
  -e '/<title>/a \</script>\\' \
  -i /www/docroot/gateway.lp

echo 080@$(date +%H:%M:%S): Fix uptime on basic Broadband tab
sed -e 's/days > 1/days > 0/' -i /www/docroot/broadband.lp

echo 085@$(date +%H:%M:%S): Decrease LOW and MEDIUM LED levels
sed -e 's/LOW = "2"/LOW = "1"/' -e 's/MID = "5"/MID = "4"/' -i /www/docroot/modals/gateway-modal.lp

echo 085@$(date +%H:%M:%S): Add Device Capabilities and LTE Band Selection to Mobile Configuration screen
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/local function get_session_info_section/i \local function get_device_capabilities_section(page, html)' \
  -e '/local function get_session_info_section/i \	local section = {}' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.arfcn_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"ARFCN Selection Support" .. ":", page.device.capabilities.arfcn_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.band_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Band Selection Support" .. ":", page.device.capabilities.band_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.manual_plmn_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Manual PLMN Selection" .. ":", page.device.capabilities.manual_plmn_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.strongest_cell_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Strongest Cell Selection" .. ":", page.device.capabilities.strongest_cell_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_modes ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported Modes" .. ":", page.device.capabilities.supported_modes))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_cdma ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported CDMA Bands" .. ":", page.device.capabilities.supported_bands_cdma))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_gsm ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported GSM Bands" .. ":", page.device.capabilities.supported_bands_gsm))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_lte ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported LTE Bands" .. ":", page.device.capabilities.supported_bands_lte))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.max_data_sessions ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Max Data Sessions" .. ":", page.device.capabilities.max_data_sessions))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_reading ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Reading" .. ":", page.device.capabilities.sms_reading))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_sending ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Sending" .. ":", page.device.capabilities.sms_sending))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if utils.Len(section) > 0 then' \
  -e '/local function get_session_info_section/i \		tinsert(html, "<fieldset><legend>" .. T"Device Capabilities" .. "</legend>")' \
  -e '/local function get_session_info_section/i \		tinsert(html, section)' \
  -e '/local function get_session_info_section/i \		tinsert(html, "</fieldset>")' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \end' \
  -e '/local function get_session_info_section/i \\' \
  -e '/local function get_profile_select/i \local function validate_lte_bands(device)' \
  -e '/local function get_profile_select/i \    local choices = setmetatable({}, untaint_mt)' \
  -e '/local function get_profile_select/i \    local b' \
  -e '/local function get_profile_select/i \    for b in string.gmatch(device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/local function get_profile_select/i \      choices[string.untaint(b)] = true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \    return function(value, object, key)' \
  -e '/local function get_profile_select/i \      local uv' \
  -e '/local function get_profile_select/i \      local concatvalue = ""' \
  -e '/local function get_profile_select/i \      if not value then' \
  -e '/local function get_profile_select/i \        return nil, T"Invalid input."' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      if type(value) == "table" then' \
  -e '/local function get_profile_select/i \        uv = value' \
  -e '/local function get_profile_select/i \      else' \
  -e '/local function get_profile_select/i \        uv = { value }' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      for i,v in ipairs(uv) do' \
  -e '/local function get_profile_select/i \        if v ~= "" then' \
  -e '/local function get_profile_select/i \          if concatvalue ~= "" then' \
  -e '/local function get_profile_select/i \            concatvalue = concatvalue.." "' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \          concatvalue = concatvalue..string.untaint(v)' \
  -e '/local function get_profile_select/i \          if not choices[v] then' \
  -e '/local function get_profile_select/i \            return nil, T"Invalid value."' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \        end' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      object[key] = concatvalue' \
  -e '/local function get_profile_select/i \      return true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \end' \
  -e '/local function get_profile_select/i \\' \
  -e '/p.mapParams\["interface_enabled"\]/a \		if utils.radio_tech_map[device.leds.radio] == "LTE" then' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapParams["lte_bands"] = device.uci_path .. "lte_bands"' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapValid["lte_bands"] = validate_lte_bands(device)' \
  -e '/p.mapParams\["interface_enabled"\]/a \		end' \
  -e '/"Access Technology"/a \	 			if utils.radio_tech_map[page.device.leds.radio] == "LTE" then' \
  -e '/"Access Technology"/a \	 				local b, lte_bands, lte_bands_checked = nil, {}, {}' \
  -e '/"Access Technology"/a \	 				for b in string.gmatch(page.device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/"Access Technology"/a \	 					lte_bands[#lte_bands+1] = { string.untaint(b), b }' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				if not page.content["lte_bands"] or page.content["lte_bands"] == "" then' \
  -e '/"Access Technology"/a \	 					for k,v in ipairs(lte_bands) do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[k] = string.untaint(v[1])' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				else' \
  -e '/"Access Technology"/a \	 					for b in string.gmatch(page.content["lte_bands"], "%d+") do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[#lte_bands_checked+1] = string.untaint(b)' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				tinsert(html, ui_helper.createCheckboxGroup(T"LTE Bands", "lte_bands", lte_bands, lte_bands_checked, {checkbox = { class="inline" }}, nil))' \
  -e '/"Access Technology"/a \	 			end' \
  -e '/^\s*get_device_info_section/a get_device_capabilities_section(page, html)' \
  -i /www/docroot/modals/lte-modal.lp

echo 085@$(date +%H:%M:%S): Add new Mobile tabs
sed \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-autofailover.lp", T"Auto-Failover"},' \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-operators.lp", T"Network Operators"},' \
  -i /www/snippets/tabs-mobiled.lp

echo 085@$(date +%H:%M:%S): Configure transformer for missing WanSensing settings
sed \
  -e 's/\("autofailover\)/\1", \1maxwait/' \
  -e '/timeout/ {n; :a; /timeout/! {N; ba;}; s/\("timeout"\)/\1, "fasttimeout"/;}' \
  -i /usr/share/transformer/mappings/uci/wansensing.map
SRV_transformer=$(( $SRV_transformer + 1 ))

if [ -z "$TITLE" ]
then
  echo 090@$(date +%H:%M:%S): Leaving browser tabs title unchanged
else
  echo 090@$(date +%H:%M:%S): Change the title in browser tabs to $TITLE
  for f in /www/docroot/gateway.lp /www/lua/hni_helper.lua /www/snippets/header.lp
  do
      sed -e "s,title>.*</title,title>$TITLE</title," -i $f
  done
  sed -e "s,<title>');  ngx.print( T\"Change password\" ); ngx.print('</title>,<title>$TITLE - Change Password</title>," -i /www/docroot/password.lp
fi

echo 090@$(date +%H:%M:%S): Change Gateway to $VARIANT
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/001_gateway.lp
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/003_internet.lp

sed -e "s/\(Modem\|Gateway\)/$VARIANT/g" -i /www/lua/telstra_helper.lua
sed -e '/local telstra_helper/,/local symbolv1/d' -e 's/symbolv1/"LAN"/' -i /www/cards/005_LAN.lp

echo 095@$(date +%H:%M:%S): Add forceprefix to transformer mapping for network interface
sed \
  -e 's/"reqprefix", "noslaaconly"/"reqprefix", "forceprefix", "noslaaconly"/' \
  -i /usr/share/transformer/mappings/uci/network.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 100@$(date +%H:%M:%S): Fix card visibility check
sed \
  -e '/local access/,/end/d' \
  -e 's/access and/session:hasAccess(card.modal) or/' \
  -i /www/lua/cards.lua

echo 100@$(date +%H:%M:%S): Remove obsolete help links
for m in $(grep -l 'local help_link = ' /www/docroot/modals/*)
do
  sed -e 's/\(local help_link = \)\(.*\)/\1nil/' -i "$m"
done

echo 100@$(date +%H:%M:%S): Update gateway card and status ajax with hardware temperature monitors
elements=""
for m in $(find /sys/devices/i2c-*/ -name temp1_input)
do
  elements="$elements\"$m\","
done
for f in /www/cards/001_gateway.lp /www/docroot/ajax/gateway-status.lua
do
  sed -e "s|\(^local temp1_input = {\)|\1$elements|" -i $f
done

echo 100@$(date +%H:%M:%S): Fix display bug on Mobile card and hide if no devices found
sed \
  -e '/<script>/a var divs = $("#mobiletab .content").children("div");if(divs.length>0){var p=$("#mobiletab .content .subinfos");divs.appendTo(p);}\\' \
  -e '/require("web.lte-utils")/a local result = utils.getContent("rpc.mobiled.DeviceNumberOfEntries")' \
  -e '/require("web.lte-utils")/a local devices = tonumber(result.DeviceNumberOfEntries)' \
  -e '/require("web.lte-utils")/a if devices and devices > 0 then' \
  -e '$ a end' \
  -i $(find /www/cards -type f -name '*lte.lp')

echo 100@$(date +%H:%M:%S): Add DHCPv6 Server status and prefix to LAN card 
sed \
  -e '/local dhcpState$/a local dhcp6State_text = ""' \
  -e '/local dhcpState$/a local dhcp6State' \
  -e '/local dhcpState$/a local slaacState_text = ""' \
  -e '/local dhcpState$/a local slaacState' \
  -e '/local dhcpState$/a local ipv6State_text' \
  -e '/@lan.dhcpv4/a \    ipv6State = "uci.network.interface.@lan.ipv6",' \
  -e '/@lan.dhcpv4/a \    dhcpv6State = "uci.dhcp.dhcp.@lan.dhcpv6",' \
  -e '/@lan.dhcpv4/a \    slaacState = "uci.dhcp.dhcp.@lan.ra",' \
  -e '/@lan.netmask/a \    ipv6prefix = "rpc.network.interface.@wan6.ip6prefix",' \
  -e 's/localdevIP = "uci/localdevIP = "rpc/' \
  -e 's/dhcpState/dhcp4State/g' \
  -e 's/DHCP enabled/DHCPv4 enabled/' \
  -e 's/DHCP disabled/DHCPv4 disabled/' \
  -e '/getExactContent/a \if mapParams["ipv6State"] == "" or mapParams["ipv6State"] == "1" then' \
  -e '/getExactContent/a \  if mapParams["dhcpv6State"] == "" or mapParams["dhcpv6State"] == "server" then' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 enabled"' \
  -e '/getExactContent/a \    dhcp6State = "1"' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \  if mapParams["slaacState"] == "" or mapParams["slaacState"] == "server" then' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA enabled"' \
  -e '/getExactContent/a \    slaacState = "1"' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA disabled"' \
  -e '/getExactContent/a \    slaacState = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    dhcp6State_text = T"IPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \if mapParams["ipv6prefix"] == "" then' \
  -e '/getExactContent/a \    ipv6State_text = T""' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    ipv6State_text = T"Prefix: "' \
  -e '/getExactContent/a \end' \
  -e '/createSimpleLight/a \            ui_helper.createSimpleLight(dhcp6State, dhcp6State_text)' \
  -e '/createSimpleLight/a \        )' \
  -e '/createSimpleLight/a \        if mapParams["ipv6State"] == "1" then' \
  -e '/createSimpleLight/a \            ngx.print(ui_helper.createSimpleLight(slaacState, slaacState_text))' \
  -e '/createSimpleLight/a \        end' \
  -e '/createSimpleLight/a \        ngx.print(' \
  -e 's/and netmask is/<br>Subnet Mask:/' \
  -e "s/IP is/IP:/" \
  -e "/<\/p>/i \            '<br>'," \
  -e "/<\/p>/i \            format(T'%s <nobr><strong style=\"letter-spacing:-1px\">%s</strong></nobr>', ipv6State_text, mapParams[\"ipv6prefix\"])," \
  -e '/^\\$/d' \
  -e "s/<strong>/<strong style=\"letter-spacing:-1px\">/g" \
  -i /www/cards/005_LAN.lp

echo 100@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
  -e '/getExactContent/a \ ' \
  -e '/getExactContent/a local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
  -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\)\(.*\)\( then\)/if not server_addr or \(server_addr\2\)\3/' \
  -e 's/\r//' \
  -i /www/cards/018_relaysetup.lp

echo 100@$(date +%H:%M:%S): Add SAMBA and DLNA server names to the Content Sharing card
sed \
  -e 's/\t/  /g' \
  -e '/Light(content\["dlna/i\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["samba_name"]))' \
  -e '/Light(content\["dlna/a\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["dlna_name"]))' \
  -i /www/cards/012_contentsharing.lp

echo 100@$(date +%H:%M:%S): Only show xDSL Config card if WAN interface is DSL 
sed \
 -e '/uci.xdsl.xdsl.@dsl0.enabled/a \      wan_ifname = "uci.network.interface.@wan.ifname",' \
 -e '/if session:hasAccess/i \local wan_ifname = content["wan_ifname"]' \
 -e 's/if session:hasAccess/if wan_ifname and (wan_ifname == "ptm0" or wan_ifname == "atmwan") and session:hasAccess/' \
 -i /www/cards/093_xdsl.lp

echo 100@$(date +%H:%M:%S): Enable cards in Bridge Mode
# https://www.crc.id.au/hacking-the-technicolor-tg799vac-and-unlocking-features/#mozTocId685948
sed -e '/if info.bridged then/,/end/d' -i /www/lua/cards_limiter.lua

echo 100@$(date +%H:%M:%S): Show individual helper status on NAT Helpers card
sed \
  -e '/local enabled/,/^  end/d' \
  -e '/convertResultToObject/a \  local htmlLeft = {}' \
  -e '/convertResultToObject/a \  local htmlRight = {}' \
  -e '/convertResultToObject/a \  local attributes = {' \
  -e '/convertResultToObject/a \    span = { style = "display:inline-block;font-size:smaller;letter-spacing:-1px;vertical-align:unset;" },' \
  -e '/convertResultToObject/a \  }' \
  -e '/convertResultToObject/a \  for _, v in ipairs(helper_uci_content) do' \
  -e '/convertResultToObject/a \      if v.intf ~= "loopback" then' \
  -e '/convertResultToObject/a \          local state = v.enable' \
  -e '/convertResultToObject/a \          local text' \
  -e '/convertResultToObject/a \          if state ~= "0" then' \
  -e '/convertResultToObject/a \              text =" enabled<br>"' \
  -e '/convertResultToObject/a \              state = "1"' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              text = " disabled<br>"' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \          if #htmlRight >= #htmlLeft then' \
  -e '/convertResultToObject/a \              htmlLeft[#htmlLeft+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              htmlRight[#htmlRight+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \      end' \
  -e '/convertResultToObject/a \  end' \
  -e '/divtable/,/div>/d' \
  -e '/card_bg/a \            <div style="display:flex;flex-direction:row;">\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlLeft);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlRight);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \            </div>\\' \
  -i /www/cards/092_natalghelper.lp

echo 105@$(date +%H:%M:%S): Changing description of router DNS Server from Telstra to $VARIANT 
sed -e "s/Telstra/$VARIANT/" -i /www/docroot/modals/ethernet-modal.lp

if [ -f ipv4-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv4 DNS Servers
  sed -e 's/\r//g' ipv4-DNS-Servers | sort -r | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      sed -e "/127.0.0.1/a \    {\"$ip\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

if [ -f ipv6-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv6 DNS Servers
  sed -e 's/\r//g' ipv6-DNS-Servers | sort | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      ipv6=$(echo $ip  | tr ':' '-')
      sed -e "/2001-4860-4860--8888/i \    {\"$ipv6\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

echo 105@$(date +%H:%M:%S): Added switch to enable/disable DHCPv6 Server and SLAAC
sed \
 -e '/"\.dhcpv4"/a \    dhcpv6State = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".dhcpv6",' \
 -e '/"\.dhcpv4"/a \    slaacState = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".ra",' \
 -e 's/dhcpv4Stateselect/dhcpStateselect/' \
 -e 's/DHCP Server/DHCPv4 Server/' \
 -e 's/\(ui_helper.createSwitch(T"IPv6 state", "localIPv6", content\["localIPv6"\]\)/\1, switch_class_enable/' \
 -e '/local stdattributes/i \              local switch_class_enable = {' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  class = "monitor-changes",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e '/Lease time/a \                 ,[[<div class="monitor-localIPv6 monitor-1 monitor-hidden-localIPv6">]]' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"DHCPv6 Server", "dhcpv6State", content["dhcpv6State"], switchDHCP)' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"SLAAC + RA", "slaacState", content["slaacState"], switchDHCP)' \
 -e '/Lease time/a \                 ,[[</div>]]' \
 -e '/gVIES(/a \    dhcpv6State = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    slaacState = gVIES(dhcpStateselect),' \
 -i /www/docroot/modals/ethernet-modal.lp

 if [ "$VERSION" != "18.1.c.0462" ]
then
  if [ "$(uci get dumaos.tr69.dumaos_enabled)" = '1' ]
  then
    echo 105@$(date +%H:%M:%S): Add DumaOS button
    sed \
      -e "/id=\"basicview\"/i\            html[#html + 1] = '<a href=\"desktop/index.html#com.netdumasoftware.desktop\" class=\"btn\" id=\"dumaos\">'" \
      -e "/id=\"basicview\"/i\            html[#html + 1] = T\"DumaOS\"" \
      -e "/id=\"basicview\"/i\            html[#html + 1] = '</a>'" \
      -e '/<div class="header span12">/a <script>if(window.self !== window.top){$("div.header").hide();}</script>\\' \
      -i /www/docroot/gateway.lp
  else
    echo 105@$(date +%H:%M:%S): DumaOS button NOT added - DumaOS is disabled
  fi
fi

echo 105@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
 -e '/local function getRelayBackUpValues/i local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
 -e '/local function getRelayBackUpValues/i \ ' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\[1\].value\)\( ==.*\)\( then\)/if not server_addr or \(server_addr\[1\].value\2\)\3/' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\[1\].value ~= ""\)\(.*\)\( then\)/if server_addr and server_addr\[1\].value ~= ""\2\3/' \
 -i /www/docroot/modals/relay-modal.lp

echo 106@$(date +%H:%M:%S): Fix setting of firewall forwarding rule when NAT enabled/disabled
for r in dhcp pppoa pppoe static
do
  sed -e '/-- 106-BEGIN/d' -e '/-- 106-END/d' -i /www/snippets/internet-${r}-routed.lp
done

echo 110@$(date +%H:%M:%S): Enable various things that only the guest role\(!!!\) was allowed to do or see
for f in $(ls /www/docroot/modals/gateway-modal.lp /www/docroot/modals/internet-modal.lp /www/docroot/modals/wireless-modal.lp /www/docroot/modals/wanservices-modal.lp /www/snippets/tabs-diagnostics.lp /www/snippets/tabs-voice.lp)
do
  sed -e 's/\(if [^ ]*role[^=]*==[^"]*"\)\(guest\)\("\)/\1admin\3/g' -i $f
done
sed \
  -e 's/if role ~= "admin"/if role == "admin"/' \
  -e 's/if w\["provisioned"\] == "1"/if role == "admin" or w\["provisioned"\] == "1"/' \
  -i /www/docroot/modals/mmpbx-service-modal.lp

echo 115@$(date +%H:%M:%S): Show firewall default incoming policy and rules count on card
sed \
  -e '/^local format/a \local proxy = require("datamodel")' \
  -e '/firewall\.mode/a \    enabledRuleCount = "rpc.gui.firewall.enabledRuleCount",' \
  -e '/firewall\.mode/a \    ipv4PacketFilterCount = "rpc.gui.firewall.ipv4PacketFilterCount",' \
  -e '/firewall\.mode/a \    ipv6PacketFilterCount = "rpc.gui.firewall.ipv6PacketFilterCount",' \
  -e '/firewall\.mode/a \    fwd_ipv4_rules = "uci.firewall.userredirectNumberOfEntries",' \
  -e '/firewall\.mode/a \    fwd_ipv6_rules = "uci.firewall.pinholeruleNumberOfEntries",' \
  -e '/firewall\.mode/a \    lanIpv6Enabled = "uci.network.interface.@lan.ipv6",' \
  -e '/firewall\.mode/a \    pinholeEnabled = "uci.firewall.rulesgroup.@pinholerules.enabled",' \
  -e '/getExactContent/a \local fw_incoming_policy' \
  -e '/getExactContent/a \local zones = content_helper.convertResultToObject("uci.firewall.zone.", proxy.get("uci.firewall.zone."))' \
  -e '/getExactContent/a \for key,zone in ipairs(zones) do' \
  -e '/getExactContent/a \  if zone.wan == "1" then' \
  -e '/getExactContent/a \    fw_incoming_policy = string.untaint(zone.input)' \
  -e '/getExactContent/a \    break' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \local fw_status_light_map = {' \
  -e '/getExactContent/a \  DROP = "1",' \
  -e '/getExactContent/a \  REJECT = "2",' \
  -e '/getExactContent/a \  ACCEPT = "4"' \
  -e '/getExactContent/a \}' \
  -e 's/T"low"/T"Low"/' \
  -e 's/T"normal"/T"Normal"/' \
  -e 's/T"high"/T"High"/' \
  -e 's/T"user"/T"User Defined"/' \
  -e "/subinfos/i \    ');" \
  -e '/subinfos/i \    local fw_status = format("Default Incoming Policy: <strong>%s</strong>", fw_incoming_policy)' \
  -e '/subinfos/i \    ngx.print(ui_helper.createSimpleLight(fw_status_light_map[fw_incoming_policy], fw_status))' \
  -e "/subinfos/i \    ngx.print('\\\\" \
  -e '/Firewall level/a \            local pkt_filter_count = content.ipv4PacketFilterCount + content.ipv6PacketFilterCount' \
  -e '/Firewall level/a \            local pkt_filter_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-iptables-modal.lp\\" data-id=\\"firewall-iptables-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Packet Filter rule</strong> active","<strong %1$s>%2$d Packet Filter rules</strong> active", pkt_filter_count), pkt_filter_modal_link, pkt_filter_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local rules_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-rules-modal.lp\\" data-id=\\"firewall-rules-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Firewall rule</strong> active","<strong %1$s>%2$d Firewall rules</strong> active", content.enabledRuleCount), rules_modal_link, content.enabledRuleCount)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local fwd_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-port-forwarding-modal.lp\\" data-id=\\"firewall-port-forwarding-modal\\""' \
  -e '/Firewall level/a \            local fwd_count = tonumber(content.fwd_ipv4_rules)' \
  -e '/Firewall level/a \            if content.lanIpv6Enabled ~= "0" and content.pinholeEnabled == "1" then' \
  -e '/Firewall level/a \              fwd_count = fwd_count + tonumber(content.fwd_ipv6_rules)' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Port Forwarding rule</strong> defined","<strong %1$s>%2$d Port Forwarding rules</strong> defined", fwd_count), fwd_modal_link, fwd_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local nat_alg_card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/Firewall level/a \            if nat_alg_card_hidden and nat_alg_card_hidden[1] and nat_alg_card_hidden[1].value == "1" then' \
  -e '/Firewall level/a \              local alg_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/nat-alg-helper-modal.lp\\" data-id=\\"nat-alg-helper-modal\\""' \
  -e '/Firewall level/a \              local helper_uci_path = "uci.firewall.helper."' \
  -e '/Firewall level/a \              local helper_uci_content = proxy.get(helper_uci_path)' \
  -e '/Firewall level/a \              helper_uci_content = content_helper.convertResultToObject(helper_uci_path,helper_uci_content)' \
  -e '/Firewall level/a \              local disabled_count = 0' \
  -e '/Firewall level/a \              local enabled_count = 0' \
  -e '/Firewall level/a \              for _,v in ipairs(helper_uci_content) do' \
  -e '/Firewall level/a \                if v.intf ~= "loopback" then' \
  -e '/Firewall level/a \                  if v.enable ~= "0" then' \
  -e '/Firewall level/a \                    enabled_count = enabled_count + 1' \
  -e '/Firewall level/a \                   else' \
  -e '/Firewall level/a \                    disabled_count = disabled_count + 1' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              if enabled_count > 0 then' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> enabled","<strong %1$s>%2$d NAT Helpers</strong> enabled", enabled_count), alg_modal_link, enabled_count)' \
  -e '/Firewall level/a \              else' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> disabled","<strong %1$s>%2$d NAT Helpers</strong> disabled", disabled_count), alg_modal_link, disabled_count)' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            end' \
  -e '/numrules/,/numrules_v6/d' \
  -e '/if content.mode/,/end/d' \
  -i /www/cards/008_firewall.lp

echo 115@$(date +%H:%M:%S): Fix NAT ALG modal errors and include in Firewall tabs if card hidden
sed \
  -e '/^local ui_helper/i \local proxy = require("datamodel")' \
  -e 's/T"Enable"/T"Enabled"/' \
  -e 's/, readonly="true"/ /' \
  -e 's/unique/readonly/' \
  -e 's/string.upper/string.lower/' \
  -e '/attr = { input = { class="span1"/i \    readonly = true,' \
  -e '/^local hlp_attributes/i \table.insert(hlp_columns, table.remove(hlp_columns, 1))' \
  -e '/return true/i \  if object["enable"] == "" then' \
  -e '/return true/i \    object["enable"] = "1"' \
  -e '/return true/i \  end' \
  -e '/return true/i \  object["helper"] = string.lower(object["helper"])' \
  -e '/--Look for the enable set to nothing/,/^end/d' \
  -e '/^local UI_helper/i \local proxy = require("datamodel")' \
  -e "/modal-body/a \  ');" \
  -e '/modal-body/a \  local card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/modal-body/a \  if card_hidden and card_hidden[1] and card_hidden[1].value == "1" then' \
  -e '/modal-body/a \    local lp = require("web.lp")' \
  -e '/modal-body/a \    lp.setpath("/www/snippets/")' \
  -e '/modal-body/a \    lp.include("tabs-firewall.lp")' \
  -e '/modal-body/a \  end' \
  -e "/modal-body/a \  ngx.print('\\\\" \
  -e "/createTable/i \        ngx.print('<legend>');  ngx.print( T'NAT Helpers (ALG\\\\'s)' ); ngx.print('</legend>');" \
  -e "s/\"NAT Helpers (ALG's)\"/\"Firewall\"/" \
  -e 's/Dest Port/Destination Port/' \
  -i /www/docroot/modals/nat-alg-helper-modal.lp

echo 115@$(date +%H:%M:%S): Remove Port Forwarding from WAN Services - Moved to Firewall tab
sed \
  -e '/-- In UCI/,/local pfw_data,/d' \
  -e '/local ipv6Data/,/local pfw_v6_data,/d' \
  -e "/Port forwarding table/,/ngx.print('/d" \
  -e '/if ipv6Data.lanIpv6Enabled/,/end$/d' \
  -e '/local function getConfPath/,/local uri = ngx.var.uri/d' \
  -e 's/\(local help_link =\).*/\1 nil/' \
  -e '/if #alg_sip_paths/,/ end /d' \
  -e '/if zonenum ~= "" /,/ end /d' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 115@$(date +%H:%M:%S): Improving WAN Services card
sed \
  -e 's/class = "span4",//' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  upnp_status = "uci.upnpd.config.enable_upnp",' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  dnsrule_count = "uci.dhcp.dnsruleNumberOfEntries",' \
  -e '/local n_upnp_rules/a \    local n_dns_rules = tonumber(wan_services_data["dnsrule_count"])' \
  -e '/local n_upnp_rules/a \    local upnpstate' \
  -e '/local n_upnp_rules/a \    if wan_services_data["upnp_status"] == "1" then' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP enabled"' \
  -e '/local n_upnp_rules/a \    else' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP disabled"' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/local n_upnp_rules/a \    local wol = io.open("/lib/functions/firewall-wol.sh", "r") and proxy.get("uci.wol.config.")' \
  -e '/local n_upnp_rules/a \    local wolstate = ""' \
  -e '/local n_upnp_rules/a \    if wol then' \
  -e '/local n_upnp_rules/a \      wolenabled = proxy.get("uci.wol.config.enabled")' \
  -e '/local n_upnp_rules/a \      if wolenabled then' \
  -e '/local n_upnp_rules/a \        if wolenabled[1].value == "1" then' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("1", "WoL over Internet enabled")' \
  -e '/local n_upnp_rules/a \        else' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("0", "WoL over Internet disabled")' \
  -e '/local n_upnp_rules/a \        end' \
  -e '/local n_upnp_rules/a \      end' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/<p>/a \            wolstate,' \
  -e '/<p>/a \            ui_helper.createSimpleLight(ddns_light_map[format("%s", wan_services_data["upnp_status"])] or "0", upnpstate),' \
  -e '/firewall_rules/d' \
  -e '/port forwarding<\/strong> rule /,/subinfos/d' \
  -e "/modal\"', n_upnp_rules/a            '<br>'," \
  -e "/modal\"', n_upnp_rules/a            format( N(\"<strong %s>%d DNS rule</strong> defined\"," \
  -e "/modal\"', n_upnp_rules/a                      \"<strong %s>%d DNS rules</strong> defined\", n_dns_rules)," \
  -e "/modal\"', n_upnp_rules/a                      'class=\"modal-link\" data-toggle=\"modal\" data-remote=\"modals/wanservices-modal.lp\" data-id=\"wanservices-modal\"', n_dns_rules)," \
  -e 's|<p></p>||' \
  -e 's|upnp</strong> rule |UPnP rule</strong> |' \
  -e 's|upnp</strong> rules|UPnP rules</strong>|' \
  -i /www/cards/007_wanservices.lp

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule.
sed \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule_v6.
sed \
  -e '/src = {/i \      name = {' \
  -e '/src = {/i \        access = "readWrite",' \
  -e '/src = {/i \        type = "string",' \
  -e '/src = {/i \      },' \
  -e '/src =  function(mapping, paramname, k/i \    name =  function(mapping, paramname, key)' \
  -e '/src =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/src =  function(mapping, paramname, k/i \    end,' \
  -e '/src =  function(mapping, paramname, p/i \    name =  function(mapping, paramname, paramvalue, key)' \
  -e '/src =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/src =  function(mapping, paramname, p/i \    end,' \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule_v6.map
SRV_transformer=$(( $SRV_transformer + 1 ))

SRV_firewall=0
# Version 2021.02.22 set an incorrect value for synflood_rate, so have to fix it
synflood_rate="$(uci -q get firewall.@defaults[0].synflood_rate)" 
if [ ! -z "$synflood_rate" ]; then
  echo $synflood_rate | grep -q -E '^[0-9]+/s$'
  if [ $? = 1 ]; then
    synflood_rate="$(echo $synflood_rate | grep -o -E '^[0-9]+')" 
    uci set firewall.@defaults[0].synflood_rate="$synflood_rate/s"
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
fi
# Version 2021.02.22 allowed setting of tcp_syncookies but it is not enabled in kernel, so have to remove it
if [ ! -z "$(uci -q get firewall.@defaults[0].tcp_syncookies)" ]; then
  uci -q delete firewall.@defaults[0].tcp_syncookies
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ $SRV_firewall -gt 0 ]; then
  uci commit firewall
  /etc/init.d/firewall reload 2> /dev/null
fi

echo 120@$(date +%H:%M:%S): Show the hidden Telephony tabs and fix default tab
sed \
  -e 's/\(--\)\( *{"mmpbx-service-modal.lp\)/  \2/' \
  -e '/mmpbx-contacts/d' \
  -e '/T"Service"/i \    {"mmpbx-inoutgoingmap-modal.lp", T"In\/Outgoing Map"},' \
  -e '/T"Service"/a \    {"mmpbx-codec-modal.lp", T"Codecs"},' \
  -e '/T"Service"/a \    {"mmpbx-dial-plan-modal.lp", T"Dial Plans"},' \
  -e '/T"DECT"/a    \    {"mmpbx-contacts-modal.lp", T"Phone Book"},' \
  -i /www/snippets/tabs-voice.lp
# Default telephony tab is DECT!!! 
if [ "$VERSION" != "18.1.c.0462" ]
then
  sed \
    -e 's/if emission_state == "1"/if mmpbx_state == "1"/' \
    -e 's/modalPath = "\/modals\/mmpbx-dect-modal.lp"/modalPath = "\/modals\/mmpbx-info-modal.lp"/' \
    -i /www/cards/008_telephony.lp
else
  sed \
    -e 's/if mmpbx_state == "1" and (emission_state == "1" or emission_state == "0")/if mmpbx_state == "0"/' \
    -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/,/elseif session:hasAccess("\/modals\/mmpbx-global-modal.lp") then/d' \
    -i /www/cards/008_telephony.lp
fi

echo 125@$(date +%H:%M:%S): Display Telephony tabs even when mmpbx disabled
sed \
 -e '/if mmpbx_state == "1" then/d' \
 -e '/elseif session:hasAccess/,/end/d' \
 -i /www/snippets/tabs-voice.lp

if [ $SIP_PWDS = y ]; then
  echo 125@$(date +%H:%M:%S): Always display decrypted SIP passwords
  sed \
  -e '/local mask_password/d' \
  -e '/if password == mask_password then/,/end/d' \
  -e '/v\[scns\["password"\]\] = mask_password/d' \
  -e '/ipairs(v)/a if sip_columns[j].name == "password" then' \
  -e '/ipairs(v)/a   w = proxy.get("rpc.gui.pwd.@" .. v[scns["profile"]] .. ".password")[1].value' \
  -e '/ipairs(v)/a   sip_columns[j].type = "text"' \
  -e '/ipairs(v)/a end' \
  -i /www/docroot/modals/mmpbx-profile-modal.lp
fi

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  echo 125@$(date +%H:%M:%S): Remove non-existing FXS2 device CODEC config
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 125@$(date +%H:%M:%S): Add missing insert option on dial plan entries
sed \
  -e 's/registerMultiMap/registerNamedMultiMap/' \
  -e 's/modify", "remove/modify", "insert", "remove/' \
  -i /usr/share/transformer/mappings/uci/mmpbx.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 130@$(date +%H:%M:%S): Add missing icons on Diagnostics card and change default tab to Traffic Monitor
sed \
 -e 's^"Diagnostics", "modals/diagnostics-xdsl-modal.lp"^"Diagnostics", "modals/diagnostics-traffic-modal.lp"^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-xdsl\)^<td><div data-toggle="modal" data-remote="modals/diagnostics-traffic-modal.lp" data-id="diagnostics-traffic-modal"><img href="#" rel="tooltip" data-original-title="TRAFFIC" src="/img/light/Profit-01-WF.png" alt="traffic"></div></td>\\\n\1^' \
 -e 's^\(alt="ping/trace"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/logviewer-modal.lp" data-id="logviewer-modal"><img href="#" rel="tooltip" data-original-title="LOGVIEWER" src="/img/light/log-viewer.png" alt="logviewer"></div></td>\2^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-connection\)^<td><div data-toggle="modal" data-remote="modals/log-connections-modal.lp" data-id="log-connections-modal"><img href="#" rel="tooltip" data-original-title="CONNECTIONS" src="/img/light/Data-Sync-WF.png" alt="connections"></div></td>\\\n\1^' \
 -e 's^\(alt="network"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/diagnostics-tcpdump-modal.lp" data-id="diagnostics-tcpdump-modal"><img href="#" rel="tooltip" data-original-title="TCPDUMP" src="/img/light/tcp-dump.png" alt="tcpdump"></div></td>\2^' \
 -e 's|\(alt="\)\([^/"]*\)|class="diag-\2" \1\2|g' \
 -i /www/cards/009_diagnostics.lp

echo 130@$(date +%H:%M:%S): Rename Diagnostics tabs and add Connections and Traffic Monitor tabs
sed \
 -e 's/"Connection"/"Connection Check"/' \
 -e 's/Log viewer/Log Viewer/' \
 -e 's/"Network"/"Ports"/' \
 -e 's/Tcpdump/TCP Dump/' \
 -e '/xdsl-modal/i       \    {"diagnostics-traffic-modal.lp", T"Traffic Monitor"},'  \
 -e '/connection-modal/a \    {"log-connections-modal.lp", T"Network Connections"},'  \
 -e '/string.len(ngx.var.args)/,/^end/d' \
 -e '/airiq/,/^[ ]*$/d' \
 -i /www/snippets/tabs-diagnostics.lp
sed \
 -e 's/tabs-management/tabs-diagnostics/' \
 -e 's/"Management"/"Diagnostics"/' \
 -i /www/docroot/modals/log-connections-modal.lp

echo 130@$(date +%H:%M:%S): Fix headings on Diagnostics tabs
for m in $(grep -L 'createHeader(T"Diagnostics"' /www/docroot/modals/diagnostics-*)
do 
    sed -e 's/\(createHeader(\)\([T]*\)\("Diagnostics\)\([^"]*\)\("\)/\1T\3\5/' -i $m
done

echo 135@$(date +%H:%M:%S): Add missing DHCP Relay configuration
sed \
 -e '/local format/a \local exists = proxy.get("uci.dhcp.relay.@relay.server_addr")' \
 -e '/local format/a \if not exists then' \
 -e '/local format/a \  proxy.add("uci.dhcp.relay.","relay")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.server_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.local_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.interface","")' \
 -e '/local format/a \  proxy.apply();' \
 -e '/local format/a \end' \
 -i /www/docroot/modals/relay-modal.lp


echo 140@$(date +%H:%M:%S): Sort the device map hosts by name
sed \
 -e 's/loadTableData("rpc.hosts.host.", dcols)/loadTableData("rpc.hosts.host.", dcols, nil, "FriendlyName")/' \
 -i /www/snippets/networkmap.lp

echo 145@$(date +%H:%M:%S): Allow increase in WiFi output power to +6dBm
sed \
 -e '/{"-6", T"25%"}/a \    {"-5", T"&nbsp;-5 dBm"},' \
 -e '/{"-6", T"25%"}/a \    {"-4", T"&nbsp;-4 dBm"},' \
 -e '/{"-2", T"75%"}/a \    {"-1", T"&nbsp;-1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+1", T"&nbsp;+1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+2", T"&nbsp;+2 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+3", T"&nbsp;+3 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+4", T"&nbsp;+4 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+5", T"&nbsp;+5 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+6", T"&nbsp;+6 dBm"},' \
 -e 's/-6", T"25%/-6", T"\&nbsp;-6 dBm/' \
 -e 's/-3", T"50%/-3", T"\&nbsp;-3 dBm/' \
 -e 's/-2", T"75%/-2", T"\&nbsp;-2 dBm/' \
 -e 's/0", T"100%/0", T"\&nbsp;0 dBm/' \
 -e 's/T"Output Power"/T"Output Power Adjustment"/' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Add cogs to card headers
for f in $(grep -l createCardHeaderNoIcon /www/cards/*)
do
  sed -e 's/createCardHeaderNoIcon/createCardHeader/' -i $f
done
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/switchName, content\["cwmp_state"\], {input = {id = "cwmp_card_state"}}/nil, nil, nil/' -i /www/cards/090_cwmpconf.lp

echo 150@$(date +%H:%M:%S): Fix mobile signal placement
sed \
 -e '/^<\/script>/i var div = document.querySelector("#mobiletab").querySelector(".header-title");\\' \
 -e '/^<\/script>/i var signal = document.querySelector("#signal-strength-indicator-small");\\' \
 -e '/^<\/script>/i div.parentNode.insertBefore(signal, div.nextSibling);\\' \
 -i $(find /www/cards -type f -name '*lte.lp')
sed \
 -e '$ a #signal-strength-indicator-small .absolute{float:right;margin-top:unset;margin-left:unset;height:unset;padding-left:10px;width:unset;position:relative;}' \
 -i /www/docroot/css/mobiled.css

echo 150@$(date +%H:%M:%S): Handle Wi-Fi switch
sed \
 -e '/Take the input/i \if ngx.var.request_method == "POST" then' \
 -e '/Take the input/i \  local radio_state = ngx.req.get_post_args().set_wifi_radio_state' \
 -e '/Take the input/i \  if radio_state then' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_2G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_5G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.apply()' \
 -e '/Take the input/i \     ngx.exit(ngx.HTTP_NO_CONTENT)' \
 -e '/Take the input/i \  end' \
 -e '/Take the input/i \end' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Handle Telephony switch
 sed \
  -e '/local sipnet_options/i \if ngx.var.request_method == "POST" then' \
  -e '/local sipnet_options/i \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/local sipnet_options/i \  if mmpbx_enable then' \
  -e '/local sipnet_options/i \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/local sipnet_options/i \    proxy.apply()' \
  -e '/local sipnet_options/i \    ngx.sleep(20)' \
  -e '/local sipnet_options/i \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/local sipnet_options/i \  end' \
  -e '/local sipnet_options/i \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 155@$(date +%H:%M:%S): Make Content Sharing Screen nicer
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/<form class/<form id="content-sharing-modal" class/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/T"General status"/d' \
  -e '/"File Server Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"File Server Status" .. "<\/legend>")' \
  -e '/"File Server descript/a\                tinsert(html, "<\/fieldset>")' \
  -e '/DLNA Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"DLNA Server Status" .. "<\/legend>")' \
  -i /www/docroot/modals/contentsharing-modal.lp

else # THEME_ONLY = y
  echo 160@$(date +%H:%M:%S): Restoring CSS files to apply theme change
  cp -p /rom/www/docroot/css/gw.css /rom/www/docroot/css/gw-telstra.css /rom/www/docroot/css/responsive.css /www/docroot/css/
fi # End of if [ THEME_ONLY = n ]   

echo 160@$(date +%H:%M:%S): Adding or updating card background icons
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf012;"/' -i $(ls /www/cards/*_lte.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf129;"/' -i $(ls /www/cards/*_gateway.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0c1;"/' -i $(ls /www/cards/*_broadband.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0ac;"/' -i $(ls /www/cards/*_internet.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf09e;"/' -i $(ls /www/cards/*_wireless.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf015;"/' -i $(ls /www/cards/*_LAN.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf109;"/' -i $(ls /www/cards/*_Devices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c2;"/' -i $(ls /www/cards/*_wanservices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf132;"/' -i $(ls /www/cards/*_firewall.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf095;"/' -i $(ls /www/cards/*_telephony.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf188;"/' -i $(ls /www/cards/*_diagnostics.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c0;"/' -i $(ls /www/cards/*_usermgr.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf115;"/' -i $(ls /www/cards/*_contentsharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf02f;"/' -i $(ls /www/cards/*_printersharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf023;"/' -i $(ls /www/cards/*_parental.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf074;"/' -i $(ls /www/cards/*_iproutes.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf017;"/' -i $(ls /www/cards/*_tod.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf079;"/' -i $(ls /www/cards/*_relaysetup.lp)
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf019;"/' -i $(ls /www/cards/*_cwmpconf.lp)
sed -e 's/xf0ad/xf0ec;"/' -i $(ls /www/cards/*_natalghelper.lp)
sed -e 's/xf0ad/xf0b1;"/' -i $(ls /www/cards/*_xdsl.lp)
[ -f /www/cards/*_nfc.lp ] && sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0b2;"/' -i $(ls /www/cards/*_nfc.lp)
[ -f /www/cards/*_fon.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf143;"/' -i $(ls /www/cards/*_fon.lp)

sed \
  -e 's/:56px/:80px/' \
  -e 's/:170px/:150px/' \
  -i /www/docroot/css/responsive.css

for f in $(grep -l -r '</head>\\' /www 2>/dev/null | grep -v '\(airiq\|help\|landingpage\)')
do
  grep -q 'lp.include("../snippets/theme' $f
  if [ $? -eq 1 ]; then
    grep -q "/css/gw.css" $f
    if [ $? -eq 0 ]; then
      LP="advanced"
    else
      LP="basic"
    fi
    req=$(grep -n 'local lp = require("web.lp")' $f | cut -d: -f1)
    if [ -z "$req" ]; then
      sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
    else
      head=$(grep -n '</head>\\' $f | cut -d: -f1)
      if [ $head -lt $req ]; then
        sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -e "${req}d" -i $f
      else
        sed -e "/<\/head>\\\/i '); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
      fi
    fi
  fi
done

echo 165@$(date +%H:%M:%S): Deploy theme files
echo  | base64 -d | tar -xzf - -C /

# Fix directory permissions after tar extracts
chmod +x /www /www/docroot /www/docroot/css /www/docroot/css/telstra /www/docroot/css/light /www/docroot/css/night /www/docroot/img /www/docroot/img/telstra /www/docroot/img/light /www/docroot/img/night /www/snippets

echo 165@$(date +%H:%M:%S): Persisting theme settings
echo -n "THEME=$THEME COLOR=$COLOR ICONS=$ICONS KEEPLP=$KEEPLP" > /etc/tch-gui-unhide.theme

sed \
  -e '$ a .card_bg:after{font-size:110px;bottom:-5px;z-index:-20;}' \
  -i /www/docroot/css/gw.css
if [ -f /www/docroot/landingpage.lp -a "$KEEPLP" = "n" ]
then
  echo 166@$(date +%H:%M:%S): Theming and de-branding landing page
  sed \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color:#f8f8f8;}" \
    -e "$ a body.landingpage #login_part_mobile>div:nth-child(2){display:none;}" \
    -e "$ a body.landingpage #icon_down{display:none !important;}" \
    -e "$ a body.landingpage #detailed_info_mobile{display:block !important;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(1){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(2){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(3)>table>tbody>tr>td{padding:0px 5px;width:50%;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(4){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(6){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(7){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(8){display:none;}" \
    -e "$ a body.landingpage #footer_picture_mobile{display:none !important;}" \
    -i /www/docroot/css/gw-telstra.css
  sed \
    -e 's/.hidden-desktop{display:none/.hidden-desktop{display:inherit/' \
    -e 's/.visible-desktop{display:inherit/.visible-desktop{display:none/' \
    -i /www/docroot/css/responsive.css
  sed \
    -e "s,<title>');  ngx.print( T\"Login\" ); ngx.print('</title>,<title>$TITLE Login</title>," \
    -e 's,<img src="/img/TELSTRA_LOGO.png" style="width:57px;height:65px;">,<img class="lp-logo" style="width:240px;margin-bottom:60px;">,' \
    -e 's/Firmware Number/Firmware Version/' \
    -e 's/Modem Make Model/Model/' \
    -e 's/height:60%;min-height:400px;/height:30%;min-height:350px;width:100%;/' \
    -e 's/"-webkit-border-radius: 20px;-moz-border-radius: 20px;border-radius: 20px;width:50%;"/"display:block;margin-bottom:2px;width:220px;"/' \
    -e 's/"erroruserpass alert alert-error hide"/"erroruserpass alert alert-error hide" style="width:212px;margin:auto;padding:10px;"/' \
    -e 's/buttonborder linear-mobile" style="width:50%/linear-mobile" style="width:65px/' \
    -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-basic.lp\"); ngx.print('\\\\" \
    -e '/uci.versioncusto.override.fwversion_override/a \  unhide_version = "rpc.gui.UnhideVersion",' \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         </tr>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <tr>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <td style=\"text-align:right;font-weight: 900;color:#808080;\">tch-gui-unhide</td>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <td style=\"text-align:left;color:#808080;\">');  ngx.print( cui[\"unhide_version\"] ); ngx.print('</td>\\\\" \
    /rom/www/docroot/landingpage.lp>/www/docroot/landingpage.lp
  # Have to restart if changing landing page
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi
if [ -f /www/snippets/tabs-home.lp ]
then
  sed -e '/^else/,/T"Boost Your Wi-Fi"/d' -i /www/snippets/tabs-home.lp
fi
for f in /www/docroot/modals/assistance-modal.lp /www/docroot/modals/usermgr-modal.lp
do
  sed \
    -e '/^if not bridged.isBridgedMode/i \  local lp = require("web.lp")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.setpath("/www/snippets/")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.include("tabs-management.lp")' \
    -e '/^if not bridged.isBridgedMode/,/^end/d' \
    -i $f
done

SRV_transformer=$(( $SRV_transformer + 2 ))

echo 175@$(date +%H:%M:%S): Fix Time of Day tabs
sed \
  -e 's/T"Time of day access control"/T"Device Access Control"/' \
  -e "/update\">\\\/a ');" \
  -e '/update">\\/a local lp = require("web.lp")' \
  -e '/update">\\/a lp.setpath("/www/snippets/")' \
  -e '/update">\\/a lp.include("tabs-tod.lp")' \
  -e "/update\">\\\/a ngx.print('\\\\" \
  -i /www/docroot/modals/tod-modal.lp

echo 175@$(date +%H:%M:%S): Restart Time of Day processing after updates applied 
sed -e 's|reload$|reload; /etc/init.d/tod restart;|' -i /usr/share/transformer/commitapply/uci_tod.ca
SRV_transformer=$(( $SRV_transformer + 1 ))

# Initial invocation of transformer code will fail if history directory does not exist
if [ ! -d /root/trafficmon/history ]; then
  echo 180@$(date +%H:%M:%S): Create directory to retain traffic monitor daily history
  mkdir -p /root/trafficmon/history
fi
if [ ! -f /root/trafficmon/history/.wan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wan_rollover
fi
if [ ! -f /root/trafficmon/history/.wwan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WWAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wwan_rollover
fi

grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
if [ $? -eq 1 ]; then
  echo 180@$(date +%H:%M:%S): Create cron job to retain traffic monitor daily history
  echo "9,19,29,39,49,59 * * * * /usr/sbin/traffichistory.lua" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

if [ $THEME_ONLY = n ]; then
  # Run any extra feature scripts
  for s in $(ls tch-gui-unhide-xtra.* 2>/dev/null)
  do
    echo -n 190@$(date +%H:%M:%S): Executing extra feature script for $(echo $s | cut -d. -f2-):
    . $s
  done
fi

echo 195@$(date +%H:%M:%S): Sequencing cards
for RULE in $(uci show web | grep '=card' | cut -d= -f1)
do
  CARD=$(uci -q get ${RULE}.card)
  FILE=$(ls /www/cards/ | grep "..._${CARD#*_}")
  if [ "$CARD" != "$FILE" ]
  then
    echo "195@$(date +%H:%M:%S):  - Renaming $FILE to $CARD"
    mv /www/cards/$FILE /www/cards/$CARD
  fi
done

if [ -z "$ALLCARDRULES" -a -f tch-gui-unhide-cards ]
then
  ./tch-gui-unhide-cards -s -a -q
fi

if [ $THEME_ONLY = n ]; then
  for l in $(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)
  do
    echo 200@$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in $l
    sed -e "s/\(current_year); ngx.print('\)/\1 \[tch-gui-unhide 2021.04.01 for FW Version 18.1.c.0585\]/" -i $l
  done
fi

echo 200@$(date +%H:%M:%S): Applying service changes if required...
apply_service_changes

chmod 644 /usr/share/transformer/mappings/rpc/gui.*
echo "************************************************************"
echo "* Done!! You should clear your browser cache of images and *"
echo "* files, otherwise you won't see the theme changes.        *"
echo "************************************************************"
echo
echo "++ TIP #1: Bookmark http://$(uci get network.lan.ipaddr)/gateway.lp"
echo "++         to bypass the Telstra Basic web GUI..."
echo
echo "++ TIP #2: Use the tch-gui-unhide-cards script to"
echo "++         change card order and visibility"
echo
if [ "$UPDATE_BTN" = n ]; then
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "++ WARNING! The Update Available notification is DISABLED! +"
  echo "++          You must check for updates manually.           +"
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo
fi
