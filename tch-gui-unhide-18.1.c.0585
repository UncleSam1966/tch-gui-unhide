#!/bin/sh
echo 000@$(date +%H:%M:%S): Built for firmware version 18.1.c.0585 - Release 2021.04.05
RELEASE='2021.04.05@16:45'
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on various pages https://hack-technicolor.readthedocs.io/en/stable/

TARGET_VERSION=""
for x in $(basename $0 | tr '-' "$IFS")
do 
  TARGET_VERSION=$x
done
echo "$TARGET_VERSION" | grep -q '\.'
if [ $? -eq 1 ]
then
  echo "ERROR: Unable to determine Target Version!"
  echo "       Did the script get renamed??"
  echo "       Aborting..."
  exit 1
fi
SCRIPT=$(basename $0 | sed "s/-$TARGET_VERSION//")

DFLT_USR=$(uci -q get web.uidefault.defaultuser)
FW_UPGRD=$(uci -q get web.uidefault.upgradefw)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC=$(uci -q get env.var.ssid_mac_postfix_r0)
HOSTNAME=$(uci -q get system.@system[0].hostname)
case "$(grep 'title>.*</title' /www/docroot/gateway.lp | cut -d'>' -f2 | cut -d'<' -f1)" in
  $VARIANT) TITLE="$VARIANT";;
  $HOSTNAME) TITLE="$HOSTNAME";;
  $VARIANT-$MAC) TITLE="$VARIANT-$MAC";;
  *) TITLE="";;
esac

if [ -f /usr/tch-gui-unhide.theme ]; then
  mv /usr/tch-gui-unhide.theme /etc/tch-gui-unhide.theme
fi
if [ -f /etc/tch-gui-unhide.theme ]; then
  . /etc/tch-gui-unhide.theme
fi
if [ -z "$THEME" ]; then
  KEEPLP=n
  grep -q 'body{background-color:#353c42;' /www/docroot/css/gw.css
  if [ $? -eq 0 ]; then
    THEME=night
  else
    grep -q 'body{background-color:#fff;' /www/docroot/css/gw.css
    if [ $? -eq 0 ]; then
      THEME=light
    else
      THEME=telstra
      grep -q 'body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color' /www/docroot/css/gw-telstra.css
      if [ $? -eq 1 -a -f /www/snippets/tabs-home.lp ]; then
        grep -q 'T"Boost Your Wi-Fi"' /www/snippets/tabs-home.lp
        if [ $? -eq 1 ]; then
          KEEPLP=y
        else
          KEEPLP=n
        fi
      fi
    fi
  fi
  case "$(grep '.smallcard .header{background-color:#......;}' /www/docroot/css/gw.css  | cut -d# -f2 | cut -d\; -f1)" in
    "005c32") COLOR=green;;
    "662e91") COLOR=purple;;
    "f36523") COLOR=orange;;
    "008fd5") COLOR=blue;;
    "272c30") COLOR=monochrome;;
    *) if [ $THEME = light ]; then COLOR=monochrome; else COLOR=blue; fi;;
  esac
  ICONS="$(grep '.card_bg:after{visibility:' /www/docroot/css/gw.css | cut -d: -f3 | cut -d\; -f1)"
fi

grep -q 'rpc.gui.pwd.@' /www/docroot/modals/mmpbx-profile-modal.lp
if [ $? -eq 0 ]; then
  SIP_PWDS=y
else
  SIP_PWDS=n
fi

INSTALLED_RELEASE="$(grep -o -m 1 -E '[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]@[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' /usr/share/transformer/mappings/rpc/gui.map 2>/dev/null)"

grep -q 'rpc.gui.UpdateAvailable' /www/docroot/gateway.lp
if [ $? -eq 0 ]; then
  UPDATE_BTN=y
else
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp
  if [ $? -eq 0 ]; then
    UPDATE_BTN=n
  else
    UPDATE_BTN=y
  fi
fi

FIX_DFLT_USR=n
FIX_FW_UPGRD=n
if [ "$(uci -q get dropbear.lan.enable)" = "1" -a "$(uci -q get dropbear.lan.PasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootLogin)" = "1" ]; then
  FIX_SSH=n
else
  FIX_SSH=y
fi
if [ "$(uci -q get system.config.export_plaintext)" = "1" -a "$(uci -q get system.config.export_unsigned)" = "1" -a "$(uci -q get system.config.import_plaintext)" = "1" -a "$(uci -q get system.config.import_unsigned)" = "1" ]; then
  FIX_CFG_PORT=n
else
  FIX_CFG_PORT=y
fi
echo "$(uci -q get web.parentalblock.roles)" | grep -q "admin"
if [ $? -eq 0 ]; then
  FIX_PARENT_BLK=n
else
  FIX_PARENT_BLK=y
fi

# Keep count of changes so we know whether to restart services
SRV_cron=0
SRV_dropbear=0
SRV_nginx=0
SRV_power=0
SRV_system=0
SRV_transformer=0

check_pwr_setting() {
  section="$1"
  option="$2"
  text="$3"
  if [ -z "$(uci -q get power.$section.$option)" ]; then
    pwrctl show | grep "$text" | grep -q DISABLED
    uci set power.$section.$option="$?"
    SRV_power=$(( $SRV_power + 1 ))
  fi
}

apply_service_changes() {
  if [ $SRV_transformer -gt 0 ]; then
    # Need to stop watchdog whilst we restart transformer, because if it does not find /var/run/transformer.pid, it will reboot the system!
    /etc/init.d/watchdog-tch stop
    /etc/init.d/transformer restart
    /etc/init.d/watchdog-tch start
  fi
  [ $SRV_cron -gt 0 ] && /etc/init.d/cron restart
  [ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear restart
  [ $SRV_system -gt 0 ] && /etc/init.d/system reload
  [ $SRV_nginx -gt 0 ] && /etc/init.d/nginx restart

  if [ -z "$(uci -q get power.cpu)" ];then
    uci set power.cpu='cpu'
  fi

  if [ -z "$(uci -q get power.cpu.cpuspeed)" ]; then
    case "$(pwrctl show | grep "CPU Speed Divisor" | tr -s " " | cut -d" " -f4)" in
      1) uci set power.cpu.cpuspeed="1";;
      2) uci set power.cpu.cpuspeed="2";;
      4) uci set power.cpu.cpuspeed="4";;
      5) uci set power.cpu.cpuspeed="8";;
      *) uci set power.cpu.cpuspeed="256";;
    esac
    SRV_power=$(( $SRV_power + 1 ))
  fi
  check_pwr_setting "cpu" "wait" "CPU Wait"
  check_pwr_setting "ethernet" "ethapd" "Auto Power"
  check_pwr_setting "ethernet" "eee" "Energy Efficient Ethernet"
  check_pwr_setting "ethernet" "autogreeen" "AutoGreeen"
  check_pwr_setting "ethernet" "dgm" "Deep Green Mode"
  [ $SRV_power -gt 0 ] && uci commit power
}

RESTORE=n
WRAPPER=n
YES=n
THEME_ONLY='n'

FILENAME=$(basename $0)

while getopts :c:d:f:h:i:l:p:rt:uv:yTVW option
do
 case "${option}" in
   c) case "$(echo ${OPTARG} | tr "BGMOPR" "bgmopr" | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;; 
        g) COLOR=green;; 
        o) COLOR=orange;; 
        p) COLOR=purple;; 
        r) COLOR=red;; 
        *) COLOR=monochrome;;
      esac;;
   d) case "${OPTARG}" in y|Y) FIX_DFLT_USR=y; DFLT_USR='admin';; n|N) FIX_DFLT_USR=y; DFLT_USR='';;  *) echo 'WARNING: -d valid options are y or n';; esac;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPGRD=y; FW_UPGRD='1';;     n|N) FIX_FW_UPGRD=y; FW_UPGRD='0';; *) echo 'WARNING: -f valid options are y or n';; esac;;
   h) case "${OPTARG}" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        s) TITLE="$VARIANT-$MAC";;
        *) TITLE="$OPTARG";;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   l) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then KEEPLP=y; else KEEPLP=n; fi;;
   p) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then SIP_PWDS=y; else SIP_PWDS=n; fi;;
   r) RESTORE=y;;
   t) case "${OPTARG}" in
        g) THEME=night; COLOR=green; KEEPLP=n; echo WARNING: -tg deprecated. Use -tn -cg in future;; 
        o) THEME=night; COLOR=orange; KEEPLP=n; echo WARNING: -to deprecated. Use -tn -co in future;; 
        p) THEME=night; COLOR=purple; KEEPLP=n; echo WARNING: -tp deprecated. Use -tn -cp in future;; 
        l) THEME=light; COLOR=monochrome; KEEPLP=n;;
        m) THEME=telstramodern; COLOR=blue; KEEPLP=y;;
        n) THEME=night; COLOR=blue; KEEPLP=n;;
        *) THEME=telstra; COLOR=blue; KEEPLP=y;;
      esac;;
   u) RESULT=$(curl -m 5 -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else 
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]
                then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo "002@$(date +%H:%M:%S): Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]
                then
                  chmod +x $FILENAME
                  echo "002@$(date +%H:%M:%S): Successfully updated $FILENAME."
                  return 0
                else
                  echo "002@$(date +%H:%M:%S): Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo "002@$(date +%H:%M:%S): Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   v) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then UPDATE_BTN=y; else UPDATE_BTN=n; fi;;
   y) YES=y;;
   T) THEME_ONLY=y;;
   V) LATEST_RELEASE=$(curl -m 1 -q -s -k -L -r0-9 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt)
      echo "002@$(date +%H:%M:%S): This Release       $RELEASE"
      if [ -z "$INSTALLED_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Installed Release  NOT INSTALLED"
      else
        echo "002@$(date +%H:%M:%S): Installed Release  $INSTALLED_RELEASE"
      fi
      if [ -z "$LATEST_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Latest Release     UNKNOWN (No internet access?)"
      else
        echo "002@$(date +%H:%M:%S): Latest Release     $LATEST_RELEASE"
      fi
      exit;;      
   W) WRAPPER=y;;
   ?) echo "Optional parameters:"
      echo " Control Options:"
      echo " -d y|n         : Enable (y) or Disable (n) Default user (i.e. GUI access without password)"
      echo "                    (Default is current setting)"
      echo " -f y|n         : Enable (y) or Disable (n) firmware upgrade in the web GUI"
      echo "                    (Default is current setting)"
      echo " -p y|n         : Use decrypted text (y) or masked password (n) field for SIP Profile passwords"
      echo "                    (Default is current setting i.e (n) by default)"
      echo " -v y|n         : Enable (y) check for new releases and show 'Update Available' button in GUI, or Disable (n)"
      echo "                    (Default is current setting or (y) for first time installs)"
      echo " Theme Options:"
      echo " -c b|o|g|p|r|m : Set the theme highlight colour"
      echo "                    b=blue o=orange g=green p=purple r=red m=monochrome"
      echo "                    (Default is current setting, or (m) for light theme or (b) for night theme)"
      echo " -h d|s|n|\"txt\" : Set the browser tabs title (Default is current setting)"
      echo "                    (d)=$VARIANT (s)=$VARIANT-$MAC (n)=$HOSTNAME (\"txt\")=Specified \"txt\""
      echo " -i y|n         : Show (y) or hide (n) the card icons"
      echo "                    (Default is current setting, or (n) for light theme and (y) for night theme)"
      echo " -l y|n         : Keep the Telstra landing page (y) or de-brand the landing page (n)"
      echo "                    (Default is current setting, or (n) if no theme has been applied)"
      echo " -t l|n|t|m     : Set a light (l), night (n), or Telstra-branded Classic (t) or Modern (m) theme"
      echo "                    (Default is current setting, or Telstra Classic if no theme has been applied)"
      echo " -T             : Apply theme ONLY - bypass all other processing"
      echo " Update Options:"
      echo " -u             : Check for and download any changes to this script (may be newer than latest release version)"
      echo "                    When specifying the -u option, it must be the ONLY parameter specifed."
      if [ $WRAPPER = y ]; then
      echo " -U             : Download the latest release, including utility scripts (will overwrite all existing script versions)."
      echo "                    When specifying the -U option, it must be the ONLY parameter specifed."
      fi
      echo " Miscellaneous Options:"
      echo " -r             : Restore changed GUI files to their original state (config changes are NOT restored)"
      echo "                    When specifying the -r option, it must be the ONLY parameter specifed."
      echo " -y             : Bypass confirmation prompt (answers 'y')"
      echo " -V             : Show the release number of this script, the current installed release, and the latest available release on GitHub"
      echo 
      echo "NOTE #1: Theme (-t) does not need to be re-specified when re-running the script: current state will be 'remembered'"
      echo "         between executions (unless you execute with the -r option, which will remove all state information)"
      echo "NOTE #2: Use tch-gui-unhide-cards to set card order and visibility"
      echo
      exit;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

if [ $THEME_ONLY = n ]; then
restore_www() {
  # File deployed to incorect location by releases prior to 2021.02.06
  if [ -f /usr/share/transformer/mappings/iperf.map ]; then
    rm /usr/share/transformer/mappings/iperf.map
  fi
  # Need to remove existing version or it doesn't get replaced?? 
  if [ -f /usr/sbin/traffichistory.lua ]; then
    if [ "$1" = "V" ]; then
      echo 010@$(date +%H:%M:%S): Removing file /usr/sbin/traffichistory.lua
    fi
    rm /usr/sbin/traffichistory.lua
  fi
  grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
  if [ $? -eq 0 ]; then
    sed -e '/traffichistory.lua/d' -i /etc/crontabs/root
    SRV_cron=$(( $SRV_cron + 1 ))
  fi
  # Add individual files to be restored here
  for t in /etc/init.d/power
  do
    s=/rom$t
    if [ -f $s ]; then
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        echo 010@$(date +%H:%M:%S): Restoring file $t
        cp -f -p "$s" "$t"
      fi
    fi
  done
  # Add directories to be restored here
  for d in www/cards www/docroot www/lua www/snippets usr/share/transformer/commitapply usr/share/transformer/mappings/rpc usr/share/transformer/mappings/uci
  do
    echo 010@$(date +%H:%M:%S): Restoring directory /$d
    for s in $(find /rom/$d -type f | grep -v -E \(/rom/www/docroot/help\))
    do
      if [ "$s" = "/rom/www/cards/010_lte.lp" ]
      then
        t="/www/cards/003_lte.lp"
      else
        t=$(echo "$s" | cut -c5-)
      fi
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        if [ "$1" = "V" ]; then
          echo 014@$(date +%H:%M:%S): Restoring file $t
        fi
        cp -f -p "$s" "$t"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done

    for f in $(find /$d -type f ! -path '/www/docroot/help*' ! -name '003_lte.lp')
    do
      if [ ! -f "/rom$f" -a -f "$f" ]; then
        if [ "$1" = "V" ]; then
          echo 019@$(date +%H:%M:%S): Removing file $f
        fi
        rm -f "$f"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done
  done
}

if [ $RESTORE = y ]; then
  restore_www V
  for f in /etc/tch-gui-unhide.ignored_release /etc/tch-gui-unhide.theme
  do
    if [ -f "$f" ]
    then
      echo 019@$(date +%H:%M:%S): Removing $f
      rm "$f"
    fi
  done
  for d in /www/docroot/css/light /www/docroot/css/night /www/docroot/css/telstra /www/docroot/img/light /www/docroot/img/night /www/docroot/css/Telstra
  do
    if [ -d "$d" ]
    then
      echo 019@$(date +%H:%M:%S): Removing empty directory $d
      rmdir "$d"
    fi
  done
  for s in $(uci show web | grep normally_hidden | cut -d. -f2)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry web.$s
    uci -q delete web.$s
    uci -q del_list web.ruleset_main.rules="$s"
    SRV_nginx=$(( $SRV_nginx + 2 ))
  done
  for s in $(uci show web | grep '=card' | cut -d= -f1)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry $s
    uci -q delete $s
    SRV_nginx=$(( $SRV_nginx + 1 ))
  done
  RULES=$(uci get web.ruleset_main.rules)
  for s in $(echo $RULES | tr " " "\n" | grep -v dumaos | sort -u)
  do
    TARGET=$(uci -q get web.$s.target)
    if [ ! -z "$TARGET" -a ":$TARGET" != ":/" -a ! -f /www/docroot$TARGET -a ! -f /www$TARGET -a ! -f /www/docroot/ajax$TARGET ]; then
      echo 019@$(date +%H:%M:%S): Removing config entry web.$s
      uci -q delete web.$s
      uci -q del_list web.ruleset_main.rules="$s"
      SRV_nginx=$(( $SRV_nginx + 2 ))
    else
      ROLE=$(uci -q get web.$s.roles)
      if [ ! -z "$ROLE" -a "$ROLE" = "nobody" ]; then
        echo 019@$(date +%H:%M:%S): Resetting admin role on config entry web.$s.roles
        uci -q delete web.$s.roles
        uci add_list web.$s.roles="admin"
        SRV_nginx=$(( $SRV_nginx + 2 ))
      fi
    fi
  done
  uci commit web
  sed -e '/lua_shared_dict *TGU_MbPS/d' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
  apply_service_changes
  echo "************************************************************"
  echo "* Restore complete. You should clear your browser cache of *"
  echo "* images and files to make sure you can see the changes.   *"
  echo "* NOTE: No config changes have been restored, except to    *"
  echo "*       remove added entries to display hidden modals.     *"
  echo "************************************************************"
  exit
fi

VERSION=$(uci get version.@version[0].version | cut -d- -f1)
if [ "$VERSION" = "$TARGET_VERSION" ]
then
  echo 020@$(date +%H:%M:%S): Current version matches target \($TARGET_VERSION\)
else
  echo 020@$(date +%H:%M:%S): WARNING: This script was developed for the $TARGET_VERSION firmware.
  echo 020@$(date +%H:%M:%S): It MAY work on your $VARIANT with $VERSION firmware, but it also may not.
  echo 020@$(date +%H:%M:%S): If you still wish to proceed, reply FORCE \(in capitals as shown\).
  read
  if [ "$REPLY" != "FORCE" ]
  then
    echo 020@$(date +%H:%M:%S): Good choice.
    exit
  fi
fi

echo "030@$(date +%H:%M:%S): This script will perform the following actions:"
if [ $FIX_SSH = y ]; then
echo "030@$(date +%H:%M:%S):  - Properly enable SSH access over LAN"
fi
if [ $FIX_CFG_PORT = y ]; then
echo "030@$(date +%H:%M:%S):  - Enable unsigned configuration export/import in the web GUI"
fi
if [ $FIX_FW_UPGRD = y ]; then
if [ "$FW_UPGRD" = "1" ]; then
echo "030@$(date +%H:%M:%S):  - Enable firmware upgrade in the web GUI"
else
echo "030@$(date +%H:%M:%S):  - DISABLE firmware upgrade in the web GUI"
fi
fi
if [ $FIX_DFLT_USR = y ]; then
if [ "$DFLT_USR" = "admin" ]; then
echo "030@$(date +%H:%M:%S):  - ENABLE the default user in the web GUI (i.e. GUI access without password)"
else
echo "030@$(date +%H:%M:%S):  - Disable the default user in the web GUI"
fi
fi
if [ $FIX_PARENT_BLK = y ]; then
echo "030@$(date +%H:%M:%S):  - Ensure admin role can administer the parental block"
fi
if [ -z "$INSTALLED_RELEASE" ]; then
echo "030@$(date +%H:%M:%S):  - Install tch-gui-unhide release $RELEASE"
else
echo "030@$(date +%H:%M:%S):  - Replace tch-gui-unhide release $INSTALLED_RELEASE with $RELEASE"
fi
echo "030@$(date +%H:%M:%S):  - Allow editing of various settings that are not exposed in the stock GUI"
echo "030@$(date +%H:%M:%S):  - Unhide various cards and tabs contained in the stock GUI that are normally hidden"
echo "030@$(date +%H:%M:%S):  - Add new cards and screens, and modified cards and screens from the Ansuel tch-nginx-gui"
echo "030@$(date +%H:%M:%S):  - The GUI screens will be prettied up a bit and the $THEME theme applied with $COLOR highlights and $ICONS card icons"
if [ -f /www/docroot/landingpage.lp ]; then
echo "030@$(date +%H:%M:%S):  - The Telstra Landing Page will be $(echo $KEEPLP | sed -e 's/y/left UNCHANGED/' -e 's/n/themed and de-branded/')"
fi
if [ ! -z "$TITLE" ]; then
echo "030@$(date +%H:%M:%S):  - The browser tabs titles will be set to $TITLE"
fi
if [ "$SIP_PWDS" = y ]; then
echo "030@$(date +%H:%M:%S):  - SIP Profile passwords will be decrypted and displayed in text fields rather than password fields"
fi
if [ "$UPDATE_BTN" = y ]; then
echo "030@$(date +%H:%M:%S):  - New release checking is ENABLED and 'Update Available' will be shown in GUI when new version released"
else
echo "030@$(date +%H:%M:%S):  - New release checking is DISABLED! 'Update Available' will NOT be shown in GUI when new version released"
fi

echo 030@$(date +%H:%M:%S): If you wish to proceed, enter y otherwise just press [Enter] to stop.
if [ $YES = y ]; then
  REPLY=y
else
  read
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

echo 030@$(date +%H:%M:%S): IMPORTANT NOTE - You can restore changed GUI files to their original state by running: $0 -r

# Package repository for Homeware 18 moved 31/03/2021 (Quick fix in case de-telstra not run)
if [ $(grep -c 'www.macoers.com/repository' /etc/opkg/customfeeds.conf) -gt 0 ]; then
  echo 040@$(date +%H:%M:%S): Fixing opkg repository
  sed -e 's|www.macoers.com/repository|repository.macoers.com|' -i /etc/opkg/customfeeds.conf
fi

if [ $FIX_SSH = y ]; then
  echo 040@$(date +%H:%M:%S): Properly enabling SSH access over LAN
  # We need to enable this properly as you can enable/disable via the GUI, and if done
  # without allowing password auth and root login, it can accidently prevent SSH access
  uci set dropbear.lan.enable='1'
  uci set dropbear.lan.PasswordAuth='on'
  uci set dropbear.lan.RootPasswordAuth='on'
  uci set dropbear.lan.RootLogin='1'
  uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
fi
  
if [ $FIX_CFG_PORT = y ]; then
  echo 040@$(date +%H:%M:%S): Enabling unsigned configuration export/import in the web GUI
  uci set system.config.export_plaintext='1'
  uci set system.config.export_unsigned='1'
  uci set system.config.import_plaintext='1'
  uci set system.config.import_unsigned='1'
  uci commit system
  SRV_system=$(( $SRV_system + 4 ))
fi

if [ $FIX_FW_UPGRD = y ]; then
  if [ $FW_UPGRD = 1 ]; then
    echo 040@$(date +%H:%M:%S): Enabling firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='1'
    uci set web.uidefault.upgradefw_role='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  else
    echo 040@$(date +%H:%M:%S): DISABLING firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='0'
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
  uci commit web
fi

if [ $FIX_DFLT_USR = y ]; then
  if [ "$DFLT_USR" = "admin" ]; then
    echo 040@$(date +%H:%M:%S): Enabling the default user in the web GUI
    uci set web.default.default_user='usr_admin'
    uci set web.uidefault.defaultuser='admin'
  else
    echo 040@$(date +%H:%M:%S): Disabling the default user in the web GUI
    uci -q delete web.default.default_user
    uci -q delete web.uidefault.defaultuser
  fi
  uci commit web
  SRV_web=$(( $SRV_web + 2 ))
fi

if [ $FIX_PARENT_BLK = y ]; then
  echo 040@$(date +%H:%M:%S): Ensuring admin role can administer the parental block
  uci -q del_list web.parentalblock.roles='admin'
  uci add_list web.parentalblock.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

grep -q -E "lua_shared_dict *TGU_MbPS" /etc/nginx/nginx.conf
if [ $? -eq 1 ]; then
  echo 040@$(date +%H:%M:%S): Creating shared dictionary for throughput calculations
  sed -e '/^http/a\    lua_shared_dict TGU_MbPS 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

echo 050@$(date +%H:%M:%S): Ensuring card sequence and visibility is up to date
ALLCARDRULES="$(uci show web | grep =card)"
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="${CARDFILE#*_}"
  CARDRULE="card_$(basename $CARD .lp)"
  MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
  HIDDEN=$(uci -q get web.${CARDRULE}.hide)
  if [ -z "$MODAL" ]
  then
    MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
  fi
  MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
  if [ ! -z "$MODALRULE" -a "$(uci -q get web.$MODALRULE.roles)" != "admin" ]
  then
    echo "050@$(date +%H:%M:%S):  - Converting $CARD card visibility from modal-based visibility"
    HIDDEN=1
    uci -q delete web.$MODALRULE.roles
    uci add_list web.$MODALRULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  if [ -z "$HIDDEN" -o \( "$HIDDEN" != "0" -a "$HIDDEN" != "1" \) ]
  then
    HIDDEN=0
  fi
  uci set web.${CARDRULE}=card
  uci set web.${CARDRULE}.card="$(basename $CARDFILE)"
  uci set web.${CARDRULE}.modal="$MODALRULE"
  uci set web.${CARDRULE}.hide="$HIDDEN"
  SRV_nginx=$(( $SRV_nginx + 4 ))
done
uci commit web

# Do the restore
restore_www
echo 050@$(date +%H:%M:%S): Pre-update restore completed

echo 060@$(date +%H:%M:%S): Deploy modified iperf GUI code
echo H4sIAAAAAAAAA+2UvU7DMBCAM0fKO1ieWqkNTmInExMzEw8QheCWSGls2c6AUN8d2xG0VPQP2iDEfYvj8+l81ndKr9VNcGWIpWDMr5bd1X8nWUGLIrWJRUASQkkWIHbtxhy9NpVCKFBCmEN5x87/KL31r58rxa84Bef7Txhh4H8MNv6Nqjq9EGrFL/1HON8/JbQA/2Pwtf9VJWXTLfVlBuEk/9TmZEWSp6n1z3KWgP8xOOK/r5ufz8D5/nOagf9ROMF/I7laxDb03Tuc4JzSvf4ZyT/7T0ma5QEil3zoPv65/1bUVYtq0S2aZelNo1uE/QeOwiicz5GdgdgHotDNBVcTbENlYkSCp7Hiy0Ybru58iftKTraLTXdrxMNpFA4X+1g5xOzFr1GI0Mduu9DMnWhem0Z0mw591LxIvhMS0uXp94oIYamEEXiG8BPXppRCGbfhXfXYcuxy1lG4ds0eeOJDs5Itd0/cbnuKovC3LQIAAAAAAAAAAAAAAAAAAAAAAADAwBuC/9IzACgAAA== | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified broadband GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified devices GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified eco GUI code
echo H4sIAAAAAAAAA+0ba3PbNtJfzV+Bo32x1JMokRKlXBx7xnHdXmeaTlq7d9NJMypMQhIbimBJyLKT+r/fLvgURdqSY6vJlOuxRCyAfWAX4O6SYsLq7DwxdAGGpim/AYrf8lrvwxjdNIb6cKerd3u93g4xn1owhHkoaEDITsC5uGvcff1fKDCwv+M5QrOfzg02sr8B43TdBDeo7b8FyNnf5wsWPAWPe+xv9HqJ/QfdQbcH9jfMob5Duk8hTBH+5vbf+0fn0vE64ZR00BUCS7P4bMY9ZS9kgrSvlfOLk58ujoyuorxngcfc0RULjtT9hkUF6fgBtzqACB3ukT8JXbwnBx/9wPEE2e/dHjRVRZlbjsE9Ph43muSjQohFQ0bUfV0ljgdNQrpNwqwpJyqMUQ8PJU5PcV6C+ipBfeddUdexyc+n3xHm0UuXEe4LEOAFQar68TPjsDCbhdRSbhUFVJr7I8ZYIgv3xs5kNAFNAUmYmKKKUUOHfn8RWMKNh5F2G/G/pQqRfWj/ltGlc8EnAeC8VfJZX8YlhytjluvO88zQOdZAk/p2iVYSn1MsapfqFnUtqSdROTb2ZLbKA5BrMcBxeerQzpFeUEes0kYssfx5dFFGVXbkySIiRxcmhz5jJWuT9Ej6SaOEQzpuPx0E1Gf8io2c4I8R+DoLgrkvQuSlSz67exdTJwRXn4OvWwGF3QX7I9o/pK/pJOSAcG8I9X34FDzp62l9ZdcZk7ek/QE2ycdsy+3tQd9Xtyp5d0hgsT1ld1f6uEGO420IwnSGRiecgSeOx3im35QP+vdag54XBo2ddFGX19Ll1Cby3gG44k5IUdDIrqWTpE1whPQarZc20vXerVptKRKc34nryHmIVP7qc/VLgXkYfFbxv96L4v+BWcd/2wC0fzilAXtCL9jc/np/UMf/W4HM/iKgXjjmwYw99omwuf373Z5e238bUG7/GQQmjjcJH8cRNre/OejX+38rcI/9IbD+dB/YyP4m5v+DvlHf/7cCa9hfxvYaoB7KAw086Per7K93u2ZS/9GHQ/ATo2sMBnX9Zxvgcosmye5IWpocEVVeqIrSbhPwAC3K7tApWNBQATPSBdfVphawiRNCRnYq57+mfiNPqblMQIOMTYn4yTZmcAS4ZbkkNPLzWzKjs7C2g0LBcBVR4sZn+XZU/QmRkkTKnFFtERWTSZXctmS+Xi38uTPzXYbCp2IVJU/qG0vip0WPWIc7tFjSI5mnRj2JOgX0klZRxow6QR6NX1mGjS3IoB+gZ8KwWSfLf19YLBafU/4PfwPM/6FV3/+3AWh/iwb2I4X6pbCm/XuG2esOh4bM/4d1/L8VyOwPUdeIWVxzHxznVcE98R9YvVewfw8ygDr+2wa0237AZOjvUsHsF8TmxOOCWFPqTRgR+Bxj7LhMBkRn0eM2GQQ5HygGKMqECcGuhYYfNp9Rx2scLNjl3GlbPGAHEEmlIaZgnhhNmevLIDNgf8ydgDVUGK0t96rNeNLcqRifdqhFBjIYS5/ZQFy1FH9qWXyIg+TTo5UxMm5sKfGzrKXuJGbSkohMwWeCFUMwVFNyj/HKh+VDOQUfkpUPwxhPRnjLS6XB+p9dU0ucRuhG3A3L4oyTNdGy9QDihjlQo2dIxe4R7AUxx5hT1dWVXkBfqKdvfibfoCmYZ92QE5C9fY7e4E1Uhbkhu4tmV62UqVshUQlPSBf/SRrnv/xw2oxYVtHUN6V5sgZRY32i5ro0++vTNMw1aT7fRPk8Tc+W/wVLRRulfFGxb4TbP6X9PxwdPZu3V92iYrzthMmEAv9kI5awj7oyamdJToaeSd7IfPZrvvAqpFl7+h3C4f4vk4yxHF2PBZMbcjYeOxaeUSmfCrHWmlstU/7MKREt667Q/Nvg7Oysas3WnV0tnjzkSuQCfAnJrxnzybcBKvOa26xCqvXmFmSKbhwzblP3DRVTmOs5bowNWRhGCbs3udYsca3FGNQkvnwxpeGJZUGjoXYkmbADIVRbXkIgpTYjBfMcygdG8iAn+fZM4+BX5aXtXBHLpWF4pIY+9XrqcQE5o66LsRt2HDQPCcnmZ3dOzQoY3NlPYdx/GLVZ0ID1sTg5h/s2lvjUVrYALdRffjQJ0KsUJ7nVIvPR5UQlNhW0fTlpowWO1Gd71+PuwDosCgyXApc/ljde6KmYuXjTvlXw6u2ebP+L6O8AWdQiKmF870ym6Y2ueKNprZyHzYcTxqOqVTwHpZ89lGh04rRIyQn0YJKMtUjx6HgosWx3t0qOk08iDVu0RYr7tZlzeiTYLGyCDjjNcfU3utFfHUJ/0YD5n80tzG6erAKwef3H6Jr189+tQN7+8Y3p0XlsXv/p1e//bwlK7J8PTB6Fxz31n/6wpxfsb5o9s67/bAM+7/rPDEJrOmGVRaDl/nSaz8MqRrmuB1WZrl7BoBwRTb6MDkv3inOXUS9NKqj/hgZ0Fq5fj/oSi1Gpsv+V7+QXdC1bpx+4dzbzxc25gBhvkmp99Sqno2xIVfBqSWhERHLh1W3Bu1oEuc3CSYE5OLPtsh/nLLhppJZppXJnTurPIY2AnBEV+SgrZS3IJ595l6F/GH3eUQC7bcGc5yszsL7Cx8DsmixPdjwiyy6YgLFodn9lNlZ81p1trMw2N+Ctl0i+wfTuZtOXZt/mc99iLlGVto7hZsXir2Yxb8ilnfJe1r7k9g2Z++iCMi/FN12SEXjdnvLA+QBuRF0Vzh0x5faRij6kEiof3ceECol7nHpXS/86OqLCxvJZBTvKT7uazZVse+ww1w6ZWEqVHW/MR5f8WrondVkQV7tRC9ypEUp+tnEs7NFQ3LjyTMDzuQ1+OvFeYBkJzjRc9tsHJOEnSP8VzHsPNrmYBx7YA3/fgOYZw4B5wPC3D178+4cZ/Z0HBO8uYHkN7JZoUZZHHmSKv3TZhHn28QHRtLhOmBofUQcvO8mIdRJS2OYsOGcus0Qjppa8J5J7ZyQ9ANJM9W3W/W6tzHfhCGvayAqb6ZsoOZKyXUoOtEpXoEyv6gVKi16fskqJ8IX6p3zzJHkHJdUixmy2LFXlzOzllow+NDcjnpUfV16SSanmsJsRLxQTkxdvcqSxuYZV76l45LY+NOBoWq53kDsOm28gSIWjsllXRWqooYYaaqihhhpqqKGGGmqooYYaaojg/7XRUpkAUAAA | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified firewall GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified gateway GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified internet GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified iproutes GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified lte GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified management GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified multiap GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified qos GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified system GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified telephony GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified theme GUI code
echo H4sIAAAAAAAAA+0Z23LbtjLP+goM247JqURJtmXNxFYe4nEbT+3ap0nThzTjgUhIQkOBLEhacTP+97MLgFdJJ7aP47RT7INELhaLXewF2GWeyv6zLwwDgPFopP4B2v/qebg3Hg93Dw72x3vPBsPB/mD0jIy+tGAIeZpRScgzGcfZ/6L73Pg/FHKwf7qgkn1BL7i//Yejwdja/ymgsn8mqUhnsVyyx84I97c/hP/Q2v8pYLP9lzRJuJinj+MI97f/6ODAxv+TwGfsL5Pg//eB+9h/NByC/Q/29/et/Z8C7mD/ec79bMGWzAf0Q9ZAA4NFt9n/YHc4Vvbf3R0ND3bBT3aHgz2I/8FjK7sJ/uX2j+KARiSapWRCJPsz55K5Drw6Xqejx5TprxLJZunVjEcMCJ0+y4J+Fix64Bu9XCx4yLSLOI1JIZvRPMpwxptXJ+cnk4xFKfjZITm+OLv4ZTKNcnZITo8vfn49ueYpn0bw+tPJyeXZ5UQcNnkFNFjg2p86hKAwTDIRsLQLrxFNs/M45DPOwi7p9UjGl6xORFY0Be1mkqULFnZuC9VmuQgyHgsyZ9llRe56yFRRKLVx1dsSpZhPcMt8mmWST/MMprR3qUucpRIpoLgCbidB0X5NGSrUUAqCjqT5NIXtZyJTZmBpBvR8Vqfz6xpRERpJJg2a+l7ggAA2BFhmuRTbmAEJE2Gn0hDJOmZ9XKPkY7ZNewGP/ThhYpPq0vEUPTBQxCUDopnDbMQ/l4yGrmdGFCaI4pQZFApV/GppRJwZBrBlhhM4l1MtULBvOOC9ZF8Z2ZU4K8kz5jaY1Ubrwj7ULcq9Ry/40CXXhAsCQQLp158vKQSZZgIz3e9W33sT9et4JIzVuor3uw/vYe3ritk2t5lo+hZFw2kmSpUWhWRRTHFM8Aj5G4fSzNSarYhK6xHlfmA3oBmFcPeaXnYFdBmeNMB6QxA2ad4BG6UnMurULdolTMqrZTq/i2nXnLJmaZOnHOL77cX1kPMeh5wig20kVEMloU5vGwnVUEloEt9GSj1WkDpbfLAIc6m2B3Itq6PBdLAHP1CYBakhJgmTKU+LgKp5yXOiZDBbCnPgKZaO8a6atX/89fRK7cqVSczx9A8WZG9ukiJTEyKoigsHbhJ+dZNwumqQBrBcqoYhE1yI6MYMLLk4ERAEymWHBkc/ruESKoF/BpqUCxKiRKq9t9f5DU1tFlKhq+V1dNQ5Bn9bEChzPh47ZfTHY6c947H44TF3iwdkZVof4hLztYls19wNu3rv0bxdAoHpVVmhHcjvSsr32ntqzFPFHGUvrLa2kJrdVUHfNQupIFYYlf8jPl9kDp4JFU5swJnrx2Ys5GUmhVM/q4w+zVxm8kAtn9VCrRVspwKIeGhCbEeFlV4Y43jHaR5zaILC2R6wC3ibaqk2l4yJFi6Ge/68TZjkMonaSMnCFmYZizhYyBguep/fJ50G77VPQRzBenfZpyKKHrBP5qbZUg3usCG7i/l10r6bWkEsUhJQQWJIbWTKCOPAHzTUq+2gCDtGnk1alsH9ADXbdr+5g27mmLmTcj8xlpAzuIeCOOSSzlmlKAY1HDA7N1pBsa4aZBjJ5nD6MOlW2cDrfO1y6F8Hq9Xq7/L9Z388HuyP9kbq+8/Q9v+eBND+YRygdl/MD+5v/93BeGDt/xRQtz/cgGj0SD3/OtzJ/vuDvd3R3mA83gf77+3t2e+/TwIb7K8uqz314kcPavi24DP939HueNyy/8FwMLT936eAXg8Kf9X6j2jGwuckjFWXLVhglQA3Rp6qPkOn0+uRM6z6+V+qddWBKi9jHzMff8J4Sblwd1ZsmvNeEEu2U/aP4Q6cMZFdLViUwNW31mYGar856nhm0hIKWLhSbpmU8+Z4OS2J020L1YZK8pxvXaBNqltxXZKLDDTFmrXRo+sWr2a8mPX29ASrlNriWE6/xWIHtvtUnIh8+ZpFLMia7XYslnVL45OpbrvkjXOmnqBU/2TKW0T+XCGL+hbRb/QzeSnNFd09jmia8sBr0Jqqd/OMczWoJtw2m/FQp+WyEFAVnsjhJT4o7rrwRNyP6kkhTeWJ2Av9qNCm9kT0pX5UaKw+EfcL/CtErfhE/Hn1WpMvoDK84lh3XcUJ+mkhZFH14dS35lmxNYUf4l/pR8WucESaXGKppdlUxllvaZm2QKe+Q+tUpijuVHKu05gKs9QJZFAesy6C8i+35jLe2vp1EmM2r7W8JlnfOa9t9qIf2SXoy7rdWndtyBlhxP6TM3njlhvXLeWHlNCMWz/J08W5RrnO61z1rWa5Wc7koJSseBRh8WxMSI6mL+gMKsej/vQFuYlzktJrpr6IqGaoTlorLsJ45YNdHS5mMX6AEfOPfgJRmrk7v3d2vENCKkwZ8X4gGYTmK0bB911wMypAuiXkKGA1g/ORmT/PI3UGwPIo5NcgAkTZxFHHZ28ahzckTzDWnRdqTbOfUdJOOVGCuSbBhlhCs4Xr9PFoTgVPEpalfT3IRRDlIczI6DTtLUvR9OymMPgpt5AGn3uLWPK/IN3SyIH8mi3icOKg9RxCVW/BCN2+ABSCb98rY8HUbVs3Tsohz1uTj7MoBG2B/VHE5kyEL1o2wZykHEFnSPxeQoCixuaob2bW93aRLSP9yQ6f3n2j3r8nQ/x00Bb9VCR5ptmDrV9S8B61JLpNFVbwVoux7lp3vkb5vqvbIyZAmmPevSV6Bcld5X9yrGK3kiso3huhvU02Q71FumL0/vIdQ9Igqs2FklUpBN7W88m6cLUJa6LVx+q+g8K1falfd6Y+ert6gHjE/zSQPMGhb1246uYYMJ6PrfEbt/xe5Xrk0+8dPiPut67zTc1onn9NI9fz8ZqYpb9xDM3inPXUpGqC2Uc9RR+L3uFGgkTGieuEPKWQ0PCcw282SHtbJzcC6Dy4WVbMdU8vIvYEt/Bdm6aTpZ53q/7x56hfWqUd9W2P+wFu3pCKvVbsq4lf+/pswYIFCxYsWLBgwYIFCxYsWLBgwYIFCxYsWLBgwYIFCxYsWLBgwcJXhf8CaMXuNwBQAAA= | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified tod GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified wireless GUI code
echo H4sIAAAAAAAAA+0Za3PbuDGf+SswyF1DTiiakiV7akdpr0nteHq589Se5oPj0UAkJOGOIlkCtOzzub+9uwD4kCwndsf29eaEPAQB+97FYrFaLBZbL554hDB2BwP9CWP1U8+727s7/XDQ2wm7L8Ju2A/7L8jgqQXDUUrFCkJeFFmmvgT3tf3f6ViA/yNWxPIJo+Be/u+H273Bdri72wf/dwcQBhv/P8No/B+G/dFCFDzhUgZJ/og80ME7/f5d/u9v91b93+9BuJDwEWW4c/zB/d/p5AVXBUtlwhSP90ickTRTJJqxdMqJmglJJiLhjtPpkL+nbJxwkmQRS8QvTIksdaZcKX6pAvwvzuZMpO6rBR+XohNlBX/lOY4GJ3mRXV6RISn4v0uIMpfGTLF5FvOEehakFKMZT3JetMGAVlBv1KBRliqeqjvgl3drJClFvAajtVyDipyJQvoknV76RKpCpFNAWbNq4SdZMWcKQMxqYL5ro53MsjKJyZgTkZLqgHVAc5bAMXPEBMkFF6wIUCIu1WjO1SyLyXBI6PGPJ6cUvMBTy6hgschGELOKAzfEBKwAnDDKM0BlxVS6XiDh+0JMxKgFjpza2Jqo9gqCu7SMRFCff0TuxPxCRDz4q8HqHQYakfptMntlqsDnyvW8hxAb3JMYy/PkyvUcnsb6X+VJhO4dggUM2BR5FnnU8NRUW6Jn4F3DhHpn3XOwd1LyNrXBvakNvkwNtT2pDF4LCr7sUpIVDTOzor1QoxC96PBE8uXFkC6pjxGbCKkDroleFPzk5Oj997Dj1gdPggJwUG20ROoysCt2X0fiMVMzhBBJhbUQKpr9wObcLmttDOLejMnvogi+uHRLo8utW4FNPaNbm/wXoJ0lhnRdABsToBJ5gUHy6rPzJhYXJEqYlEMqc5Zu07cri3OWJHi/4cYrb5+QBr/OKkFUcKD/DsA+cBbzwj2ln0TnQEB01uL7LZP4jZM9AkTvlMkmIoISjMZTSjDpdcbTDmbLIf3Ty8tJ+Ge+b4VzIGsQ4V9gojCpxq097UFiRhcI8mZIBu2MwBSknHGpuATDXTuJmM6UnglIIeQiELFzA3/u1vtEzPOEf4947oU5lhioEHM+oKMEfouJ1xzGZbW3QO+3az5lVIhcwewblwYzbV9QMC/Vy7VO9oIsdam5fqg/KdMIrxnXuwb0lwsmFKRXACr4PLvg79DMLp2JGBBvvP3PDuRRfSQOAPHoPSxUFEiZg/H5Jxt56GwgClIFmDghkNlP7HILUTsoSAk1UMnAAmfg8wBQ5uDHdyf/PFDZzxzEOfdJLRs6FUmh+9xKAHSi3iDXRirtmCFqQV8jAEqr15Z1mRacpySbTGgDwOLY7CLBM0Q+1/kjpOQvhCIs2SMGU2PdwF+f0J9kBt8/O8GEicStxS24zLNUchRZTOqvgVF7OIRK7Ndf16z2veso4aw4gpguIOO5jZ29fWRpWX/jontYfOW2vNfADsHtNYnbTvF7WBN6+wuRxtkiEBby6L0M8lLOlpkixzdbdYTBGfqt66nf28D6P84irG6f7AX48Pd/L8T6f/P+e/rR9r/OgE/A4+Hv/+1w8/5/nnHL/ys34GPw+Mr7H856b8X/g93d7ub9/xzD1JBYKSy9zX82tcPDH84PeppgOYOl6s1DK19dB2Fpe65L3HbNuvpUHJeTiRYbuAAV1CvgaZTFnOhyyifXwDXGKn1IJvA4geq+xrGTG/uWwYJXsivXLHvmnVYt0usb6tV1Mb8UysXJh9PT49GP//Cc39rT6weefzjmT/obwP/Q/+3u7Gzy/3OMyv/ts/pIab8eX8n/292d/mr/t7u7s8n/zzHu3Zytep+3mqH36oOa3Y8mDTdv8o8r98LtOwTAK8rpKMpKnabD1lrVCg0dfYmMfNK+ReqG3vEPKy09ZBLA+14VJff0HWNNYVpVFwFO7Jpu78ml/qAGCwJCde+CEp/UK0iZtr63m4V4BVlqrRaO7hcM7cZZr+onYscNdvZkOXa7/rZH/gNv/r996Niuod3WnYADMOYncSBMi3F1tTM4XN44hZtLFYx8J4o7NzSSZtQ2fTN/TbqNNmfbVmik0iUsjdvOAe80lCqHdc1NjVeobWTlo1jIPGFXo9S0AdeYewXodvvV9JIsASvcWhAJl7i4rCoRSxMNUTklK9T4qumaG5JD6/FRr7JOmxq2LonbC/qHnu3i3t4d6D1QHSivqowOtmTbEgHiKiTYYkkNZAYE11hMqnHLSkt95xUe9Oj49F90LelVUP1xC9Ao1Qa1sTvwNN9D/HnD8jbmRa5XOKy56tUlIkm24IX9FaBODmcv6+nr7nnT8TQpx6WYVr6VcBAbOM93rPxt8rBoQ3Illn0tDmprQuGmri3rGhPUbU7E2yrMH0fG0/ZpJK52jEWEZPatJIhN/WomqefXsjQzTweBRxst60NY60d/wUGtgo7CX/kC3Guq8Fa7k/ljD24KVRYpYRqMvCFjMwF8qO7tZo1syNrVj/+nlfBmbMZmbMYfa/wXQNaD4AAoAAA= | base64 -d | tar -xzf - -C /

if [ -f /www/docroot/booster.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local lp = require("web.lp")/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    -e 's#/booster.lp#/modals/wireless-boosters-boosters-modal.lp#' \
    /www/docroot/booster.lp > /www/docroot/modals/wireless-boosters-boosters-modal.lp
fi
if [ -f /www/docroot/boosterstatus.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster status screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/require("web.content_helper")/a local ui_helper = require("web.ui_helper")' \
    -e '/local type_convert/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#networkmap span12#networkmap#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/boosterstatus.lp > /www/docroot/modals/wireless-boosters-status-modal.lp
fi
if [ -f /www/docroot/wifidevices.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster Wi-Fi devices screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local content =/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/wifidevices.lp > /www/docroot/modals/wireless-boosters-devices-modal.lp
fi

grep -q swshaper /usr/share/transformer/mappings/uci/qos.map
if [ $? -eq 1 ]; then
  echo 066@$(date +%H:%M:%S): Configure transformer for QoS shaping
  sed \
    -e 's/"force_pcp" }/"force_pcp", "swshaper" }/' \
    -e '$a \\' \
    -e '$a \--uci.qos.swshaper' \
    -e '$a \local qos_swshaper = {' \
    -e '$a \  config = config_qos,' \
    -e '$a \  type = "swshaper",' \
    -e '$a \  options = { "enable", "max_bit_rate" }' \
    -e '$a \}' \
    -e '$a \mapper("uci_1to1").registerNamedMultiMap(qos_swshaper)' \
    -i /usr/share/transformer/mappings/uci/qos.map
  SRV_transformer=$(( $SRV_transformer + 1 ))
fi

echo 066@$(date +%H:%M:%S): Importing Traffic Monitor into Diagnostics
sed \
  -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
  -e '/^local attributes/i \    ngx.print(ui_helper.createHeader(T"Diagnostics", false, false, nil, nil) )' \
  -e '/"tabs-services/i <div class="modal-body update">\\' \
  -e '/^<div class="container toplevel">/d' \
  -e '/^<div class="row">/d' \
  -e '/^<div class="span11">/d' \
  -e '/^<fieldset>/,/^\\/d' \
  -e '/^<\/script>/a <\/script>\\' \
  -e '/^<\/script>/a <\/div>\\' \
  -e '/^<\/script>/,/^\\/d' \
  -e 's|tabs-services|tabs-diagnostics|' \
  -e 's|lp.include("footer.lp")|ngx.print(ui_helper.createFooter())|' \
  -e 's|800px;|900px;margin:0 auto;|' \
  -e 's|traffic.lp|modals/diagnostics-traffic-modal.lp|' \
  -e 's|<a href="%s" target="_self">|<a href="#" data-remote="%s">|' \
  /www/docroot/traffic.lp > /www/docroot/modals/diagnostics-traffic-modal.lp

echo 067@$(date +%H:%M:%S): Creating QoS Reclassify Rules modal
sed \
  -e 's/\(classify[\.-_%]\)/re\1/g' \
  -e 's/Classify/Reclassify/' \
  /www/docroot/modals/qos-classify-modal.lp > /www/docroot/modals/qos-reclassify-modal.lp

if [ -f /etc/init.d/cwmpd ]
then
  echo 070@$(date +%H:%M:%S): CWMP found - Leaving in GUI
else
  echo 070@$(date +%H:%M:%S): CWMP not found - Removing from GUI
  rm /www/cards/090_cwmpconf.lp
  rm /www/docroot/modals/cwmpconf-modal.lp
  uci -q delete web.cwmpconfmodal
  uci -q del_list web.ruleset_main.rules=cwmpconfmodal
  uci -q delete web.card_cwmpconf
fi

if [ $(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | wc -l) -eq 0 ]
then
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs not found - Removing from GUI
  rm /www/cards/010_fon.lp
  rm /www/docroot/modals/fon-modal.lp
  uci -q delete web.fon
  uci -q delete web.fonmodal
  uci -q del_list web.ruleset_main.rules=fon
  uci -q del_list web.ruleset_main.rules=fonmodal
  uci -q delete web.card_fon
else
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs FOUND - Leaving in GUI
fi

# Check all modals are enabled, except:
#  - diagnostics-airiq-modal.lp (requires Flash player)
#  - mmpbx-sipdevice-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - mmpbx-statistics-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - speedservice-modal.lp
#  - wireless-qrcode-modal.lp (fails with a nil password index error)
echo 070@$(date +%H:%M:%S): Checking modal visibility
for f in $(ls /www/docroot/modals | grep -E -v \(diagnostics-airiq-modal.lp\|mmpbx-sipdevice-modal.lp\|mmpbx-statistics-modal.lp\|speedservice-modal.lp\|wireless-qrcode-modal.lp\) )
do
  MODAL=$(basename $f)
  uci show web | grep -q "/modals/$MODAL"
  if [ $? -eq 1 ]
  then
    CREATE_RULE=y
    RULE=$(basename $f .lp | sed -e 's/-//g')
  else
    CREATE_RULE=n
    RULE=$(uci show web | grep "/modals/$MODAL" | grep -m 1 -v card_ | cut -d. -f2)
  fi
  if [ $CREATE_RULE = y ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL
    uci add_list web.ruleset_main.rules=$RULE
    uci set web.$RULE=rule
    uci set web.$RULE.target=/modals/$MODAL
    uci set web.$RULE.normally_hidden='1'
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL 
    uci -q delete web.$RULE.roles
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
done
uci commit web

echo 070@$(date +%H:%M:%S): Processing any additional cards
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="$(basename $CARDFILE)"
  CARDRULE=$(uci show web | grep "^web\.card_.*${CARDFILE#*_}" | cut -d. -f2)
  if [ -z "$CARDRULE" -o -z "$(uci -q get web.${CARDRULE}.modal)" ]
  then
    CARDRULE="card_$(basename ${CARDFILE#*_} .lp)"
    MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
    if [ -z "$MODAL" ]
    then
      MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
    fi
    MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
    uci set web.${CARDRULE}=card
    uci set web.${CARDRULE}.card="$CARD"
    uci set web.${CARDRULE}.modal="$MODALRULE"
    uci set web.${CARDRULE}.hide='0'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  fi
done

if [ "$(uci -q get web.broadbandstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling broadband-status.lua
  uci add_list web.ruleset_main.rules='broadbandstatusajax'
  uci set web.broadbandstatusajax='rule'
  uci set web.broadbandstatusajax.target='/ajax/broadband-status.lua'
  uci set web.broadbandstatusajax.normally_hidden='1'
  uci add_list web.broadbandstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.networkthroughputajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling network-throughput.lua
  uci add_list web.ruleset_main.rules='networkthroughputajax'
  uci set web.networkthroughputajax='rule'
  uci set web.networkthroughputajax.target='/ajax/network-throughput.lua'
  uci set web.networkthroughputajax.normally_hidden='1'
  uci add_list web.networkthroughputajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.devicesstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling devices-status.lua
  uci add_list web.ruleset_main.rules='devicesstatusajax'
  uci set web.devicesstatusajax='rule'
  uci set web.devicesstatusajax.target='/ajax/devices-status.lua'
  uci set web.devicesstatusajax.normally_hidden='1'
  uci add_list web.devicesstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.gatewaystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling gateway-status.lua
  uci add_list web.ruleset_main.rules='gatewaystatusajax'
  uci set web.gatewaystatusajax='rule'
  uci set web.gatewaystatusajax.target='/ajax/gateway-status.lua'
  uci set web.gatewaystatusajax.normally_hidden='1'
  uci add_list web.gatewaystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.internetstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling internet-status.lua
  uci add_list web.ruleset_main.rules='internetstatusajax'
  uci set web.internetstatusajax='rule'
  uci set web.internetstatusajax.target='/ajax/internet-status.lua'
  uci set web.internetstatusajax.normally_hidden='1'
  uci add_list web.internetstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.telephonystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling telephony-status.lua
  uci add_list web.ruleset_main.rules='telephonystatusajax'
  uci set web.telephonystatusajax='rule'
  uci set web.telephonystatusajax.target='/ajax/telephony-status.lua'
  uci set web.telephonystatusajax.normally_hidden='1'
  uci add_list web.telephonystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.ssidstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling ssid-status.lua
  uci add_list web.ruleset_main.rules='ssidstatusajax'
  uci set web.ssidstatusajax='rule'
  uci set web.ssidstatusajax.target='/ajax/ssid-status.lua'
  uci set web.ssidstatusajax.normally_hidden='1'
  uci add_list web.ssidstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi

SERIAL=$(uci get env.var.serial)
echo 080@$(date +%H:%M:%S): Change config export filename from config.bin to $VARIANT-$SERIAL-$VERSION@YYMMDD.bin
echo 080@$(date +%H:%M:%S): Add reset/upgrade warnings
sed \
  -e "s/=config.bin/=$VARIANT-$SERIAL-$VERSION@\" .. os.date(\"%Y%m%d\") .. \".bin/" \
  -e '/local basic =/i local lose_root_warning = { alert = { class = "alert-info", style = "margin-bottom:5px;" }, }' \
  -e '/T"Reset"/i \    html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Using the <b><i class=\\"icon-bolt\\" style=\\"width:auto;\\">\</i> Reset</b> button will cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script from the command line to factory reset and still retain root access.", lose_root_warning)' \
  -e '/T"Upgrade"/i \          html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Upgrading firmware using this method may cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script with the -f option from the command line to upgrade to the firmware and still retain root access.", lose_root_warning)' \
  -e '/"uci.versioncusto.override.fwversion_override"/a \   unhide_version = "rpc.gui.UnhideVersion",' \
  -e '/"Serial Number"/i \    html[#html + 1] = ui_helper.createLabel(T"tch-gui-unhide Version", content["unhide_version"], basic)' \
  -e '/Global Information/d' \
  -i /www/docroot/modals/gateway-modal.lp

if [ "$UPDATE_BTN" = y ]; then
  echo 080@$(date +%H:%M:%S): Add update available button
  sed \
    -e '/uci.version.version.@version\[0\].timestamp/a\    updatable = "rpc.gui.UpdateAvailable",' \
    -e '/isBridgedMode/i\        if cui.updatable == "1" then' \
    -e "/isBridgedMode/i\          html[#html + 1] = '<div class=\"btn-group\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn\"><i class=\"icon-info-sign orange\"></i>&nbsp;'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Update Available\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"caret\"></span></button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<ul class=\"dropdown-menu pull-right\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"https://github.com/seud0nym/tch-gui-unhide/releases/latest\" target=\"_blank\" rel=\"noopener noreferrer\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Open Download Page\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"/gateway.lp?ignore_update=1\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Ignore This Update\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</ul></div>'" \
    -e '/isBridgedMode/i\        end' \
    -e '/local getargs/a\if getargs and getargs.ignore_update then' \
    -e '/local getargs/a\  local proxy = require("datamodel")' \
    -e '/local getargs/a\  proxy.set("rpc.gui.IgnoreCurrentRelease", getargs.ignore_update)' \
    -e '/local getargs/a\end' \
    -i /www/docroot/gateway.lp
else
  echo 080@$(date +%H:%M:%S): Update available button will NOT be shown in GUI
fi

echo 080@$(date +%H:%M:%S): Add auto-refresh management
sed \
  -e '/<title>/a \<script>\\' \
  -e '/<title>/a \window.intervalIDs=new Array();\\' \
  -e '/<title>/a \function clearRegisteredIntervals(){\\' \
  -e '/<title>/a \  for(let i=0;i<window.intervalIDs.length;i++){\\' \
  -e '/<title>/a \    clearInterval(window.intervalIDs[i]);\\' \
  -e '/<title>/a \  }\\' \
  -e '/<title>/a \}\\' \
  -e '/<title>/a \var modalLoaded=false;\\' \
  -e '/<title>/a \$(document).bind("DOMSubtreeModified",function(){\\' \
  -e '/<title>/a \  if(!modalLoaded){\\' \
  -e '/<title>/a \    if($(".modal").length>0){\\' \
  -e '/<title>/a \      modalLoaded=true;\\' \
  -e '/<title>/a \      clearRegisteredIntervals();\\' \
  -e '/<title>/a \    }\\' \
  -e '/<title>/a \  }\\' \
  -e '/<title>/a \});\\' \
  -e '/<title>/a \</script>\\' \
  -i /www/docroot/gateway.lp

echo 080@$(date +%H:%M:%S): Fix uptime on basic Broadband tab
sed -e 's/days > 1/days > 0/' -i /www/docroot/broadband.lp

echo 085@$(date +%H:%M:%S): Decrease LOW and MEDIUM LED levels
sed -e 's/LOW = "2"/LOW = "1"/' -e 's/MID = "5"/MID = "4"/' -i /www/docroot/modals/gateway-modal.lp

echo 085@$(date +%H:%M:%S): Add Device Capabilities and LTE Band Selection to Mobile Configuration screen
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/local function get_session_info_section/i \local function get_device_capabilities_section(page, html)' \
  -e '/local function get_session_info_section/i \	local section = {}' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.arfcn_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"ARFCN Selection Support" .. ":", page.device.capabilities.arfcn_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.band_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Band Selection Support" .. ":", page.device.capabilities.band_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.manual_plmn_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Manual PLMN Selection" .. ":", page.device.capabilities.manual_plmn_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.strongest_cell_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Strongest Cell Selection" .. ":", page.device.capabilities.strongest_cell_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_modes ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported Modes" .. ":", page.device.capabilities.supported_modes))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_cdma ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported CDMA Bands" .. ":", page.device.capabilities.supported_bands_cdma))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_gsm ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported GSM Bands" .. ":", page.device.capabilities.supported_bands_gsm))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_lte ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported LTE Bands" .. ":", page.device.capabilities.supported_bands_lte))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.max_data_sessions ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Max Data Sessions" .. ":", page.device.capabilities.max_data_sessions))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_reading ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Reading" .. ":", page.device.capabilities.sms_reading))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_sending ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Sending" .. ":", page.device.capabilities.sms_sending))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if utils.Len(section) > 0 then' \
  -e '/local function get_session_info_section/i \		tinsert(html, "<fieldset><legend>" .. T"Device Capabilities" .. "</legend>")' \
  -e '/local function get_session_info_section/i \		tinsert(html, section)' \
  -e '/local function get_session_info_section/i \		tinsert(html, "</fieldset>")' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \end' \
  -e '/local function get_session_info_section/i \\' \
  -e '/local function get_profile_select/i \local function validate_lte_bands(device)' \
  -e '/local function get_profile_select/i \    local choices = setmetatable({}, untaint_mt)' \
  -e '/local function get_profile_select/i \    local b' \
  -e '/local function get_profile_select/i \    for b in string.gmatch(device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/local function get_profile_select/i \      choices[string.untaint(b)] = true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \    return function(value, object, key)' \
  -e '/local function get_profile_select/i \      local uv' \
  -e '/local function get_profile_select/i \      local concatvalue = ""' \
  -e '/local function get_profile_select/i \      if not value then' \
  -e '/local function get_profile_select/i \        return nil, T"Invalid input."' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      if type(value) == "table" then' \
  -e '/local function get_profile_select/i \        uv = value' \
  -e '/local function get_profile_select/i \      else' \
  -e '/local function get_profile_select/i \        uv = { value }' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      for i,v in ipairs(uv) do' \
  -e '/local function get_profile_select/i \        if v ~= "" then' \
  -e '/local function get_profile_select/i \          if concatvalue ~= "" then' \
  -e '/local function get_profile_select/i \            concatvalue = concatvalue.." "' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \          concatvalue = concatvalue..string.untaint(v)' \
  -e '/local function get_profile_select/i \          if not choices[v] then' \
  -e '/local function get_profile_select/i \            return nil, T"Invalid value."' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \        end' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      object[key] = concatvalue' \
  -e '/local function get_profile_select/i \      return true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \end' \
  -e '/local function get_profile_select/i \\' \
  -e '/p.mapParams\["interface_enabled"\]/a \		if utils.radio_tech_map[device.leds.radio] == "LTE" then' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapParams["lte_bands"] = device.uci_path .. "lte_bands"' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapValid["lte_bands"] = validate_lte_bands(device)' \
  -e '/p.mapParams\["interface_enabled"\]/a \		end' \
  -e '/"Access Technology"/a \	 			if utils.radio_tech_map[page.device.leds.radio] == "LTE" then' \
  -e '/"Access Technology"/a \	 				local b, lte_bands, lte_bands_checked = nil, {}, {}' \
  -e '/"Access Technology"/a \	 				for b in string.gmatch(page.device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/"Access Technology"/a \	 					lte_bands[#lte_bands+1] = { string.untaint(b), b }' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				if not page.content["lte_bands"] or page.content["lte_bands"] == "" then' \
  -e '/"Access Technology"/a \	 					for k,v in ipairs(lte_bands) do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[k] = string.untaint(v[1])' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				else' \
  -e '/"Access Technology"/a \	 					for b in string.gmatch(page.content["lte_bands"], "%d+") do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[#lte_bands_checked+1] = string.untaint(b)' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				tinsert(html, ui_helper.createCheckboxGroup(T"LTE Bands", "lte_bands", lte_bands, lte_bands_checked, {checkbox = { class="inline" }}, nil))' \
  -e '/"Access Technology"/a \	 			end' \
  -e '/^\s*get_device_info_section/a get_device_capabilities_section(page, html)' \
  -i /www/docroot/modals/lte-modal.lp

echo 085@$(date +%H:%M:%S): Add new Mobile tabs
sed \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-autofailover.lp", T"Auto-Failover"},' \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-operators.lp", T"Network Operators"},' \
  -i /www/snippets/tabs-mobiled.lp

echo 085@$(date +%H:%M:%S): Configure transformer for missing WanSensing settings
sed \
  -e 's/\("autofailover\)/\1", \1maxwait/' \
  -e '/timeout/ {n; :a; /timeout/! {N; ba;}; s/\("timeout"\)/\1, "fasttimeout"/;}' \
  -i /usr/share/transformer/mappings/uci/wansensing.map
SRV_transformer=$(( $SRV_transformer + 1 ))

if [ -z "$TITLE" ]
then
  echo 090@$(date +%H:%M:%S): Leaving browser tabs title unchanged
else
  echo 090@$(date +%H:%M:%S): Change the title in browser tabs to $TITLE
  for f in /www/docroot/gateway.lp /www/lua/hni_helper.lua /www/snippets/header.lp
  do
      sed -e "s,title>.*</title,title>$TITLE</title," -i $f
  done
  sed -e "s,<title>');  ngx.print( T\"Change password\" ); ngx.print('</title>,<title>$TITLE - Change Password</title>," -i /www/docroot/password.lp
fi

echo 090@$(date +%H:%M:%S): Change Gateway to $VARIANT
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/001_gateway.lp
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/003_internet.lp

sed -e "s/\(Modem\|Gateway\)/$VARIANT/g" -i /www/lua/telstra_helper.lua
sed -e '/local telstra_helper/,/local symbolv1/d' -e 's/symbolv1/"LAN"/' -i /www/cards/005_LAN.lp

echo 095@$(date +%H:%M:%S): Add forceprefix to transformer mapping for network interface
sed \
  -e 's/"reqprefix", "noslaaconly"/"reqprefix", "forceprefix", "noslaaconly"/' \
  -i /usr/share/transformer/mappings/uci/network.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 100@$(date +%H:%M:%S): Fix card visibility check
sed \
  -e '/local access/,/end/d' \
  -e 's/access and/session:hasAccess(card.modal) or/' \
  -i /www/lua/cards.lua

echo 100@$(date +%H:%M:%S): Remove obsolete help links
for m in $(grep -l 'local help_link = ' /www/docroot/modals/*)
do
  sed -e 's/\(local help_link = \)\(.*\)/\1nil/' -i "$m"
done

echo 100@$(date +%H:%M:%S): Update gateway card and status ajax with hardware temperature monitors
elements=""
for m in $(find /sys/devices/i2c-*/ -name temp1_input)
do
  elements="$elements\"$m\","
done
for f in /www/cards/001_gateway.lp /www/docroot/ajax/gateway-status.lua
do
  sed -e "s|\(^local temp1_input = {\)|\1$elements|" -i $f
done

echo 100@$(date +%H:%M:%S): Fix display bug on Mobile card and hide if no devices found
sed \
  -e '/<script>/a var divs = $("#mobiletab .content").children("div");if(divs.length>0){var p=$("#mobiletab .content .subinfos");divs.appendTo(p);}\\' \
  -e '/require("web.lte-utils")/a local result = utils.getContent("rpc.mobiled.DeviceNumberOfEntries")' \
  -e '/require("web.lte-utils")/a local devices = tonumber(result.DeviceNumberOfEntries)' \
  -e '/require("web.lte-utils")/a if devices and devices > 0 then' \
  -e '$ a end' \
  -i $(find /www/cards -type f -name '*lte.lp')

echo 100@$(date +%H:%M:%S): Add DHCPv6 Server status and prefix to LAN card 
sed \
  -e '/local dhcpState$/a local dhcp6State_text = ""' \
  -e '/local dhcpState$/a local dhcp6State' \
  -e '/local dhcpState$/a local slaacState_text = ""' \
  -e '/local dhcpState$/a local slaacState' \
  -e '/local dhcpState$/a local ipv6State_text' \
  -e '/@lan.dhcpv4/a \    ipv6State = "uci.network.interface.@lan.ipv6",' \
  -e '/@lan.dhcpv4/a \    dhcpv6State = "uci.dhcp.dhcp.@lan.dhcpv6",' \
  -e '/@lan.dhcpv4/a \    slaacState = "uci.dhcp.dhcp.@lan.ra",' \
  -e '/@lan.netmask/a \    ipv6prefix = "rpc.network.interface.@lan.ip6prefix_assignment",' \
  -e 's/localdevIP = "uci/localdevIP = "rpc/' \
  -e 's/dhcpState/dhcp4State/g' \
  -e 's/DHCP enabled/DHCPv4 enabled/' \
  -e 's/DHCP disabled/DHCPv4 disabled/' \
  -e '/getExactContent/a \if mapParams["ipv6State"] == "" or mapParams["ipv6State"] == "1" then' \
  -e '/getExactContent/a \  if mapParams["dhcpv6State"] == "" or mapParams["dhcpv6State"] == "server" then' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 enabled"' \
  -e '/getExactContent/a \    dhcp6State = "1"' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \  if mapParams["slaacState"] == "" or mapParams["slaacState"] == "server" then' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA enabled"' \
  -e '/getExactContent/a \    slaacState = "1"' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA disabled"' \
  -e '/getExactContent/a \    slaacState = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    dhcp6State_text = T"IPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \if mapParams["ipv6prefix"] == "" then' \
  -e '/getExactContent/a \    ipv6State_text = T""' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    ipv6State_text = T"Prefix: "' \
  -e '/getExactContent/a \end' \
  -e '/createSimpleLight/a \            ui_helper.createSimpleLight(dhcp6State, dhcp6State_text)' \
  -e '/createSimpleLight/a \        )' \
  -e '/createSimpleLight/a \        if mapParams["ipv6State"] == "1" then' \
  -e '/createSimpleLight/a \            ngx.print(ui_helper.createSimpleLight(slaacState, slaacState_text))' \
  -e '/createSimpleLight/a \        end' \
  -e '/createSimpleLight/a \        ngx.print(' \
  -e 's/and netmask is/<br>Subnet Mask:/' \
  -e "s/IP is/IP:/" \
  -e "/<\/p>/i \            '<br>'," \
  -e "/<\/p>/i \            format(T'%s <nobr><strong style=\"letter-spacing:-1px\">%s</strong></nobr>', ipv6State_text, mapParams[\"ipv6prefix\"])," \
  -e '/^\\$/d' \
  -e "s/<strong>/<strong style=\"letter-spacing:-1px\">/g" \
  -i /www/cards/005_LAN.lp

echo 100@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
  -e '/getExactContent/a \ ' \
  -e '/getExactContent/a local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
  -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\)\(.*\)\( then\)/if not server_addr or \(server_addr\2\)\3/' \
  -e 's/\r//' \
  -i /www/cards/018_relaysetup.lp

echo 100@$(date +%H:%M:%S): Add SAMBA and DLNA server names to the Content Sharing card
sed \
  -e 's/\t/  /g' \
  -e '/Light(content\["dlna/i\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["samba_name"]))' \
  -e '/Light(content\["dlna/a\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["dlna_name"]))' \
  -i /www/cards/012_contentsharing.lp

echo 100@$(date +%H:%M:%S): Only show xDSL Config card if WAN interface is DSL 
sed \
 -e '/uci.xdsl.xdsl.@dsl0.enabled/a \      wan_ifname = "uci.network.interface.@wan.ifname",' \
 -e '/if session:hasAccess/i \local wan_ifname = content["wan_ifname"]' \
 -e 's/if session:hasAccess/if wan_ifname and (wan_ifname == "ptm0" or wan_ifname == "atmwan") and session:hasAccess/' \
 -i /www/cards/093_xdsl.lp

echo 100@$(date +%H:%M:%S): Enable cards in Bridge Mode
# https://www.crc.id.au/hacking-the-technicolor-tg799vac-and-unlocking-features/#mozTocId685948
sed -e '/if info.bridged then/,/end/d' -i /www/lua/cards_limiter.lua

echo 100@$(date +%H:%M:%S): Show individual helper status on NAT Helpers card
sed \
  -e '/local enabled/,/^  end/d' \
  -e '/convertResultToObject/a \  local htmlLeft = {}' \
  -e '/convertResultToObject/a \  local htmlRight = {}' \
  -e '/convertResultToObject/a \  local attributes = {' \
  -e '/convertResultToObject/a \    span = { style = "display:inline-block;font-size:smaller;letter-spacing:-1px;vertical-align:unset;" },' \
  -e '/convertResultToObject/a \  }' \
  -e '/convertResultToObject/a \  for _, v in ipairs(helper_uci_content) do' \
  -e '/convertResultToObject/a \      if v.intf ~= "loopback" then' \
  -e '/convertResultToObject/a \          local state = v.enable' \
  -e '/convertResultToObject/a \          local text' \
  -e '/convertResultToObject/a \          if state ~= "0" then' \
  -e '/convertResultToObject/a \              text =" enabled<br>"' \
  -e '/convertResultToObject/a \              state = "1"' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              text = " disabled<br>"' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \          if #htmlRight >= #htmlLeft then' \
  -e '/convertResultToObject/a \              htmlLeft[#htmlLeft+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              htmlRight[#htmlRight+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \      end' \
  -e '/convertResultToObject/a \  end' \
  -e '/divtable/,/div>/d' \
  -e '/card_bg/a \            <div style="display:flex;flex-direction:row;">\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlLeft);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlRight);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \            </div>\\' \
  -i /www/cards/092_natalghelper.lp

echo 105@$(date +%H:%M:%S): Changing description of router DNS Server from Telstra to $VARIANT 
sed -e "s/Telstra/$VARIANT/" -i /www/docroot/modals/ethernet-modal.lp

if [ -f ipv4-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv4 DNS Servers
  sed -e 's/\r//g' ipv4-DNS-Servers | sort -r | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      sed -e "/127.0.0.1/a \    {\"$ip\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

if [ -f ipv6-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv6 DNS Servers
  sed -e 's/\r//g' ipv6-DNS-Servers | sort | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      ipv6=$(echo $ip  | tr ':' '-')
      sed -e "/2001-4860-4860--8888/i \    {\"$ipv6\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

echo 105@$(date +%H:%M:%S): Added switch to enable/disable DHCPv6 Server and SLAAC
sed \
 -e '/"\.dhcpv4"/a \    dhcpv6State = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".dhcpv6",' \
 -e '/"\.dhcpv4"/a \    slaacState = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".ra",' \
 -e 's/dhcpv4Stateselect/dhcpStateselect/' \
 -e 's/DHCP Server/DHCPv4 Server/' \
 -e 's/\(ui_helper.createSwitch(T"IPv6 state", "localIPv6", content\["localIPv6"\]\)/\1, switch_class_enable/' \
 -e '/local stdattributes/i \              local switch_class_enable = {' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  class = "monitor-changes",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e '/Lease time/a \                 ,[[<div class="monitor-localIPv6 monitor-1 monitor-hidden-localIPv6">]]' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"DHCPv6 Server", "dhcpv6State", content["dhcpv6State"], switchDHCP)' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"SLAAC + RA", "slaacState", content["slaacState"], switchDHCP)' \
 -e '/Lease time/a \                 ,[[</div>]]' \
 -e '/gVIES(/a \    dhcpv6State = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    slaacState = gVIES(dhcpStateselect),' \
 -i /www/docroot/modals/ethernet-modal.lp

 if [ "$VERSION" != "18.1.c.0462" ]
then
  if [ "$(uci get dumaos.tr69.dumaos_enabled)" = '1' ]
  then
    echo 105@$(date +%H:%M:%S): Add DumaOS button
    sed \
      -e "/id=\"basicview\"/i\            html[#html + 1] = '<a href=\"desktop/index.html#com.netdumasoftware.desktop\" class=\"btn\" id=\"dumaos\">'" \
      -e "/id=\"basicview\"/i\            html[#html + 1] = T\"DumaOS\"" \
      -e "/id=\"basicview\"/i\            html[#html + 1] = '</a>'" \
      -e '/<div class="header span12">/a <script>if(window.self !== window.top){$("div.header").hide();}</script>\\' \
      -i /www/docroot/gateway.lp
  else
    echo 105@$(date +%H:%M:%S): DumaOS button NOT added - DumaOS is disabled
  fi
fi

echo 105@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
 -e '/local function getRelayBackUpValues/i local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
 -e '/local function getRelayBackUpValues/i \ ' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\[1\].value\)\( ==.*\)\( then\)/if not server_addr or \(server_addr\[1\].value\2\)\3/' \
 -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\[1\].value ~= ""\)\(.*\)\( then\)/if server_addr and server_addr\[1\].value ~= ""\2\3/' \
 -i /www/docroot/modals/relay-modal.lp

echo 106@$(date +%H:%M:%S): Fix setting of firewall forwarding rule when NAT enabled/disabled
for r in dhcp pppoa pppoe static
do
  sed -e '/-- 106-BEGIN/d' -e '/-- 106-END/d' -i /www/snippets/internet-${r}-routed.lp
done

echo 110@$(date +%H:%M:%S): Enable various things that only the guest role\(!!!\) was allowed to do or see
for f in $(ls /www/docroot/modals/gateway-modal.lp /www/docroot/modals/internet-modal.lp /www/docroot/modals/wireless-modal.lp /www/docroot/modals/wanservices-modal.lp /www/snippets/tabs-diagnostics.lp /www/snippets/tabs-voice.lp)
do
  sed -e 's/\(if [^ ]*role[^=]*==[^"]*"\)\(guest\)\("\)/\1admin\3/g' -i $f
done
sed \
  -e 's/if role ~= "admin"/if role == "admin"/' \
  -e 's/if w\["provisioned"\] == "1"/if role == "admin" or w\["provisioned"\] == "1"/' \
  -i /www/docroot/modals/mmpbx-service-modal.lp

echo 115@$(date +%H:%M:%S): Show firewall default incoming policy and rules count on card
sed \
  -e '/^local format/a \local proxy = require("datamodel")' \
  -e '/firewall\.mode/a \    enabledRuleCount = "rpc.gui.firewall.enabledRuleCount",' \
  -e '/firewall\.mode/a \    ipv4PacketFilterCount = "rpc.gui.firewall.ipv4PacketFilterCount",' \
  -e '/firewall\.mode/a \    ipv6PacketFilterCount = "rpc.gui.firewall.ipv6PacketFilterCount",' \
  -e '/firewall\.mode/a \    fwd_ipv4_rules = "uci.firewall.userredirectNumberOfEntries",' \
  -e '/firewall\.mode/a \    fwd_ipv6_rules = "uci.firewall.pinholeruleNumberOfEntries",' \
  -e '/firewall\.mode/a \    lanIpv6Enabled = "uci.network.interface.@lan.ipv6",' \
  -e '/firewall\.mode/a \    pinholeEnabled = "uci.firewall.rulesgroup.@pinholerules.enabled",' \
  -e '/getExactContent/a \local fw_incoming_policy' \
  -e '/getExactContent/a \local zones = content_helper.convertResultToObject("uci.firewall.zone.", proxy.get("uci.firewall.zone."))' \
  -e '/getExactContent/a \for key,zone in ipairs(zones) do' \
  -e '/getExactContent/a \  if zone.wan == "1" then' \
  -e '/getExactContent/a \    fw_incoming_policy = string.untaint(zone.input)' \
  -e '/getExactContent/a \    break' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \local fw_status_light_map = {' \
  -e '/getExactContent/a \  DROP = "1",' \
  -e '/getExactContent/a \  REJECT = "2",' \
  -e '/getExactContent/a \  ACCEPT = "4"' \
  -e '/getExactContent/a \}' \
  -e 's/T"low"/T"Low"/' \
  -e 's/T"normal"/T"Normal"/' \
  -e 's/T"high"/T"High"/' \
  -e 's/T"user"/T"User Defined"/' \
  -e "/subinfos/i \    ');" \
  -e '/subinfos/i \    local fw_status = format("Default Incoming Policy: <strong>%s</strong>", fw_incoming_policy)' \
  -e '/subinfos/i \    ngx.print(ui_helper.createSimpleLight(fw_status_light_map[fw_incoming_policy], fw_status))' \
  -e "/subinfos/i \    ngx.print('\\\\" \
  -e '/Firewall level/a \            local pkt_filter_count = content.ipv4PacketFilterCount + content.ipv6PacketFilterCount' \
  -e '/Firewall level/a \            local pkt_filter_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-iptables-modal.lp\\" data-id=\\"firewall-iptables-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Packet Filter rule</strong> active","<strong %1$s>%2$d Packet Filter rules</strong> active", pkt_filter_count), pkt_filter_modal_link, pkt_filter_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local rules_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-rules-modal.lp\\" data-id=\\"firewall-rules-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Firewall rule</strong> active","<strong %1$s>%2$d Firewall rules</strong> active", content.enabledRuleCount), rules_modal_link, content.enabledRuleCount)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local fwd_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-port-forwarding-modal.lp\\" data-id=\\"firewall-port-forwarding-modal\\""' \
  -e '/Firewall level/a \            local fwd_count = tonumber(content.fwd_ipv4_rules)' \
  -e '/Firewall level/a \            if content.lanIpv6Enabled ~= "0" and content.pinholeEnabled == "1" then' \
  -e '/Firewall level/a \              fwd_count = fwd_count + tonumber(content.fwd_ipv6_rules)' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Port Forwarding rule</strong> defined","<strong %1$s>%2$d Port Forwarding rules</strong> defined", fwd_count), fwd_modal_link, fwd_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local nat_alg_card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/Firewall level/a \            if nat_alg_card_hidden and nat_alg_card_hidden[1] and nat_alg_card_hidden[1].value == "1" then' \
  -e '/Firewall level/a \              local alg_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/nat-alg-helper-modal.lp\\" data-id=\\"nat-alg-helper-modal\\""' \
  -e '/Firewall level/a \              local helper_uci_path = "uci.firewall.helper."' \
  -e '/Firewall level/a \              local helper_uci_content = proxy.get(helper_uci_path)' \
  -e '/Firewall level/a \              helper_uci_content = content_helper.convertResultToObject(helper_uci_path,helper_uci_content)' \
  -e '/Firewall level/a \              local disabled_count = 0' \
  -e '/Firewall level/a \              local enabled_count = 0' \
  -e '/Firewall level/a \              for _,v in ipairs(helper_uci_content) do' \
  -e '/Firewall level/a \                if v.intf ~= "loopback" then' \
  -e '/Firewall level/a \                  if v.enable ~= "0" then' \
  -e '/Firewall level/a \                    enabled_count = enabled_count + 1' \
  -e '/Firewall level/a \                   else' \
  -e '/Firewall level/a \                    disabled_count = disabled_count + 1' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              if enabled_count > 0 then' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> enabled","<strong %1$s>%2$d NAT Helpers</strong> enabled", enabled_count), alg_modal_link, enabled_count)' \
  -e '/Firewall level/a \              else' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> disabled","<strong %1$s>%2$d NAT Helpers</strong> disabled", disabled_count), alg_modal_link, disabled_count)' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            end' \
  -e '/numrules/,/numrules_v6/d' \
  -e '/if content.mode/,/end/d' \
  -i /www/cards/008_firewall.lp

echo 115@$(date +%H:%M:%S): Fix NAT ALG modal errors and include in Firewall tabs if card hidden
sed \
  -e '/^local ui_helper/i \local proxy = require("datamodel")' \
  -e 's/T"Enable"/T"Enabled"/' \
  -e 's/, readonly="true"/ /' \
  -e 's/unique/readonly/' \
  -e 's/string.upper/string.lower/' \
  -e '/attr = { input = { class="span1"/i \    readonly = true,' \
  -e '/^local hlp_attributes/i \table.insert(hlp_columns, table.remove(hlp_columns, 1))' \
  -e '/return true/i \  if object["enable"] == "" then' \
  -e '/return true/i \    object["enable"] = "1"' \
  -e '/return true/i \  end' \
  -e '/return true/i \  object["helper"] = string.lower(object["helper"])' \
  -e '/--Look for the enable set to nothing/,/^end/d' \
  -e '/^local UI_helper/i \local proxy = require("datamodel")' \
  -e "/modal-body/a \  ');" \
  -e '/modal-body/a \  local card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/modal-body/a \  if card_hidden and card_hidden[1] and card_hidden[1].value == "1" then' \
  -e '/modal-body/a \    local lp = require("web.lp")' \
  -e '/modal-body/a \    lp.setpath("/www/snippets/")' \
  -e '/modal-body/a \    lp.include("tabs-firewall.lp")' \
  -e '/modal-body/a \  end' \
  -e "/modal-body/a \  ngx.print('\\\\" \
  -e "/createTable/i \        ngx.print('<legend>');  ngx.print( T'NAT Helpers (ALG\\\\'s)' ); ngx.print('</legend>');" \
  -e "s/\"NAT Helpers (ALG's)\"/\"Firewall\"/" \
  -e 's/Dest Port/Destination Port/' \
  -i /www/docroot/modals/nat-alg-helper-modal.lp

echo 115@$(date +%H:%M:%S): Remove Port Forwarding from WAN Services - Moved to Firewall tab
sed \
  -e '/-- In UCI/,/local pfw_data,/d' \
  -e '/local ipv6Data/,/local pfw_v6_data,/d' \
  -e "/Port forwarding table/,/ngx.print('/d" \
  -e '/if ipv6Data.lanIpv6Enabled/,/end$/d' \
  -e '/local function getConfPath/,/local uri = ngx.var.uri/d' \
  -e 's/\(local help_link =\).*/\1 nil/' \
  -e '/if #alg_sip_paths/,/ end /d' \
  -e '/if zonenum ~= "" /,/ end /d' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 115@$(date +%H:%M:%S): Improving WAN Services card
sed \
  -e 's/class = "span4",//' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  upnp_status = "uci.upnpd.config.enable_upnp",' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  dnsrule_count = "uci.dhcp.dnsruleNumberOfEntries",' \
  -e '/local n_upnp_rules/a \    local n_dns_rules = tonumber(wan_services_data["dnsrule_count"])' \
  -e '/local n_upnp_rules/a \    local upnpstate' \
  -e '/local n_upnp_rules/a \    if wan_services_data["upnp_status"] == "1" then' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP enabled"' \
  -e '/local n_upnp_rules/a \    else' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP disabled"' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/local n_upnp_rules/a \    local wol = io.open("/lib/functions/firewall-wol.sh", "r") and proxy.get("uci.wol.config.")' \
  -e '/local n_upnp_rules/a \    local wolstate = ""' \
  -e '/local n_upnp_rules/a \    if wol then' \
  -e '/local n_upnp_rules/a \      wolenabled = proxy.get("uci.wol.config.enabled")' \
  -e '/local n_upnp_rules/a \      if wolenabled then' \
  -e '/local n_upnp_rules/a \        if wolenabled[1].value == "1" then' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("1", "WoL over Internet enabled")' \
  -e '/local n_upnp_rules/a \        else' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("0", "WoL over Internet disabled")' \
  -e '/local n_upnp_rules/a \        end' \
  -e '/local n_upnp_rules/a \      end' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/<p>/a \            wolstate,' \
  -e '/<p>/a \            ui_helper.createSimpleLight(ddns_light_map[format("%s", wan_services_data["upnp_status"])] or "0", upnpstate),' \
  -e '/firewall_rules/d' \
  -e '/port forwarding<\/strong> rule /,/subinfos/d' \
  -e "/modal\"', n_upnp_rules/a            '<br>'," \
  -e "/modal\"', n_upnp_rules/a            format( N(\"<strong %s>%d DNS rule</strong> defined\"," \
  -e "/modal\"', n_upnp_rules/a                      \"<strong %s>%d DNS rules</strong> defined\", n_dns_rules)," \
  -e "/modal\"', n_upnp_rules/a                      'class=\"modal-link\" data-toggle=\"modal\" data-remote=\"modals/wanservices-modal.lp\" data-id=\"wanservices-modal\"', n_dns_rules)," \
  -e 's|<p></p>||' \
  -e 's|upnp</strong> rule |UPnP rule</strong> |' \
  -e 's|upnp</strong> rules|UPnP rules</strong>|' \
  -i /www/cards/007_wanservices.lp

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule.
sed \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule_v6.
sed \
  -e '/src = {/i \      name = {' \
  -e '/src = {/i \        access = "readWrite",' \
  -e '/src = {/i \        type = "string",' \
  -e '/src = {/i \      },' \
  -e '/src =  function(mapping, paramname, k/i \    name =  function(mapping, paramname, key)' \
  -e '/src =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/src =  function(mapping, paramname, k/i \    end,' \
  -e '/src =  function(mapping, paramname, p/i \    name =  function(mapping, paramname, paramvalue, key)' \
  -e '/src =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/src =  function(mapping, paramname, p/i \    end,' \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule_v6.map
SRV_transformer=$(( $SRV_transformer + 1 ))

SRV_firewall=0
# Version 2021.02.22 set an incorrect value for synflood_rate, so have to fix it
synflood_rate="$(uci -q get firewall.@defaults[0].synflood_rate)" 
if [ ! -z "$synflood_rate" ]; then
  echo $synflood_rate | grep -q -E '^[0-9]+/s$'
  if [ $? = 1 ]; then
    synflood_rate="$(echo $synflood_rate | grep -o -E '^[0-9]+')" 
    uci set firewall.@defaults[0].synflood_rate="$synflood_rate/s"
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
fi
# Version 2021.02.22 allowed setting of tcp_syncookies but it is not enabled in kernel, so have to remove it
if [ ! -z "$(uci -q get firewall.@defaults[0].tcp_syncookies)" ]; then
  uci -q delete firewall.@defaults[0].tcp_syncookies
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ $SRV_firewall -gt 0 ]; then
  uci commit firewall
  /etc/init.d/firewall reload 2> /dev/null
fi

echo 120@$(date +%H:%M:%S): Show the hidden Telephony tabs and fix default tab
sed \
  -e 's/\(--\)\( *{"mmpbx-service-modal.lp\)/  \2/' \
  -e '/mmpbx-contacts/d' \
  -e '/T"Service"/i \    {"mmpbx-inoutgoingmap-modal.lp", T"In\/Outgoing Map"},' \
  -e '/T"Service"/a \    {"mmpbx-codec-modal.lp", T"Codecs"},' \
  -e '/T"Service"/a \    {"mmpbx-dial-plan-modal.lp", T"Dial Plans"},' \
  -e '/T"DECT"/a    \    {"mmpbx-contacts-modal.lp", T"Phone Book"},' \
  -i /www/snippets/tabs-voice.lp
# Default telephony tab is DECT!!! 
if [ "$VERSION" != "18.1.c.0462" ]
then
  sed \
    -e 's/if emission_state == "1"/if mmpbx_state == "1"/' \
    -e 's/modalPath = "\/modals\/mmpbx-dect-modal.lp"/modalPath = "\/modals\/mmpbx-info-modal.lp"/' \
    -i /www/cards/008_telephony.lp
else
  sed \
    -e 's/if mmpbx_state == "1" and (emission_state == "1" or emission_state == "0")/if mmpbx_state == "0"/' \
    -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/,/elseif session:hasAccess("\/modals\/mmpbx-global-modal.lp") then/d' \
    -i /www/cards/008_telephony.lp
fi

echo 125@$(date +%H:%M:%S): Display Telephony tabs even when mmpbx disabled
sed \
 -e '/if mmpbx_state == "1" then/d' \
 -e '/elseif session:hasAccess/,/end/d' \
 -i /www/snippets/tabs-voice.lp

if [ $SIP_PWDS = y ]; then
  echo 125@$(date +%H:%M:%S): Always display decrypted SIP passwords
  sed \
  -e '/local mask_password/d' \
  -e '/if password == mask_password then/,/end/d' \
  -e '/v\[scns\["password"\]\] = mask_password/d' \
  -e '/ipairs(v)/a if sip_columns[j].name == "password" then' \
  -e '/ipairs(v)/a   w = proxy.get("rpc.gui.pwd.@" .. v[scns["profile"]] .. ".password")[1].value' \
  -e '/ipairs(v)/a   sip_columns[j].type = "text"' \
  -e '/ipairs(v)/a end' \
  -i /www/docroot/modals/mmpbx-profile-modal.lp
fi

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  echo 125@$(date +%H:%M:%S): Remove non-existing FXS2 device CODEC config
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 125@$(date +%H:%M:%S): Add missing insert option on dial plan entries
sed \
  -e 's/registerMultiMap/registerNamedMultiMap/' \
  -e 's/modify", "remove/modify", "insert", "remove/' \
  -i /usr/share/transformer/mappings/uci/mmpbx.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 130@$(date +%H:%M:%S): Add missing icons on Diagnostics card and change default tab to Traffic Monitor
sed \
 -e 's^"Diagnostics", "modals/diagnostics-xdsl-modal.lp"^"Diagnostics", "modals/diagnostics-traffic-modal.lp"^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-xdsl\)^<td><div data-toggle="modal" data-remote="modals/diagnostics-traffic-modal.lp" data-id="diagnostics-traffic-modal"><img href="#" rel="tooltip" data-original-title="TRAFFIC" src="/img/light/Profit-01-WF.png" alt="traffic"></div></td>\\\n\1^' \
 -e 's^\(alt="ping/trace"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/logviewer-modal.lp" data-id="logviewer-modal"><img href="#" rel="tooltip" data-original-title="LOGVIEWER" src="/img/light/log-viewer.png" alt="logviewer"></div></td>\2^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-connection\)^<td><div data-toggle="modal" data-remote="modals/log-connections-modal.lp" data-id="log-connections-modal"><img href="#" rel="tooltip" data-original-title="CONNECTIONS" src="/img/light/Data-Sync-WF.png" alt="connections"></div></td>\\\n\1^' \
 -e 's^\(alt="network"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/diagnostics-tcpdump-modal.lp" data-id="diagnostics-tcpdump-modal"><img href="#" rel="tooltip" data-original-title="TCPDUMP" src="/img/light/tcp-dump.png" alt="tcpdump"></div></td>\2^' \
 -e 's|\(alt="\)\([^/"]*\)|class="diag-\2" \1\2|g' \
 -i /www/cards/009_diagnostics.lp

echo 130@$(date +%H:%M:%S): Rename Diagnostics tabs and add Connections and Traffic Monitor tabs
sed \
 -e 's/"Connection"/"Connection Check"/' \
 -e 's/Log viewer/Log Viewer/' \
 -e 's/"Network"/"Ports"/' \
 -e 's/Tcpdump/TCP Dump/' \
 -e '/xdsl-modal/i       \    {"diagnostics-traffic-modal.lp", T"Traffic Monitor"},'  \
 -e '/connection-modal/a \    {"log-connections-modal.lp", T"Network Connections"},'  \
 -e '/string.len(ngx.var.args)/,/^end/d' \
 -e '/airiq/,/^[ ]*$/d' \
 -i /www/snippets/tabs-diagnostics.lp
sed \
 -e 's/tabs-management/tabs-diagnostics/' \
 -e 's/"Management"/"Diagnostics"/' \
 -i /www/docroot/modals/log-connections-modal.lp

echo 130@$(date +%H:%M:%S): Fix headings on Diagnostics tabs
for m in $(grep -L 'createHeader(T"Diagnostics"' /www/docroot/modals/diagnostics-*)
do 
    sed -e 's/\(createHeader(\)\([T]*\)\("Diagnostics\)\([^"]*\)\("\)/\1T\3\5/' -i $m
done

echo 135@$(date +%H:%M:%S): Add missing DHCP Relay configuration
sed \
 -e '/local format/a \local exists = proxy.get("uci.dhcp.relay.@relay.server_addr")' \
 -e '/local format/a \if not exists then' \
 -e '/local format/a \  proxy.add("uci.dhcp.relay.","relay")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.server_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.local_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.interface","")' \
 -e '/local format/a \  proxy.apply();' \
 -e '/local format/a \end' \
 -i /www/docroot/modals/relay-modal.lp


echo 140@$(date +%H:%M:%S): Sort the device map hosts by name
sed \
 -e 's/loadTableData("rpc.hosts.host.", dcols)/loadTableData("rpc.hosts.host.", dcols, nil, "FriendlyName")/' \
 -i /www/snippets/networkmap.lp

echo 145@$(date +%H:%M:%S): Allow increase in WiFi output power to +6dBm
sed \
 -e '/{"-6", T"25%"}/a \    {"-5", T"&nbsp;-5 dBm"},' \
 -e '/{"-6", T"25%"}/a \    {"-4", T"&nbsp;-4 dBm"},' \
 -e '/{"-2", T"75%"}/a \    {"-1", T"&nbsp;-1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+1", T"&nbsp;+1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+2", T"&nbsp;+2 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+3", T"&nbsp;+3 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+4", T"&nbsp;+4 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+5", T"&nbsp;+5 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+6", T"&nbsp;+6 dBm"},' \
 -e 's/-6", T"25%/-6", T"\&nbsp;-6 dBm/' \
 -e 's/-3", T"50%/-3", T"\&nbsp;-3 dBm/' \
 -e 's/-2", T"75%/-2", T"\&nbsp;-2 dBm/' \
 -e 's/0", T"100%/0", T"\&nbsp;0 dBm/' \
 -e 's/T"Output Power"/T"Output Power Adjustment"/' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Add cogs to card headers
for f in $(grep -l createCardHeaderNoIcon /www/cards/*)
do
  sed -e 's/createCardHeaderNoIcon/createCardHeader/' -i $f
done
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/switchName, content\["cwmp_state"\], {input = {id = "cwmp_card_state"}}/nil, nil, nil/' -i /www/cards/090_cwmpconf.lp

echo 150@$(date +%H:%M:%S): Fix mobile signal placement
sed \
 -e '/^<\/script>/i var div = document.querySelector("#mobiletab").querySelector(".header-title");\\' \
 -e '/^<\/script>/i var signal = document.querySelector("#signal-strength-indicator-small");\\' \
 -e '/^<\/script>/i div.parentNode.insertBefore(signal, div.nextSibling);\\' \
 -i $(find /www/cards -type f -name '*lte.lp')
sed \
 -e '$ a #signal-strength-indicator-small .absolute{float:right;margin-top:unset;margin-left:unset;height:unset;padding-left:10px;width:unset;position:relative;}' \
 -i /www/docroot/css/mobiled.css

echo 150@$(date +%H:%M:%S): Handle Wi-Fi switch
sed \
 -e '/Take the input/i \if ngx.var.request_method == "POST" then' \
 -e '/Take the input/i \  local radio_state = ngx.req.get_post_args().set_wifi_radio_state' \
 -e '/Take the input/i \  if radio_state then' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_2G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_5G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.apply()' \
 -e '/Take the input/i \     ngx.exit(ngx.HTTP_NO_CONTENT)' \
 -e '/Take the input/i \  end' \
 -e '/Take the input/i \end' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Handle Telephony switch
 sed \
  -e '/local sipnet_options/i \if ngx.var.request_method == "POST" then' \
  -e '/local sipnet_options/i \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/local sipnet_options/i \  if mmpbx_enable then' \
  -e '/local sipnet_options/i \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/local sipnet_options/i \    proxy.apply()' \
  -e '/local sipnet_options/i \    ngx.sleep(20)' \
  -e '/local sipnet_options/i \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/local sipnet_options/i \  end' \
  -e '/local sipnet_options/i \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 155@$(date +%H:%M:%S): Make Content Sharing Screen nicer
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/<form class/<form id="content-sharing-modal" class/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/T"General status"/d' \
  -e '/"File Server Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"File Server Status" .. "<\/legend>")' \
  -e '/"File Server descript/a\                tinsert(html, "<\/fieldset>")' \
  -e '/DLNA Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"DLNA Server Status" .. "<\/legend>")' \
  -i /www/docroot/modals/contentsharing-modal.lp

else # THEME_ONLY = y
  echo 160@$(date +%H:%M:%S): Restoring CSS files to apply theme change
  cp -p /rom/www/docroot/css/gw.css /rom/www/docroot/css/gw-telstra.css /rom/www/docroot/css/responsive.css /www/docroot/css/
fi # End of if [ THEME_ONLY = n ]   

echo 160@$(date +%H:%M:%S): Adding or updating card background icons
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf012;"/' -i $(ls /www/cards/*_lte.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf129;"/' -i $(ls /www/cards/*_gateway.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0c1;"/' -i $(ls /www/cards/*_broadband.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0ac;"/' -i $(ls /www/cards/*_internet.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf09e;"/' -i $(ls /www/cards/*_wireless.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf015;"/' -i $(ls /www/cards/*_LAN.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf109;"/' -i $(ls /www/cards/*_Devices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c2;"/' -i $(ls /www/cards/*_wanservices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf132;"/' -i $(ls /www/cards/*_firewall.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf095;"/' -i $(ls /www/cards/*_telephony.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf188;"/' -i $(ls /www/cards/*_diagnostics.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c0;"/' -i $(ls /www/cards/*_usermgr.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf115;"/' -i $(ls /www/cards/*_contentsharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf02f;"/' -i $(ls /www/cards/*_printersharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf023;"/' -i $(ls /www/cards/*_parental.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf074;"/' -i $(ls /www/cards/*_iproutes.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf017;"/' -i $(ls /www/cards/*_tod.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf079;"/' -i $(ls /www/cards/*_relaysetup.lp)
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf019;"/' -i $(ls /www/cards/*_cwmpconf.lp)
sed -e 's/xf0ad/xf0ec;"/' -i $(ls /www/cards/*_natalghelper.lp)
sed -e 's/xf0ad/xf0b1;"/' -i $(ls /www/cards/*_xdsl.lp)
[ -f /www/cards/*_nfc.lp ] && sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0b2;"/' -i $(ls /www/cards/*_nfc.lp)
[ -f /www/cards/*_fon.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf143;"/' -i $(ls /www/cards/*_fon.lp)

sed \
  -e 's/:56px/:80px/' \
  -e 's/:170px/:150px/' \
  -i /www/docroot/css/responsive.css

for f in $(grep -l -r '</head>\\' /www 2>/dev/null | grep -v '\(airiq\|help\|landingpage\)')
do
  grep -q 'lp.include("../snippets/theme' $f
  if [ $? -eq 1 ]; then
    grep -q "/css/gw.css" $f
    if [ $? -eq 0 ]; then
      LP="advanced"
    else
      LP="basic"
    fi
    req=$(grep -n 'local lp = require("web.lp")' $f | cut -d: -f1)
    if [ -z "$req" ]; then
      sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
    else
      head=$(grep -n '</head>\\' $f | cut -d: -f1)
      if [ $head -lt $req ]; then
        sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -e "${req}d" -i $f
      else
        sed -e "/<\/head>\\\/i '); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
      fi
    fi
  fi
done

echo 165@$(date +%H:%M:%S): Deploy theme files
echo  | base64 -d | tar -xzf - -C /

# Fix directory permissions after tar extracts
chmod +x /www /www/docroot /www/docroot/css /www/docroot/css/telstra /www/docroot/css/light /www/docroot/css/night /www/docroot/img /www/docroot/img/telstra /www/docroot/img/light /www/docroot/img/night /www/snippets

echo 165@$(date +%H:%M:%S): Persisting theme settings
echo -n "THEME=$THEME COLOR=$COLOR ICONS=$ICONS KEEPLP=$KEEPLP" > /etc/tch-gui-unhide.theme

sed \
  -e '$ a .card_bg:after{font-size:110px;bottom:-5px;z-index:-20;}' \
  -i /www/docroot/css/gw.css
if [ -f /www/docroot/landingpage.lp -a "$KEEPLP" = "n" ]
then
  echo 166@$(date +%H:%M:%S): Theming and de-branding landing page
  sed \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color:#f8f8f8;}" \
    -e "$ a body.landingpage #login_part_mobile>div:nth-child(2){display:none;}" \
    -e "$ a body.landingpage #icon_down{display:none !important;}" \
    -e "$ a body.landingpage #detailed_info_mobile{display:block !important;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(1){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(2){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(3)>table>tbody>tr>td{padding:0px 5px;width:50%;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(4){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(6){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(7){display:none;}" \
    -e "$ a body.landingpage #detailed_info_mobile>div:nth-child(8){display:none;}" \
    -e "$ a body.landingpage #footer_picture_mobile{display:none !important;}" \
    -i /www/docroot/css/gw-telstra.css
  sed \
    -e 's/.hidden-desktop{display:none/.hidden-desktop{display:inherit/' \
    -e 's/.visible-desktop{display:inherit/.visible-desktop{display:none/' \
    -i /www/docroot/css/responsive.css
  sed \
    -e "s,<title>');  ngx.print( T\"Login\" ); ngx.print('</title>,<title>$TITLE Login</title>," \
    -e 's,<img src="/img/TELSTRA_LOGO.png" style="width:57px;height:65px;">,<img class="lp-logo" style="width:240px;margin-bottom:60px;">,' \
    -e 's/Firmware Number/Firmware Version/' \
    -e 's/Modem Make Model/Model/' \
    -e 's/height:60%;min-height:400px;/height:30%;min-height:350px;width:100%;/' \
    -e 's/"-webkit-border-radius: 20px;-moz-border-radius: 20px;border-radius: 20px;width:50%;"/"display:block;margin-bottom:2px;width:220px;"/' \
    -e 's/"erroruserpass alert alert-error hide"/"erroruserpass alert alert-error hide" style="width:212px;margin:auto;padding:10px;"/' \
    -e 's/buttonborder linear-mobile" style="width:50%/linear-mobile" style="width:65px/' \
    -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-basic.lp\"); ngx.print('\\\\" \
    -e '/uci.versioncusto.override.fwversion_override/a \  unhide_version = "rpc.gui.UnhideVersion",' \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         </tr>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <tr>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <td style=\"text-align:right;font-weight: 900;color:#808080;\">tch-gui-unhide</td>\\\\" \
    -e "/ngx.print( cui\[\"firmware_version\"\] )/a \         <td style=\"text-align:left;color:#808080;\">');  ngx.print( cui[\"unhide_version\"] ); ngx.print('</td>\\\\" \
    /rom/www/docroot/landingpage.lp>/www/docroot/landingpage.lp
  # Have to restart if changing landing page
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi
if [ -f /www/snippets/tabs-home.lp ]
then
  sed -e '/^else/,/T"Boost Your Wi-Fi"/d' -i /www/snippets/tabs-home.lp
fi
for f in /www/docroot/modals/assistance-modal.lp /www/docroot/modals/usermgr-modal.lp
do
  sed \
    -e '/^if not bridged.isBridgedMode/i \  local lp = require("web.lp")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.setpath("/www/snippets/")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.include("tabs-management.lp")' \
    -e '/^if not bridged.isBridgedMode/,/^end/d' \
    -i $f
done

SRV_transformer=$(( $SRV_transformer + 2 ))

echo 175@$(date +%H:%M:%S): Fix Time of Day tabs
sed \
  -e 's/T"Time of day access control"/T"Device Access Control"/' \
  -e "/update\">\\\/a ');" \
  -e '/update">\\/a local lp = require("web.lp")' \
  -e '/update">\\/a lp.setpath("/www/snippets/")' \
  -e '/update">\\/a lp.include("tabs-tod.lp")' \
  -e "/update\">\\\/a ngx.print('\\\\" \
  -i /www/docroot/modals/tod-modal.lp

echo 175@$(date +%H:%M:%S): Restart Time of Day processing after updates applied 
sed -e 's|reload$|reload; /etc/init.d/tod restart;|' -i /usr/share/transformer/commitapply/uci_tod.ca
SRV_transformer=$(( $SRV_transformer + 1 ))

# Initial invocation of transformer code will fail if history directory does not exist
if [ ! -d /root/trafficmon/history ]; then
  echo 180@$(date +%H:%M:%S): Create directory to retain traffic monitor daily history
  mkdir -p /root/trafficmon/history
fi
if [ ! -f /root/trafficmon/history/.wan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wan_rollover
fi
if [ ! -f /root/trafficmon/history/.wwan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WWAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wwan_rollover
fi

grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
if [ $? -eq 1 ]; then
  echo 180@$(date +%H:%M:%S): Create cron job to retain traffic monitor daily history
  echo "9,19,29,39,49,59 * * * * /usr/sbin/traffichistory.lua" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

if [ $THEME_ONLY = n ]; then
  # Run any extra feature scripts
  for s in $(ls tch-gui-unhide-xtra.* 2>/dev/null)
  do
    echo -n 190@$(date +%H:%M:%S): Executing extra feature script for $(echo $s | cut -d. -f2-):
    . $s
  done
fi

echo 195@$(date +%H:%M:%S): Sequencing cards
for RULE in $(uci show web | grep '=card' | cut -d= -f1)
do
  CARD=$(uci -q get ${RULE}.card)
  FILE=$(ls /www/cards/ | grep "..._${CARD#*_}")
  if [ "$CARD" != "$FILE" ]
  then
    echo "195@$(date +%H:%M:%S):  - Renaming $FILE to $CARD"
    mv /www/cards/$FILE /www/cards/$CARD
  fi
done

if [ -z "$ALLCARDRULES" -a -f tch-gui-unhide-cards ]
then
  ./tch-gui-unhide-cards -s -a -q
fi

if [ $THEME_ONLY = n ]; then
  for l in $(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)
  do
    echo 200@$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in $l
    sed -e "s/\(current_year); ngx.print('\)/\1 \[tch-gui-unhide 2021.04.05 for FW Version 18.1.c.0585\]/" -i $l
  done
fi

echo 200@$(date +%H:%M:%S): Applying service changes if required...
apply_service_changes

chmod 644 /usr/share/transformer/mappings/rpc/gui.*
echo "************************************************************"
echo "* Done!! You should clear your browser cache of images and *"
echo "* files, otherwise you won't see the theme changes.        *"
echo "************************************************************"
echo
echo "++ TIP #1: Bookmark http://$(uci get network.lan.ipaddr)/gateway.lp"
echo "++         to bypass the Telstra Basic web GUI..."
echo
echo "++ TIP #2: Use the tch-gui-unhide-cards script to"
echo "++         change card order and visibility"
echo
if [ "$UPDATE_BTN" = n ]; then
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "++ WARNING! The Update Available notification is DISABLED! +"
  echo "++          You must check for updates manually.           +"
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo
fi
