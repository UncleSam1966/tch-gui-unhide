#!/bin/sh
echo 000@$(date +%H:%M:%S): Built for firmware version 17.2.0468 - Release 2021.02.22
RELEASE='2021.02.22@17:07'
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on various pages https://hack-technicolor.readthedocs.io/en/stable/

TARGET_VERSION=""
for x in $(basename $0 | tr '-' "$IFS")
do 
  TARGET_VERSION=$x
done
echo "$TARGET_VERSION" | grep -q '\.'
if [ $? -eq 1 ]
then
  echo "ERROR: Unable to determine Target Version!"
  echo "       Did the script get renamed??"
  echo "       Aborting..."
  exit 1
fi
SCRIPT=$(basename $0 | sed "s/-$TARGET_VERSION//")

DFLT_USR=$(uci -q get web.uidefault.defaultuser)
FW_UPGRD=$(uci -q get web.uidefault.upgradefw)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC=$(uci -q get env.var.ssid_mac_postfix_r0)
HOSTNAME=$(uci -q get system.@system[0].hostname)
case "$(grep 'title>.*</title' /www/docroot/gateway.lp | cut -d'>' -f2 | cut -d'<' -f1)" in
  $VARIANT) TITLE="$VARIANT";;
  $HOSTNAME) TITLE="$HOSTNAME";;
  $VARIANT-$MAC) TITLE="$VARIANT-$MAC";;
  *) TITLE="";;
esac

if [ -f /usr/tch-gui-unhide.theme ]; then
  mv /usr/tch-gui-unhide.theme /etc/tch-gui-unhide.theme
fi
if [ -f /etc/tch-gui-unhide.theme ]; then
  . /etc/tch-gui-unhide.theme
fi
if [ -z "$THEME" ]; then
  KEEPLP=n
  grep -q 'body{background-color:#353c42;' /www/docroot/css/gw.css
  if [ $? -eq 0 ]; then
    THEME=night
  else
    grep -q 'body{background-color:#fff;' /www/docroot/css/gw.css
    if [ $? -eq 0 ]; then
      THEME=light
    else
      THEME=telstra
      grep -q 'body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color' /www/docroot/css/gw-telstra.css
      if [ $? -eq 1 -a -f /www/snippets/tabs-home.lp ]; then
        grep -q 'T"Boost Your Wi-Fi"' /www/snippets/tabs-home.lp
        if [ $? -eq 1 ]; then
          KEEPLP=y
        else
          KEEPLP=n
        fi
      fi
    fi
  fi
  case "$(grep '.smallcard .header{background-color:#......;}' /www/docroot/css/gw.css  | cut -d# -f2 | cut -d\; -f1)" in
    "005c32") COLOR=green;;
    "662e91") COLOR=purple;;
    "f36523") COLOR=orange;;
    "008fd5") COLOR=blue;;
    "272c30") COLOR=monochrome;;
    *) if [ $THEME = light ]; then COLOR=monochrome; else COLOR=blue; fi;;
  esac
  ICONS="$(grep '.card_bg:after{visibility:' /www/docroot/css/gw.css | cut -d: -f3 | cut -d\; -f1)"
fi

grep -q 'rpc.gui.pwd.@' /www/docroot/modals/mmpbx-profile-modal.lp
if [ $? -eq 0 ]; then
  SIP_PWDS=y
else
  SIP_PWDS=n
fi

INSTALLED_RELEASE="$(grep -o -m 1 -E '[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]@[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' /usr/share/transformer/mappings/rpc/gui.map 2>/dev/null)"

grep -q 'rpc.gui.UpdateAvailable' /www/docroot/gateway.lp
if [ $? -eq 0 ]; then
  UPDATE_BTN=y
else
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp
  if [ $? -eq 0 ]; then
    UPDATE_BTN=n
  else
    UPDATE_BTN=y
  fi
fi

FIX_DFLT_USR=n
FIX_FW_UPGRD=n
if [ "$(uci -q get dropbear.lan.enable)" = "1" -a "$(uci -q get dropbear.lan.PasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootLogin)" = "1" ]; then
  FIX_SSH=n
else
  FIX_SSH=y
fi
if [ "$(uci -q get system.config.export_plaintext)" = "1" -a "$(uci -q get system.config.export_unsigned)" = "1" -a "$(uci -q get system.config.import_plaintext)" = "1" -a "$(uci -q get system.config.import_unsigned)" = "1" ]; then
  FIX_CFG_PORT=n
else
  FIX_CFG_PORT=y
fi
echo "$(uci -q get web.parentalblock.roles)" | grep -q "admin"
if [ $? -eq 0 ]; then
  FIX_PARENT_BLK=n
else
  FIX_PARENT_BLK=y
fi

# Keep count of changes so we know whether to restart services
SRV_cron=0
SRV_dropbear=0
SRV_nginx=0
SRV_power=0
SRV_system=0
SRV_transformer=0

check_pwr_setting() {
  section="$1"
  option="$2"
  text="$3"
  if [ -z "$(uci -q get power.$section.$option)" ]; then
    pwrctl show | grep "$text" | grep -q DISABLED
    uci set power.$section.$option="$?"
    SRV_power=$(( $SRV_power + 1 ))
  fi
}

apply_service_changes() {
  if [ $SRV_transformer -gt 0 ]; then
    # Need to stop watchdog whilst we restart transformer, because if it does not find /var/run/transformer.pid, it will reboot the system!
    /etc/init.d/watchdog-tch stop
    /etc/init.d/transformer restart
    /etc/init.d/watchdog-tch start
  fi
  [ $SRV_cron -gt 0 ] && /etc/init.d/cron restart
  [ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear restart
  [ $SRV_system -gt 0 ] && /etc/init.d/system reload
  [ $SRV_nginx -gt 0 ] && /etc/init.d/nginx restart

  if [ -z "$(uci -q get power.cpu)" ];then
    uci set power.cpu='cpu'
  fi

  if [ -z "$(uci -q get power.cpu.cpuspeed)" ]; then
    case "$(pwrctl show | grep "CPU Speed Divisor" | tr -s " " | cut -d" " -f4)" in
      1) uci set power.cpu.cpuspeed="1";;
      2) uci set power.cpu.cpuspeed="2";;
      4) uci set power.cpu.cpuspeed="4";;
      5) uci set power.cpu.cpuspeed="8";;
      *) uci set power.cpu.cpuspeed="256";;
    esac
    SRV_power=$(( $SRV_power + 1 ))
  fi
  check_pwr_setting "cpu" "wait" "CPU Wait"
  check_pwr_setting "ethernet" "ethapd" "Auto Power"
  check_pwr_setting "ethernet" "eee" "Energy Efficient Ethernet"
  check_pwr_setting "ethernet" "autogreeen" "AutoGreeen"
  check_pwr_setting "ethernet" "dgm" "Deep Green Mode"
  [ $SRV_power -gt 0 ] && uci commit power
}

RESTORE=n
WRAPPER=n
YES=n
THEME_ONLY='n'

FILENAME=$(basename $0)

while getopts :c:d:f:h:i:l:p:rt:uv:yTVW option
do
 case "${option}" in
   c) case "$(echo ${OPTARG} | tr "BGMOPR" "bgmopr" | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;; 
        g) COLOR=green;; 
        o) COLOR=orange;; 
        p) COLOR=purple;; 
        r) COLOR=red;; 
        *) COLOR=monochrome;;
      esac;;
   d) case "${OPTARG}" in y|Y) FIX_DFLT_USR=y; DFLT_USR='admin';; n|N) FIX_DFLT_USR=y; DFLT_USR='';;  *) echo 'WARNING: -d valid options are y or n';; esac;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPGRD=y; FW_UPGRD='1';;     n|N) FIX_FW_UPGRD=y; FW_UPGRD='0';; *) echo 'WARNING: -f valid options are y or n';; esac;;
   h) case "${OPTARG}" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        s) TITLE="$VARIANT-$MAC";;
        *) TITLE="$OPTARG";;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   l) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then KEEPLP=y; else KEEPLP=n; fi;;
   p) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then SIP_PWDS=y; else SIP_PWDS=n; fi;;
   r) RESTORE=y;;
   t) case "${OPTARG}" in
        g) THEME=night; COLOR=green; KEEPLP=n; echo WARNING: -tg deprecated. Use -tn -cg in future;; 
        o) THEME=night; COLOR=orange; KEEPLP=n; echo WARNING: -to deprecated. Use -tn -co in future;; 
        p) THEME=night; COLOR=purple; KEEPLP=n; echo WARNING: -tp deprecated. Use -tn -cp in future;; 
        l) THEME=light; COLOR=monochrome; KEEPLP=n;;
        m) THEME=telstramodern; COLOR=blue; KEEPLP=y;;
        n) THEME=night; COLOR=blue; KEEPLP=n;;
        *) THEME=telstra; COLOR=blue; KEEPLP=y;;
      esac;;
   u) RESULT=$(curl -m 5 -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else 
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]
                then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo "002@$(date +%H:%M:%S): Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]
                then
                  chmod +x $FILENAME
                  echo "002@$(date +%H:%M:%S): Successfully updated $FILENAME."
                  return 0
                else
                  echo "002@$(date +%H:%M:%S): Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo "002@$(date +%H:%M:%S): Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   v) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then UPDATE_BTN=y; else UPDATE_BTN=n; fi;;
   y) YES=y;;
   T) THEME_ONLY=y;;
   V) LATEST_RELEASE=$(curl -m 1 -q -s -k -L -r0-9 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt)
      echo "002@$(date +%H:%M:%S): This Release       $RELEASE"
      if [ -z "$INSTALLED_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Installed Release  NOT INSTALLED"
      else
        echo "002@$(date +%H:%M:%S): Installed Release  $INSTALLED_RELEASE"
      fi
      if [ -z "$LATEST_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Latest Release     UNKNOWN (No internet access?)"
      else
        echo "002@$(date +%H:%M:%S): Latest Release     $LATEST_RELEASE"
      fi
      exit;;      
   W) WRAPPER=y;;
   ?) echo "Optional parameters:"
      echo " Control Options:"
      echo " -d y|n         : Enable (y) or Disable (n) Default user (i.e. GUI access without password)"
      echo "                    (Default is current setting)"
      echo " -f y|n         : Enable (y) or Disable (n) firmware upgrade in the web GUI"
      echo "                    (Default is current setting)"
      echo " -p y|n         : Use decrypted text (y) or masked password (n) field for SIP Profile passwords"
      echo "                    (Default is current setting i.e (n) by default)"
      echo " -v y|n         : Enable (y) check for new releases and show 'Update Available' button in GUI, or Disable (n)"
      echo "                    (Default is current setting or (y) for first time installs)"
      echo " Theme Options:"
      echo " -c b|o|g|p|r|m : Set the theme highlight colour"
      echo "                    b=blue o=orange g=green p=purple r=red m=monochrome"
      echo "                    (Default is current setting, or (m) for light theme or (b) for night theme)"
      echo " -h d|s|n|\"txt\" : Set the browser tabs title (Default is current setting)"
      echo "                    (d)=$VARIANT (s)=$VARIANT-$MAC (n)=$HOSTNAME (\"txt\")=Specified \"txt\""
      echo " -i y|n         : Show (y) or hide (n) the card icons"
      echo "                    (Default is current setting, or (n) for light theme and (y) for night theme)"
      echo " -l y|n         : Keep the Telstra landing page (y) or de-brand the landing page (n)"
      echo "                    (Default is current setting, or (n) if no theme has been applied)"
      echo " -t l|n|t|m     : Set a light (l), night (n), or Telstra-branded Classic (t) or Modern (m) theme"
      echo "                    (Default is current setting, or Telstra Classic if no theme has been applied)"
      echo " -T             : Apply theme ONLY - bypass all other processing"
      echo " Update Options:"
      echo " -u             : Check for and download any changes to this script (may be newer than latest release version)"
      echo "                    When specifying the -u option, it must be the ONLY parameter specifed."
      if [ $WRAPPER = y ]; then
      echo " -U             : Download the latest release, including utility scripts (will overwrite all existing script versions)."
      echo "                    When specifying the -U option, it must be the ONLY parameter specifed."
      fi
      echo " Miscellaneous Options:"
      echo " -r             : Restore changed GUI files to their original state (config changes are NOT restored)"
      echo "                    When specifying the -r option, it must be the ONLY parameter specifed."
      echo " -y             : Bypass confirmation prompt (answers 'y')"
      echo " -V             : Show the release number of this script, the current installed release, and the latest available release on GitHub"
      echo 
      echo "NOTE #1: Theme (-t) does not need to be re-specified when re-running the script: current state will be 'remembered'"
      echo "         between executions (unless you execute with the -r option, which will remove all state information)"
      echo "NOTE #2: Use tch-gui-unhide-cards to set card order and visibility"
      echo
      exit;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

if [ $THEME_ONLY = n ]; then
restore_www() {
  # File deployed to incorect location by releases prior to 2021.02.06
  if [ -f /usr/share/transformer/mappings/iperf.map ]; then
    rm /usr/share/transformer/mappings/iperf.map
  fi
  # Need to remove existing version or it doesn't get replaced?? 
  if [ -f /usr/sbin/traffichistory.lua ]; then
    if [ "$1" = "V" ]; then
      echo 010@$(date +%H:%M:%S): Removing file /usr/sbin/traffichistory.lua
    fi
    rm /usr/sbin/traffichistory.lua
  fi
  grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
  if [ $? -eq 0 ]; then
    sed -e '/traffichistory.lua/d' -i /etc/crontabs/root
    SRV_cron=$(( $SRV_cron + 1 ))
  fi
  # Add individual files to be restored here
  for t in /etc/init.d/power
  do
    s=/rom$t
    if [ -f $s ]; then
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        echo 010@$(date +%H:%M:%S): Restoring file $t
        cp -f -p "$s" "$t"
      fi
    fi
  done
  # Add directories to be restored here
  for d in www/cards www/docroot www/lua www/snippets usr/share/transformer/commitapply usr/share/transformer/mappings/rpc usr/share/transformer/mappings/uci
  do
    echo 010@$(date +%H:%M:%S): Restoring directory /$d
    for s in $(find /rom/$d -type f | grep -v -E \(/rom/www/docroot/help\))
    do
      t=$(echo "$s" | cut -c5-)
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        if [ "$1" = "V" ]; then
          echo 014@$(date +%H:%M:%S): Restoring file $t
        fi
        cp -f -p "$s" "$t"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done

    for f in $(find /$d -type f ! -path '/www/docroot/help*' ! -name '003_lte.lp')
    do
      if [ ! -f "/rom$f" -a -f "$f" ]; then
        if [ "$1" = "V" ]; then
          echo 019@$(date +%H:%M:%S): Removing file $f
        fi
        rm -f "$f"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done
  done
}

if [ $RESTORE = y ]; then
  restore_www V
  for d in /www/docroot/css/light /www/docroot/css/night /www/docroot/css/telstra /www/docroot/img/light /www/docroot/img/night /www/docroot/css/Telstra
  do
    if [ -d "$d" ]
    then
      if [ "$1" = "V" ]; then
        echo 019@$(date +%H:%M:%S): Removing empty directory $d
      fi
      rmdir "$d"
    fi
  done
  for s in $(uci show web | grep normally_hidden | cut -d. -f2)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry web.$s
    uci -q delete web.$s
    uci -q del_list web.ruleset_main.rules="$s"
    SRV_nginx=$(( $SRV_nginx + 2 ))
  done
  for s in $(uci show web | grep '=card' | cut -d= -f1)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry $s
    uci -q delete $s
    SRV_nginx=$(( $SRV_nginx + 1 ))
  done
  RULES=$(uci get web.ruleset_main.rules)
  for s in $(echo $RULES | tr " " "\n" | grep -v dumaos | sort -u)
  do
    TARGET=$(uci -q get web.$s.target)
    if [ ! -z "$TARGET" -a ":$TARGET" != ":/" -a ! -f /www/docroot$TARGET -a ! -f /www$TARGET -a ! -f /www/docroot/ajax$TARGET ]; then
      echo 019@$(date +%H:%M:%S): Removing config entry web.$s
      uci -q delete web.$s
      uci -q del_list web.ruleset_main.rules="$s"
      SRV_nginx=$(( $SRV_nginx + 2 ))
    else
      ROLE=$(uci -q get web.$s.roles)
      if [ ! -z "$ROLE" -a "$ROLE" = "nobody" ]; then
        echo 019@$(date +%H:%M:%S): Resetting admin role on config entry web.$s.roles
        uci -q delete web.$s.roles
        uci add_list web.$s.roles="admin"
        SRV_nginx=$(( $SRV_nginx + 2 ))
      fi
    fi
  done
  uci commit web
  apply_service_changes
  echo "************************************************************"
  echo "* Restore complete. You should clear your browser cache of *"
  echo "* images and files to make sure you can see the changes.   *"
  echo "* NOTE: No config changes have been restored, except to    *"
  echo "*       remove added entries to display hidden modals.     *"
  echo "************************************************************"
  exit
fi

VERSION=$(uci get version.@version[0].version | cut -d- -f1)
if [ "$VERSION" = "$TARGET_VERSION" ]
then
  echo 020@$(date +%H:%M:%S): Current version matches target \($TARGET_VERSION\)
else
  echo 020@$(date +%H:%M:%S): WARNING: This script was developed for the $TARGET_VERSION firmware.
  echo 020@$(date +%H:%M:%S): It MAY work on your $VARIANT with $VERSION firmware, but it also may not.
  echo 020@$(date +%H:%M:%S): If you still wish to proceed, reply FORCE \(in capitals as shown\).
  read
  if [ "$REPLY" != "FORCE" ]
  then
    echo 020@$(date +%H:%M:%S): Good choice.
    exit
  fi
fi

echo "030@$(date +%H:%M:%S): This script will perform the following actions:"
if [ $FIX_SSH = y ]; then
echo "030@$(date +%H:%M:%S):  - Properly enable SSH access over LAN"
fi
if [ $FIX_CFG_PORT = y ]; then
echo "030@$(date +%H:%M:%S):  - Enable unsigned configuration export/import in the web GUI"
fi
if [ $FIX_FW_UPGRD = y ]; then
if [ "$FW_UPGRD" = "1" ]; then
echo "030@$(date +%H:%M:%S):  - Enable firmware upgrade in the web GUI"
else
echo "030@$(date +%H:%M:%S):  - DISABLE firmware upgrade in the web GUI"
fi
fi
if [ $FIX_DFLT_USR = y ]; then
if [ "$DFLT_USR" = "admin" ]; then
echo "030@$(date +%H:%M:%S):  - ENABLE the default user in the web GUI (i.e. GUI access without password)"
else
echo "030@$(date +%H:%M:%S):  - Disable the default user in the web GUI"
fi
fi
if [ $FIX_PARENT_BLK = y ]; then
echo "030@$(date +%H:%M:%S):  - Ensure admin role can administer the parental block"
fi
if [ -z "$INSTALLED_RELEASE" ]; then
echo "030@$(date +%H:%M:%S):  - Install tch-gui-unhide release $RELEASE"
else
echo "030@$(date +%H:%M:%S):  - Replace tch-gui-unhide release $INSTALLED_RELEASE with $RELEASE"
fi
echo "030@$(date +%H:%M:%S):  - Allow editing of various settings that are not exposed in the stock GUI"
echo "030@$(date +%H:%M:%S):  - Unhide various cards and tabs contained in the stock GUI that are normally hidden"
echo "030@$(date +%H:%M:%S):  - Add new cards and screens, and modified cards and screens from the Ansuel tch-nginx-gui"
echo "030@$(date +%H:%M:%S):  - The GUI screens will be prettied up a bit and the $THEME theme applied with $COLOR highlights and $ICONS card icons"
if [ -f /www/docroot/landingpage.lp ]; then
echo "030@$(date +%H:%M:%S):  - The Telstra Landing Page will be $(echo $KEEPLP | sed -e 's/y/left UNCHANGED/' -e 's/n/themed and de-branded/')"
fi
if [ ! -z "$TITLE" ]; then
echo "030@$(date +%H:%M:%S):  - The browser tabs titles will be set to $TITLE"
fi
if [ "$SIP_PWDS" = y ]; then
echo "030@$(date +%H:%M:%S):  - SIP Profile passwords will be decrypted and displayed in text fields rather than password fields"
fi
if [ "$UPDATE_BTN" = y ]; then
echo "030@$(date +%H:%M:%S):  - New release checking is ENABLED and 'Update Available' will be shown in GUI when new version released"
else
echo "030@$(date +%H:%M:%S):  - New release checking is DISABLED! 'Update Available' will NOT be shown in GUI when new version released"
fi

echo 030@$(date +%H:%M:%S): If you wish to proceed, enter y otherwise just press [Enter] to stop.
if [ $YES = y ]; then
  REPLY=y
else
  read
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

echo 030@$(date +%H:%M:%S): IMPORTANT NOTE - You can restore changed GUI files to their original state by running: $0 -r

if [ $FIX_SSH = y ]; then
  echo 040@$(date +%H:%M:%S): Properly enabling SSH access over LAN
  # We need to enable this properly as you can enable/disable via the GUI, and if done
  # without allowing password auth and root login, it can accidently prevent SSH access
  uci set dropbear.lan.enable='1'
  uci set dropbear.lan.PasswordAuth='on'
  uci set dropbear.lan.RootPasswordAuth='on'
  uci set dropbear.lan.RootLogin='1'
  uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
fi
  
if [ $FIX_CFG_PORT = y ]; then
  echo 040@$(date +%H:%M:%S): Enabling unsigned configuration export/import in the web GUI
  uci set system.config.export_plaintext='1'
  uci set system.config.export_unsigned='1'
  uci set system.config.import_plaintext='1'
  uci set system.config.import_unsigned='1'
  uci commit system
  SRV_system=$(( $SRV_system + 4 ))
fi

if [ $FIX_FW_UPGRD = y ]; then
  if [ $FW_UPGRD = 1 ]; then
    echo 040@$(date +%H:%M:%S): Enabling firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='1'
    uci set web.uidefault.upgradefw_role='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  else
    echo 040@$(date +%H:%M:%S): DISABLING firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='0'
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
  uci commit web
fi

if [ $FIX_DFLT_USR = y ]; then
  if [ "$DFLT_USR" = "admin" ]; then
    echo 040@$(date +%H:%M:%S): Enabling the default user in the web GUI
    uci set web.default.default_user='usr_admin'
    uci set web.uidefault.defaultuser='admin'
  else
    echo 040@$(date +%H:%M:%S): Disabling the default user in the web GUI
    uci -q delete web.default.default_user
    uci -q delete web.uidefault.defaultuser
  fi
  uci commit web
  SRV_web=$(( $SRV_web + 2 ))
fi

if [ $FIX_PARENT_BLK = y ]; then
  echo 040@$(date +%H:%M:%S): Ensuring admin role can administer the parental block
  uci -q del_list web.parentalblock.roles='admin'
  uci add_list web.parentalblock.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

echo 050@$(date +%H:%M:%S): Ensuring card sequence and visibility is up to date
ALLCARDRULES="$(uci show web | grep =card)"
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="${CARDFILE#*_}"
  CARDRULE="card_$(basename $CARD .lp)"
  MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
  HIDDEN=$(uci -q get web.${CARDRULE}.hide)
  if [ -z "$MODAL" ]
  then
    MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
  fi
  MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
  if [ ! -z "$MODALRULE" -a "$(uci -q get web.$MODALRULE.roles)" != "admin" ]
  then
    echo "050@$(date +%H:%M:%S):  - Converting $CARD card visibility from modal-based visibility"
    HIDDEN=1
    uci -q delete web.$MODALRULE.roles
    uci add_list web.$MODALRULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  if [ -z "$HIDDEN" -o \( "$HIDDEN" != "0" -a "$HIDDEN" != "1" \) ]
  then
    HIDDEN=0
  fi
  uci set web.${CARDRULE}=card
  uci set web.${CARDRULE}.card="$(basename $CARDFILE)"
  uci set web.${CARDRULE}.modal="$MODALRULE"
  uci set web.${CARDRULE}.hide="$HIDDEN"
  SRV_nginx=$(( $SRV_nginx + 4 ))
done
uci commit web

# Do the restore
restore_www
echo 050@$(date +%H:%M:%S): Pre-update restore completed

echo 060@$(date +%H:%M:%S): Deploy modified broadband GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified devices GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified eco GUI code
echo H4sIAAAAAAAAA+0ba3PbNtJfzV+Bo32x1JMoUhLlXBx7xnHdXmeaTu7s3s1NLqPCJESxoQiWhCw7qf/77YJPUaQtObGaTLkeS8QC2Ad2Ae4uKSas3s4Tgw5waJryG6D8La+NIYwxzP6hcbijG/pgMNgh5lMLhjCPBA0J2Qk5F/eNe6j/KwUG9nd9V2j207nBRvbvwzjDMMENGvtvAQr2D/iChU/B4wH79weD1P4jfaQPwP5989DYIfpTCFOGP7n99/7Su3L9XjQlPXSF0NIsPptxX9mLmCDdG+Xi8vRfl8d9XVHes9Bn3viahcfqfsuigvSCkFs9QEQu98nvhC7ek4OPQej6guwP7g7aqqLMLbfPfT6ZtNrko0KIRSNG1H1DJa4PTUL0NmHWlBMVxqhHRxJnZDg/RX2Ton7wr6nn2uTnsx8I8+mVxwgPBAjwgiBV4+RZ/6g0m0XUUu4UBVSaB2PGWCoL9yeuM3ZAU0ASJqaoYtwwoD9YhJbwkmGk20X8L5lCZB/av+R06VxwJwScv0o+78u5FHBVzArdRZ45usAaaNLArtBK4guKxe1K3eKuJfUkqsDGdmarPAC5FgMcV6QO7QLpBXXFKm3EEiuYxxdVVGVHkSwiCnRhchQwVrE2aY+knzYqOGTj9rNBQH3Gr9nYDX8bg6+zMJwHIkJehuSzu3c5dSNw9Tn4uhVS2F2wP+L9Q4aaQSIOCO+W0CCAT8HTvoE2VHbdCXlLuh9gk3zMt9zeHvR9c6eSd0cEFttXdnelj/fJSbINQZjeYb8XzcATJxM802+rB/19rUHPS4Mmbraoy2vpcWoTee8AXHknZCho5NfSSbImOEJ2jdbLGtl679atthQJzu/UdeQ8RCp/9Ln6tcA8Cr+o+N8YxPH/yGziv20A2j+a0pA9oRdsbn9jOGri/61Abn8RUj+a8HDGPveJsLn9h/rAaOy/Dai2/wwCE9d3os/jCJvb3xwNm/2/FXjA/hBYf7oPbGR/E/P/0bDf3P+3AmvYX8b2GqAeywMNPBoO6+xv6LqZ1n+Mw0Pwk77eH42a+s82wOMWTZPdsbQ0OSaqvFAVpdsl4AFanN2hU7CwpQJmbAhuqG0tZI4bQUZ2Jue/pkGrSKm9TECDjE2J+ck2ZnAEuOW5JDSK8zsyo7OwtoNCwXAVUeI2YMV2XP2JkJJEypxR7RAVk0mV3HVkvl4v/IU7CzyGwmdilSVP6xtL4mdFj0SHe7RY0iOdp8Y9qTol9JJWccaMOkEejV95ho0tyKAfoWfKsN0ky39eWCwWX1L+D38jzP+h1dz/twFof4uG9mcK9SthTftD0j80dVOX+f9h8/x3K5DbH6KuMbO45j06zquDB+I/c6APSvYfGCO9if+2Ad1uEDIZ+ntUMPsFsTnxuSDWlPoOIwKfY0xcj8mA6Dx+3CaDIPcDxQBFcZgQ7EZo+GHzGXX91sGCXc3drsVDdgCRVBZiCuaL8ZR5gQwyQ/bb3A1ZS4XR2nKv2k4mzd2a8VmHWmYgg7HsmQ3EVUvxp5bHhzhIPj1aGSPjxo6SPMta6k5jJi2NyBR8JlgzBEM1pfAYr3pYMZRT8CFZ9TCM8WSEt7xUGqz/+Q21xFmMbiXdsCzuJF0TLV8PIN43R2r8DKncPYa9IOYYc6qGutIL6Ev17M3P5Ds0BfOtW3IKsncv0Bt8R1WYF7H7aOpqrUx6jUQVPCFd/CtpXfz3p7N2zLKOprEpzdM1iPbXJ2quS3O4Ps2+uSbN55soX6Tp2/K/ZKl4o1QvKvaNcftntP+Do+Nn8/aqW9SMt90onVDin27ECvZxV07tPM3J0DPJG5nPfssXfo00a0+/Rzjc/1WSMVag67PQuSXnk4lr4RmV8akRa6259TIVz5wK0fLuGs2/D8/Pz+vWbN3Z9eLJQ65CLsBXkPyWsYB8H6Iyr7nNaqRab25JpvjGMeM29d5QMYW5vusl2IhFUZyw+86NZokbLcGgJsnliymNTi0LGi21J8lEPQihuvISAim1HStY5FA9MJYHOcm3Z1oH/1Ne2u41sTwaRcdqFFB/oJ6UkDPqeRi7YcdB+4iQfH5+59SskMGd/QzG/YNRm4UtWB+Lkwu4b2OJT+3kC9BB/eVHmwC9WnHSWy0yH185KrGpoN0rp4sWOFaf7d1M9JF1VBYYLgUufyJvstBTMfPwpn2n4NXbPdn+GzHeAbKsRVzC+NF1ptmNrnyj6aych+3HE8ajqlM+B6WfPZZofOJ0SMUJ9GiSjHVI+eh4LLF8d3cqjpNPIg1btEPK+7VdcHok2C5tgh44zUn9N7rRHx1Cf9WA+Z/NLcxunqwCsHn9p6+bzfPfrUDR/smN6bPz2Lz+Mxj0m+e/W4EK+xcDk8/C44H6z/BwYJTsb5qD5v3vrcCXXf+ZQWhNHVZbBFruz6YFPKpjVOh6VJXp+hUMKhDR5MvosHSvOPcY9bOkggZvaEhn0fr1qK+xGJUp+2/5Tn5J16p1+on757NA3F4IiPGcTOvrVwUdZUOqgldLQiMilguv7kre1SHIbRY5JebgzLbH/jln4W0rs0wnkzt30mAOaQTkjKjIR1kp60A++cy/ioKj+POeAthdB+Y8X5mB9RU+AWY3ZHmy6xNZdsEEjMWzhyuzseKz7uz+ymxzA95GheQbTNc3m740+66Y+5Zzibq0dQI3K5Z8tct5QyHtlPey7hW3b8k8QBeUeSm+6ZKOwOvulIfuB3Aj6qlw7ogpt49V9CGVUPnoPiFUStyT1Lte+tfxERW1ls8q2FFB1tVur2TbE5d5dsTEUqrs+hM+vuI30j2px8Kk2o1a4E6NUfKzi2Nhj0bi1pNnAp7PXfBTx3+BZSQ403DZ7x6RhJ8i/Vcw7z3Y5HIe+mAP/H0DmmcCA+Yhw98++MnvH2b0Vx4SvLuA5TWwW6pFVR55kCv+0mMO8+2TA6JpSZ0wMz6iDl720hHrJKSwzVl4wTxmiVZCLX1PpPDOSHYAZJnq27z73VqZ78IV1rSVFzazN1EKJGW7khxola1AlV71C5QVvT5llVLhS/VP+eZJ+g5KpkWC2WxZ6sqZ+cstOX1obkY8Lz+uvCSTUS1gNyNeKiamL94USGNzDas+UPEobH1owNG0XO8g9xw230GQCkdlu6mKNNBAAw000EADDTTQQAMNNNBAAw00EMP/AXSDH14AUAAA | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified firewall GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified gateway GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified internet GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified iproutes GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified lte GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified management GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified multiap GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified qos GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified system GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified telephony GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified theme GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified tod GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified wireless GUI code
echo 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 | base64 -d | tar -xzf - -C /

if [ -f /www/docroot/booster.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local lp = require("web.lp")/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    -e 's#/booster.lp#/modals/wireless-boosters-boosters-modal.lp#' \
    /www/docroot/booster.lp > /www/docroot/modals/wireless-boosters-boosters-modal.lp
fi
if [ -f /www/docroot/boosterstatus.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster status screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/require("web.content_helper")/a local ui_helper = require("web.ui_helper")' \
    -e '/local type_convert/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#networkmap span12#networkmap#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/boosterstatus.lp > /www/docroot/modals/wireless-boosters-status-modal.lp
fi
if [ -f /www/docroot/wifidevices.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster Wi-Fi devices screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local content =/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/wifidevices.lp > /www/docroot/modals/wireless-boosters-devices-modal.lp
fi

echo 066@$(date +%H:%M:%S): Fix QoS card for 17.2 FW
sed \
  -e '/-- 18\.1\.c only[ \t]*$/d' \
  -e '/-- 18\.1\.c only START/,/-- 18\.1\.c only END/d' \
  -i /www/cards/008_qos.lp

echo 066@$(date +%H:%M:%S): Fix QoS classify modal for 17.2 FW
sed \
  -e 's/uci_classify_path\.\."@."/uci_classify_path/' \
  -e '/-- 18\.1\.c only[ \t]*$/d' \
  -e '/-- 18\.1\.c only START/,/-- 18\.1\.c only END/d' \
  -i /www/docroot/modals/qos-classify-modal.lp

echo 066@$(date +%H:%M:%S): Remove QoS Upload Shapers tab \(Not supported on 17.2 FW\)
if [ -f /www/docroot/modals/qos-swshaper-modal.lp ]; then
  rm /www/docroot/modals/qos-swshaper-modal.lp
fi
sed \
  -e '/qos-swshaper-modal.lp/d' \
  -i /www/snippets/tabs-qos.lp

echo 066@$(date +%H:%M:%S): Importing Traffic Monitor into Diagnostics
sed \
  -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
  -e '/^local attributes/i \    ngx.print(ui_helper.createHeader(T"Diagnostics", false, false, nil, nil) )' \
  -e '/"tabs-services/i <div class="modal-body update">\\' \
  -e '/^<div class="container toplevel">/d' \
  -e '/^<div class="row">/d' \
  -e '/^<div class="span11">/d' \
  -e '/^<fieldset>/,/^\\/d' \
  -e '/^<\/script>/a <\/script>\\' \
  -e '/^<\/script>/a <\/div>\\' \
  -e '/^<\/script>/,/^\\/d' \
  -e 's|tabs-services|tabs-diagnostics|' \
  -e 's|lp.include("footer.lp")|ngx.print(ui_helper.createFooter())|' \
  -e 's|800px;|900px;margin:0 auto;|' \
  -e 's|traffic.lp|modals/diagnostics-traffic-modal.lp|' \
  -e 's|<a href="%s" target="_self">|<a href="#" data-remote="%s">|' \
  /www/docroot/traffic.lp > /www/docroot/modals/diagnostics-traffic-modal.lp

echo 067@$(date +%H:%M:%S): Creating QoS Reclassify Rules modal
sed \
  -e 's/\(classify[\.-_%]\)/re\1/g' \
  -e 's/Classify/Reclassify/' \
  /www/docroot/modals/qos-classify-modal.lp > /www/docroot/modals/qos-reclassify-modal.lp

if [ -f /etc/init.d/cwmpd ]
then
  echo 070@$(date +%H:%M:%S): CWMP found - Leaving in GUI
else
  echo 070@$(date +%H:%M:%S): CWMP not found - Removing from GUI
  rm /www/cards/090_cwmpconf.lp
  rm /www/docroot/modals/cwmpconf-modal.lp
  uci -q delete web.cwmpconfmodal
  uci -q del_list web.ruleset_main.rules=cwmpconfmodal
  uci -q delete web.card_cwmpconf
fi

if [ $(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | wc -l) -eq 0 ]
then
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs not found - Removing from GUI
  rm /www/cards/010_fon.lp
  rm /www/docroot/modals/fon-modal.lp
  uci -q delete web.fon
  uci -q delete web.fonmodal
  uci -q del_list web.ruleset_main.rules=fon
  uci -q del_list web.ruleset_main.rules=fonmodal
  uci -q delete web.card_fon
else
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs FOUND - Leaving in GUI
fi

# Check all modals are enabled, except:
#  - diagnostics-airiq-modal.lp (requires Flash player)
#  - mmpbx-sipdevice-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - mmpbx-statistics-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - speedservice-modal.lp
#  - wireless-qrcode-modal.lp (fails with a nil password index error)
echo 070@$(date +%H:%M:%S): Checking modal visibility
for f in $(ls /www/docroot/modals | grep -E -v \(diagnostics-airiq-modal.lp\|mmpbx-sipdevice-modal.lp\|mmpbx-statistics-modal.lp\|speedservice-modal.lp\|wireless-qrcode-modal.lp\) )
do
  MODAL=$(basename $f)
  uci show web | grep -q "/modals/$MODAL"
  if [ $? -eq 1 ]
  then
    CREATE_RULE=y
    RULE=$(basename $f .lp | sed -e 's/-//g')
  else
    CREATE_RULE=n
    RULE=$(uci show web | grep "/modals/$MODAL" | grep -m 1 -v card_ | cut -d. -f2)
  fi
  if [ $CREATE_RULE = y ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL
    uci add_list web.ruleset_main.rules=$RULE
    uci set web.$RULE=rule
    uci set web.$RULE.target=/modals/$MODAL
    uci set web.$RULE.normally_hidden='1'
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL 
    uci -q delete web.$RULE.roles
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
done
uci commit web

echo 070@$(date +%H:%M:%S): Processing any additional cards
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="$(basename $CARDFILE)"
  CARDRULE=$(uci show web | grep "^web\.card_.*${CARDFILE#*_}" | cut -d. -f2)
  if [ -z "$CARDRULE" -o -z "$(uci -q get web.${CARDRULE}.modal)" ]
  then
    CARDRULE="card_$(basename ${CARDFILE#*_} .lp)"
    MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
    if [ -z "$MODAL" ]
    then
      MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
    fi
    MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
    uci set web.${CARDRULE}=card
    uci set web.${CARDRULE}.card="$CARD"
    uci set web.${CARDRULE}.modal="$MODALRULE"
    uci set web.${CARDRULE}.hide='0'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  fi
done

if [ "$(uci -q get web.broadbandstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling broadband-status.lua
  uci add_list web.ruleset_main.rules='broadbandstatusajax'
  uci set web.broadbandstatusajax='rule'
  uci set web.broadbandstatusajax.target='/ajax/broadband-status.lua'
  uci set web.broadbandstatusajax.normally_hidden='1'
  uci add_list web.broadbandstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.devicesstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling devices-status.lua
  uci add_list web.ruleset_main.rules='devicesstatusajax'
  uci set web.devicesstatusajax='rule'
  uci set web.devicesstatusajax.target='/ajax/devices-status.lua'
  uci set web.devicesstatusajax.normally_hidden='1'
  uci add_list web.devicesstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.gatewaystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling gateway-status.lua
  uci add_list web.ruleset_main.rules='gatewaystatusajax'
  uci set web.gatewaystatusajax='rule'
  uci set web.gatewaystatusajax.target='/ajax/gateway-status.lua'
  uci set web.gatewaystatusajax.normally_hidden='1'
  uci add_list web.gatewaystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.internetstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling internet-status.lua
  uci add_list web.ruleset_main.rules='internetstatusajax'
  uci set web.internetstatusajax='rule'
  uci set web.internetstatusajax.target='/ajax/internet-status.lua'
  uci set web.internetstatusajax.normally_hidden='1'
  uci add_list web.internetstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.telephonystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling telephony-status.lua
  uci add_list web.ruleset_main.rules='telephonystatusajax'
  uci set web.telephonystatusajax='rule'
  uci set web.telephonystatusajax.target='/ajax/telephony-status.lua'
  uci set web.telephonystatusajax.normally_hidden='1'
  uci add_list web.telephonystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.ssidstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling ssid-status.lua
  uci add_list web.ruleset_main.rules='ssidstatusajax'
  uci set web.ssidstatusajax='rule'
  uci set web.ssidstatusajax.target='/ajax/ssid-status.lua'
  uci set web.ssidstatusajax.normally_hidden='1'
  uci add_list web.ssidstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi

SERIAL=$(uci get env.var.serial)
echo 080@$(date +%H:%M:%S): Change config export filename from config.bin to $VARIANT-$SERIAL-$VERSION@YYMMDD.bin
echo 080@$(date +%H:%M:%S): Add reset/upgrade warnings
sed \
  -e "s/=config.bin/=$VARIANT-$SERIAL-$VERSION@\" .. os.date(\"%Y%m%d\") .. \".bin/" \
  -e '/local basic =/i local lose_root_warning = { alert = { class = "alert-info", style = "margin-bottom:5px;" }, }' \
  -e '/T"Reset"/i \    html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Using the <b><i class=\\"icon-bolt\\" style=\\"width:auto;\\">\</i> Reset</b> button will cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script from the command line to factory reset and still retain root access.", lose_root_warning)' \
  -e '/T"Upgrade"/i \          html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Upgrading firmware using this method may cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script with the -f option from the command line to upgrade to the firmware and still retain root access.", lose_root_warning)' \
  -e '/"uci.versioncusto.override.fwversion_override"/a \   unhide_version = "rpc.gui.UnhideVersion",' \
  -e '/"Serial Number"/i \    html[#html + 1] = ui_helper.createLabel(T"tch-gui-unhide Version", content["unhide_version"], basic)' \
  -e '/Global Information/d' \
  -i /www/docroot/modals/gateway-modal.lp

if [ "$UPDATE_BTN" = y ]; then
  echo 080@$(date +%H:%M:%S): Add update available button
  sed \
    -e '/uci.version.version.@version\[0\].timestamp/a\    updatable = "rpc.gui.UpdateAvailable",' \
    -e '/isBridgedMode/i\        if cui.updatable == "1" then' \
    -e "/isBridgedMode/i\          html[#html + 1] = '<a href=\"https://github.com/seud0nym/tch-gui-unhide/releases/latest\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"btn\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<i class=\"icon-info-sign orange\"></i>&nbsp;<small>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Update Available\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</small></a>'" \
    -e '/isBridgedMode/i\        end' \
    -i /www/docroot/gateway.lp
else
  echo 080@$(date +%H:%M:%S): Update available button will NOT be shown in GUI
fi

echo 080@$(date +%H:%M:%S): Add auto-refresh management
sed \
  -e '/<title>/a \<script>\\' \
  -e '/<title>/a \window.intervalIDs=new Array();\\' \
  -e '/<title>/a \function clearRegisteredIntervals(){\\' \
  -e '/<title>/a \  for(let i=0;i<window.intervalIDs.length;i++){\\' \
  -e '/<title>/a \    clearInterval(window.intervalIDs[i]);\\' \
  -e '/<title>/a \  }\\' \
  -e '/<title>/a \}\\' \
  -e '/<title>/a \var modalLoaded=false;\\' \
  -e '/<title>/a \$(document).bind("DOMSubtreeModified",function(){\\' \
  -e '/<title>/a \  if(!modalLoaded){\\' \
  -e '/<title>/a \    if($(".modal").length>0){\\' \
  -e '/<title>/a \      modalLoaded=true;\\' \
  -e '/<title>/a \      clearRegisteredIntervals();\\' \
  -e '/<title>/a \    }\\' \
  -e '/<title>/a \  }\\' \
  -e '/<title>/a \});\\' \
  -e '/<title>/a \</script>\\' \
  -i /www/docroot/gateway.lp

echo 080@$(date +%H:%M:%S): Fix uptime on basic Broadband tab
sed -e 's/days > 1/days > 0/' -i /www/docroot/broadband.lp

echo 085@$(date +%H:%M:%S): Add Device Capabilities and LTE Band Selection to Mobile Configuration screen
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/local function get_session_info_section/i \local function get_device_capabilities_section(page, html)' \
  -e '/local function get_session_info_section/i \	local section = {}' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.arfcn_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"ARFCN Selection Support" .. ":", page.device.capabilities.arfcn_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.band_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Band Selection Support" .. ":", page.device.capabilities.band_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.manual_plmn_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Manual PLMN Selection" .. ":", page.device.capabilities.manual_plmn_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.strongest_cell_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Strongest Cell Selection" .. ":", page.device.capabilities.strongest_cell_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_modes ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported Modes" .. ":", page.device.capabilities.supported_modes))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_cdma ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported CDMA Bands" .. ":", page.device.capabilities.supported_bands_cdma))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_gsm ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported GSM Bands" .. ":", page.device.capabilities.supported_bands_gsm))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_lte ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported LTE Bands" .. ":", page.device.capabilities.supported_bands_lte))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.max_data_sessions ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Max Data Sessions" .. ":", page.device.capabilities.max_data_sessions))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_reading ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Reading" .. ":", page.device.capabilities.sms_reading))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_sending ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Sending" .. ":", page.device.capabilities.sms_sending))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if utils.Len(section) > 0 then' \
  -e '/local function get_session_info_section/i \		tinsert(html, "<fieldset><legend>" .. T"Device Capabilities" .. "</legend>")' \
  -e '/local function get_session_info_section/i \		tinsert(html, section)' \
  -e '/local function get_session_info_section/i \		tinsert(html, "</fieldset>")' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \end' \
  -e '/local function get_session_info_section/i \\' \
  -e '/local function get_profile_select/i \local function validate_lte_bands(device)' \
  -e '/local function get_profile_select/i \    local choices = setmetatable({}, untaint_mt)' \
  -e '/local function get_profile_select/i \    local b' \
  -e '/local function get_profile_select/i \    for b in string.gmatch(device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/local function get_profile_select/i \      choices[string.untaint(b)] = true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \    return function(value, object, key)' \
  -e '/local function get_profile_select/i \      local uv' \
  -e '/local function get_profile_select/i \      local concatvalue = ""' \
  -e '/local function get_profile_select/i \      if not value then' \
  -e '/local function get_profile_select/i \        return nil, T"Invalid input."' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      if type(value) == "table" then' \
  -e '/local function get_profile_select/i \        uv = value' \
  -e '/local function get_profile_select/i \      else' \
  -e '/local function get_profile_select/i \        uv = { value }' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      for i,v in ipairs(uv) do' \
  -e '/local function get_profile_select/i \        if v ~= "" then' \
  -e '/local function get_profile_select/i \          if concatvalue ~= "" then' \
  -e '/local function get_profile_select/i \            concatvalue = concatvalue.." "' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \          concatvalue = concatvalue..string.untaint(v)' \
  -e '/local function get_profile_select/i \          if not choices[v] then' \
  -e '/local function get_profile_select/i \            return nil, T"Invalid value."' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \        end' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      object[key] = concatvalue' \
  -e '/local function get_profile_select/i \      return true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \end' \
  -e '/local function get_profile_select/i \\' \
  -e '/p.mapParams\["interface_enabled"\]/a \		if utils.radio_tech_map[device.leds.radio] == "LTE" then' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapParams["lte_bands"] = device.uci_path .. "lte_bands"' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapValid["lte_bands"] = validate_lte_bands(device)' \
  -e '/p.mapParams\["interface_enabled"\]/a \		end' \
  -e '/"Access Technology"/a \	 			if utils.radio_tech_map[page.device.leds.radio] == "LTE" then' \
  -e '/"Access Technology"/a \	 				local b, lte_bands, lte_bands_checked = nil, {}, {}' \
  -e '/"Access Technology"/a \	 				for b in string.gmatch(page.device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/"Access Technology"/a \	 					lte_bands[#lte_bands+1] = { string.untaint(b), b }' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				if not page.content["lte_bands"] or page.content["lte_bands"] == "" then' \
  -e '/"Access Technology"/a \	 					for k,v in ipairs(lte_bands) do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[k] = string.untaint(v[1])' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				else' \
  -e '/"Access Technology"/a \	 					for b in string.gmatch(page.content["lte_bands"], "%d+") do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[#lte_bands_checked+1] = string.untaint(b)' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				tinsert(html, ui_helper.createCheckboxGroup(T"LTE Bands", "lte_bands", lte_bands, lte_bands_checked, {checkbox = { class="inline" }}, nil))' \
  -e '/"Access Technology"/a \	 			end' \
  -e '/^\s*get_device_info_section/a get_device_capabilities_section(page, html)' \
  -i /www/docroot/modals/lte-modal.lp

echo 085@$(date +%H:%M:%S): Add new Mobile tabs
sed \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-autofailover.lp", T"Auto-Failover"},' \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-operators.lp", T"Network Operators"},' \
  -i /www/snippets/tabs-mobiled.lp

echo 085@$(date +%H:%M:%S): Configure transformer for missing WanSensing settings
sed \
  -e 's/\("autofailover\)/\1", \1maxwait/' \
  -e '/timeout/ {n; :a; /timeout/! {N; ba;}; s/\("timeout"\)/\1, "fasttimeout"/;}' \
  -i /usr/share/transformer/mappings/uci/wansensing.map
SRV_transformer=$(( $SRV_transformer + 1 ))

if [ -z "$TITLE" ]
then
  echo 090@$(date +%H:%M:%S): Leaving browser tabs title unchanged
else
  echo 090@$(date +%H:%M:%S): Change the title in browser tabs to $TITLE
  for f in /www/docroot/gateway.lp /www/lua/hni_helper.lua /www/snippets/header.lp
  do
      sed -e "s,title>.*</title,title>$TITLE</title," -i $f
  done
  sed -e "s,<title>');  ngx.print( T\"Change password\" ); ngx.print('</title>,<title>$TITLE - Change Password</title>," -i /www/docroot/password.lp
fi

echo 090@$(date +%H:%M:%S): Change Gateway to $VARIANT
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/001_gateway.lp
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/003_internet.lp

sed -e "s/Gateway/LAN/g" -i /www/cards/005_LAN.lp
sed -e "s,<title>');  ngx.print( T\"Login\" ); ngx.print('</title>,<title>$TITLE Login</title>," -i /www/docroot/login.lp

echo 095@$(date +%H:%M:%S): Add forceprefix to transformer mapping for network interface
sed \
  -e 's/"reqprefix", "noslaaconly"/"reqprefix", "forceprefix", "noslaaconly"/' \
  -i /usr/share/transformer/mappings/uci/network.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 100@$(date +%H:%M:%S): Fix card visibility check
sed \
  -e '/local access/,/end/d' \
  -e 's/access and/session:hasAccess(card.modal) or/' \
  -i /www/lua/cards.lua

echo 100@$(date +%H:%M:%S): Remove obsolete help links
for m in $(grep -l 'local help_link = ' /www/docroot/modals/*)
do
  sed -e 's/\(local help_link = \)\(.*\)/\1nil/' -i "$m"
done

echo 100@$(date +%H:%M:%S): Update gateway card and status ajax with hardware temperature monitors
elements=""
for m in $(find /sys/devices/i2c-*/ -name temp1_input)
do
  elements="$elements\"$m\","
done
for f in /www/cards/001_gateway.lp /www/docroot/ajax/gateway-status.lua
do
  sed -e "s|\(^local temp1_input = {\)|\1$elements|" -i $f
done

echo 100@$(date +%H:%M:%S): Fix display bug on Mobile card and hide if no devices found
sed \
  -e '/<script>/a var divs = $("#mobiletab .content").children("div");if(divs.length>0){var p=$("#mobiletab .content .subinfos");divs.appendTo(p);}\\' \
  -e '/require("web.lte-utils")/a local result = utils.getContent("rpc.mobiled.DeviceNumberOfEntries")' \
  -e '/require("web.lte-utils")/a local devices = tonumber(result.DeviceNumberOfEntries)' \
  -e '/require("web.lte-utils")/a if devices and devices > 0 then' \
  -e '$ a end' \
  -i $(find /www/cards -type f -name '*lte.lp')

echo 100@$(date +%H:%M:%S): Add DHCPv6 Server status and prefix to LAN card 
sed \
  -e '/local dhcpState$/a local dhcp6State_text = ""' \
  -e '/local dhcpState$/a local dhcp6State' \
  -e '/local dhcpState$/a local slaacState_text = ""' \
  -e '/local dhcpState$/a local slaacState' \
  -e '/local dhcpState$/a local ipv6State_text' \
  -e '/@lan.dhcpv4/a \    ipv6State = "uci.network.interface.@lan.ipv6",' \
  -e '/@lan.dhcpv4/a \    dhcpv6State = "uci.dhcp.dhcp.@lan.dhcpv6",' \
  -e '/@lan.dhcpv4/a \    slaacState = "uci.dhcp.dhcp.@lan.ra",' \
  -e '/@lan.netmask/a \    ipv6prefix = "rpc.network.interface.@wan6.ip6prefix",' \
  -e 's/localdevIP = "uci/localdevIP = "rpc/' \
  -e 's/dhcpState/dhcp4State/g' \
  -e 's/DHCP enabled/DHCPv4 enabled/' \
  -e 's/DHCP disabled/DHCPv4 disabled/' \
  -e '/getExactContent/a \if mapParams["ipv6State"] == "" or mapParams["ipv6State"] == "1" then' \
  -e '/getExactContent/a \  if mapParams["dhcpv6State"] == "" or mapParams["dhcpv6State"] == "server" then' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 enabled"' \
  -e '/getExactContent/a \    dhcp6State = "1"' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \  if mapParams["slaacState"] == "" or mapParams["slaacState"] == "server" then' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA enabled"' \
  -e '/getExactContent/a \    slaacState = "1"' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA disabled"' \
  -e '/getExactContent/a \    slaacState = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    dhcp6State_text = T"IPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \if mapParams["ipv6prefix"] == "" then' \
  -e '/getExactContent/a \    ipv6State_text = T""' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    ipv6State_text = T"Prefix: "' \
  -e '/getExactContent/a \end' \
  -e '/createSimpleLight/a \            ui_helper.createSimpleLight(dhcp6State, dhcp6State_text)' \
  -e '/createSimpleLight/a \        )' \
  -e '/createSimpleLight/a \        if mapParams["ipv6State"] == "1" then' \
  -e '/createSimpleLight/a \            ngx.print(ui_helper.createSimpleLight(slaacState, slaacState_text))' \
  -e '/createSimpleLight/a \        end' \
  -e '/createSimpleLight/a \        ngx.print(' \
  -e 's/and netmask is/<br>Subnet Mask:/' \
  -e "s/IP is/IP:/" \
  -e "/<\/p>/i \            '<br>'," \
  -e "/<\/p>/i \            format(T'%s <nobr><strong style=\"letter-spacing:-1px\">%s</strong></nobr>', ipv6State_text, mapParams[\"ipv6prefix\"])," \
  -e '/^\\$/d' \
  -e "s/<strong>/<strong style=\"letter-spacing:-1px\">/g" \
  -i /www/cards/005_LAN.lp

echo 100@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
  -e '/getExactContent/a \ ' \
  -e '/getExactContent/a local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
  -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\)\(.*\)\( then\)/if not server_addr or \(server_addr\2\)\3/' \
  -e 's/\r//' \
  -i /www/cards/018_relaysetup.lp

echo 100@$(date +%H:%M:%S): Add SAMBA and DLNA server names to the Content Sharing card
sed \
  -e 's/\t/  /g' \
  -e '/Light(content\["dlna/i\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["samba_name"]))' \
  -e '/Light(content\["dlna/a\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["dlna_name"]))' \
  -i /www/cards/012_contentsharing.lp

echo 100@$(date +%H:%M:%S): Only show xDSL Config card if WAN interface is DSL 
sed \
 -e '/uci.xdsl.xdsl.@dsl0.enabled/a \      wan_ifname = "uci.network.interface.@wan.ifname",' \
 -e '/if session:hasAccess/i \local wan_ifname = content["wan_ifname"]' \
 -e 's/if session:hasAccess/if wan_ifname and (wan_ifname == "ptm0" or wan_ifname == "atmwan") and session:hasAccess/' \
 -i /www/cards/093_xdsl.lp

echo 100@$(date +%H:%M:%S): Enable cards in Bridge Mode
# https://www.crc.id.au/hacking-the-technicolor-tg799vac-and-unlocking-features/#mozTocId685948
sed -e '/if info.bridged then/,/end/d' -i /www/lua/cards_limiter.lua

echo 100@$(date +%H:%M:%S): Show individual helper status on NAT Helpers card
sed \
  -e '/local enabled/,/^  end/d' \
  -e '/convertResultToObject/a \  local htmlLeft = {}' \
  -e '/convertResultToObject/a \  local htmlRight = {}' \
  -e '/convertResultToObject/a \  local attributes = {' \
  -e '/convertResultToObject/a \    span = { style = "display:inline-block;font-size:smaller;letter-spacing:-1px;vertical-align:unset;" },' \
  -e '/convertResultToObject/a \  }' \
  -e '/convertResultToObject/a \  for _, v in ipairs(helper_uci_content) do' \
  -e '/convertResultToObject/a \      if v.intf ~= "loopback" then' \
  -e '/convertResultToObject/a \          local state = v.enable' \
  -e '/convertResultToObject/a \          local text' \
  -e '/convertResultToObject/a \          if state ~= "0" then' \
  -e '/convertResultToObject/a \              text =" enabled<br>"' \
  -e '/convertResultToObject/a \              state = "1"' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              text = " disabled<br>"' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \          if #htmlRight >= #htmlLeft then' \
  -e '/convertResultToObject/a \              htmlLeft[#htmlLeft+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              htmlRight[#htmlRight+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \      end' \
  -e '/convertResultToObject/a \  end' \
  -e '/divtable/,/div>/d' \
  -e '/card_bg/a \            <div style="display:flex;flex-direction:row;">\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlLeft);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlRight);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \            </div>\\' \
  -i /www/cards/092_natalghelper.lp

echo 101@$(date +%H:%M:%S): Missing proxy in relay setup card 
sed -e '/local content_helper/a local proxy = require\("datamodel"\)' -i /www/cards/018_relaysetup.lp

echo 101@$(date +%H:%M:%S): Change WAN Services modal checkboxes to switches
sed \
  -e 's/= gVCS/= vB/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 105@$(date +%H:%M:%S): Changing description of router DNS Server from Telstra to $VARIANT 
sed -e "s/Telstra/$VARIANT/" -i /www/docroot/modals/ethernet-modal.lp

if [ -f ipv4-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv4 DNS Servers
  sed -e 's/\r//g' ipv4-DNS-Servers | sort -r | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      sed -e "/127.0.0.1/a \    {\"$ip\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

if [ -f ipv6-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv6 DNS Servers
  sed -e 's/\r//g' ipv6-DNS-Servers | sort | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      ipv6=$(echo $ip  | tr ':' '-')
      sed -e "/2001-4860-4860--8888/i \    {\"$ipv6\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

echo 105@$(date +%H:%M:%S): Added switch to enable/disable DHCPv6 Server and SLAAC
sed \
 -e '/"\.dhcpv4"/a \    dhcpv6State = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".dhcpv6",' \
 -e '/"\.dhcpv4"/a \    slaacState = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".ra",' \
 -e 's/dhcpv4Stateselect/dhcpStateselect/' \
 -e 's/DHCP Server/DHCPv4 Server/' \
 -e 's/\(ui_helper.createSwitch(T"IPv6 state", "localIPv6", content\["localIPv6"\]\)/\1, switch_class_enable/' \
 -e '/local stdattributes/i \              local switch_class_enable = {' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  class = "monitor-changes",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e '/Lease time/a \                 ,[[<div class="monitor-localIPv6 monitor-1 monitor-hidden-localIPv6">]]' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"DHCPv6 Server", "dhcpv6State", content["dhcpv6State"], switchDHCP)' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"SLAAC + RA", "slaacState", content["slaacState"], switchDHCP)' \
 -e '/Lease time/a \                 ,[[</div>]]' \
 -e '/gVIES(/a \    dhcpv6State = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    slaacState = gVIES(dhcpStateselect),' \
 -i /www/docroot/modals/ethernet-modal.lp

 echo 106@$(date +%H:%M:%S): Fix setting of firewall forwarding rule when NAT enabled/disabled
for r in dhcp pppoa pppoe static
do
  sed -e '/-- 106-BEGIN/,/-- 106-END/d' -i /www/snippets/internet-${r}-routed.lp
done

echo 110@$(date +%H:%M:%S): Enable various things that only the guest role\(!!!\) was allowed to do or see
for f in $(ls /www/docroot/modals/gateway-modal.lp /www/docroot/modals/internet-modal.lp /www/docroot/modals/wireless-modal.lp /www/docroot/modals/wanservices-modal.lp /www/snippets/tabs-diagnostics.lp /www/snippets/tabs-voice.lp)
do
  sed -e 's/\(if [^ ]*role[^=]*==[^"]*"\)\(guest\)\("\)/\1admin\3/g' -i $f
done
sed \
  -e 's/if role ~= "admin"/if role == "admin"/' \
  -e 's/if w\["provisioned"\] == "1"/if role == "admin" or w\["provisioned"\] == "1"/' \
  -i /www/docroot/modals/mmpbx-service-modal.lp

echo 115@$(date +%H:%M:%S): Fix Firewall modals for FW 17.2
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-cone-modal.lp
sed \
  -e 's/@defaults\[0\]/1/' \
  -i /www/docroot/modals/firewall-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-port-forwarding-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-rules-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-zones-modal.lp

echo 115@$(date +%H:%M:%S): Show firewall default incoming policy and rules count on card
sed \
  -e '/^local format/a \local proxy = require("datamodel")' \
  -e '/firewall\.mode/a \    enabledRuleCount = "rpc.gui.firewall.enabledRuleCount",' \
  -e '/firewall\.mode/a \    fwd_ipv4_rules = "uci.firewall.userredirectNumberOfEntries",' \
  -e '/firewall\.mode/a \    fwd_ipv6_rules = "uci.firewall.pinholeruleNumberOfEntries",' \
  -e '/firewall\.mode/a \    lanIpv6Enabled = "uci.network.interface.@lan.ipv6",' \
  -e '/firewall\.mode/a \    pinholeEnabled = "uci.firewall.rulesgroup.@pinholerules.enabled",' \
  -e '/getExactContent/a \local fw_incoming_policy' \
  -e '/getExactContent/a \local zones = content_helper.convertResultToObject("uci.firewall.zone.", proxy.get("uci.firewall.zone."))' \
  -e '/getExactContent/a \for key,zone in ipairs(zones) do' \
  -e '/getExactContent/a \  if zone.wan == "1" then' \
  -e '/getExactContent/a \    fw_incoming_policy = string.untaint(zone.input)' \
  -e '/getExactContent/a \    break' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \local fw_status_light_map = {' \
  -e '/getExactContent/a \  DROP = "1",' \
  -e '/getExactContent/a \  REJECT = "2",' \
  -e '/getExactContent/a \  ACCEPT = "4"' \
  -e '/getExactContent/a \}' \
  -e 's/T"low"/T"Low"/' \
  -e 's/T"normal"/T"Normal"/' \
  -e 's/T"high"/T"High"/' \
  -e 's/T"user"/T"User Defined"/' \
  -e "/subinfos/i \    ');" \
  -e '/subinfos/i \    local fw_status = format("Default Incoming Policy: <strong>%s</strong>", fw_incoming_policy)' \
  -e '/subinfos/i \    ngx.print(ui_helper.createSimpleLight(fw_status_light_map[fw_incoming_policy], fw_status))' \
  -e "/subinfos/i \    ngx.print('\\\\" \
  -e '/Firewall level/a \            local rules_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-rules-modal.lp\\" data-id=\\"firewall-rules-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Firewall rule</strong> active","<strong %1$s>%2$d Firewall rules</strong> active", content.enabledRuleCount), rules_modal_link, content.enabledRuleCount)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local fwd_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-port-forwarding-modal.lp\\" data-id=\\"firewall-port-forwarding-modal\\""' \
  -e '/Firewall level/a \            local fwd_count = tonumber(content.fwd_ipv4_rules)' \
  -e '/Firewall level/a \            if content.lanIpv6Enabled ~= "0" and content.pinholeEnabled == "1" then' \
  -e '/Firewall level/a \              fwd_count = fwd_count + tonumber(content.fwd_ipv6_rules)' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Port Forwarding rule</strong> defined","<strong %1$s>%2$d Port Forwarding rules</strong> defined", fwd_count), fwd_modal_link, fwd_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local nat_alg_card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/Firewall level/a \            if nat_alg_card_hidden and nat_alg_card_hidden[1] and nat_alg_card_hidden[1].value == "1" then' \
  -e '/Firewall level/a \              local alg_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/nat-alg-helper-modal.lp\\" data-id=\\"nat-alg-helper-modal\\""' \
  -e '/Firewall level/a \              local helper_uci_path = "uci.firewall.helper."' \
  -e '/Firewall level/a \              local helper_uci_content = proxy.get(helper_uci_path)' \
  -e '/Firewall level/a \              helper_uci_content = content_helper.convertResultToObject(helper_uci_path,helper_uci_content)' \
  -e '/Firewall level/a \              local disabled_count = 0' \
  -e '/Firewall level/a \              local enabled_count = 0' \
  -e '/Firewall level/a \              for _,v in ipairs(helper_uci_content) do' \
  -e '/Firewall level/a \                if v.intf ~= "loopback" then' \
  -e '/Firewall level/a \                  if v.enable ~= "0" then' \
  -e '/Firewall level/a \                    enabled_count = enabled_count + 1' \
  -e '/Firewall level/a \                   else' \
  -e '/Firewall level/a \                    disabled_count = disabled_count + 1' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              if enabled_count > 0 then' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> enabled","<strong %1$s>%2$d NAT Helpers</strong> enabled", enabled_count), alg_modal_link, enabled_count)' \
  -e '/Firewall level/a \              else' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> disabled","<strong %1$s>%2$d NAT Helpers</strong> disabled", disabled_count), alg_modal_link, disabled_count)' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            end' \
  -e '/numrules/,/numrules_v6/d' \
  -e '/if content.mode/,/end/d' \
  -i /www/cards/008_firewall.lp

echo 115@$(date +%H:%M:%S): Fix NAT ALG modal errors and include in Firewall tabs if card hidden
sed \
  -e '/^local ui_helper/i \local proxy = require("datamodel")' \
  -e 's/T"Enable"/T"Enabled"/' \
  -e 's/, readonly="true"/ /' \
  -e 's/unique/readonly/' \
  -e 's/string.upper/string.lower/' \
  -e '/attr = { input = { class="span1"/i \    readonly = true,' \
  -e '/^local hlp_attributes/i \table.insert(hlp_columns, table.remove(hlp_columns, 1))' \
  -e '/return true/i \  if object["enable"] == "" then' \
  -e '/return true/i \    object["enable"] = "1"' \
  -e '/return true/i \  end' \
  -e '/return true/i \  object["helper"] = string.lower(object["helper"])' \
  -e '/--Look for the enable set to nothing/,/^end/d' \
  -e '/^local UI_helper/i \local proxy = require("datamodel")' \
  -e "/modal-body/a \  ');" \
  -e '/modal-body/a \  local card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/modal-body/a \  if card_hidden and card_hidden[1] and card_hidden[1].value == "1" then' \
  -e '/modal-body/a \    local lp = require("web.lp")' \
  -e '/modal-body/a \    lp.setpath("/www/snippets/")' \
  -e '/modal-body/a \    lp.include("tabs-firewall.lp")' \
  -e '/modal-body/a \  end' \
  -e "/modal-body/a \  ngx.print('\\\\" \
  -e "/createTable/i \        ngx.print('<legend>');  ngx.print( T'NAT Helpers (ALG\\\\'s)' ); ngx.print('</legend>');" \
  -e "s/\"NAT Helpers (ALG's)\"/\"Firewall\"/" \
  -e 's/Dest Port/Destination Port/' \
  -i /www/docroot/modals/nat-alg-helper-modal.lp

echo 115@$(date +%H:%M:%S): Remove Port Forwarding from WAN Services - Moved to Firewall tab
sed \
  -e '/-- In UCI/,/local pfw_data,/d' \
  -e '/local ipv6Data/,/local pfw_v6_data,/d' \
  -e "/Port forwarding table/,/ngx.print('/d" \
  -e '/if ipv6Data.lanIpv6Enabled/,/end$/d' \
  -e '/local function getConfPath/,/local uri = ngx.var.uri/d' \
  -e 's/\(local help_link =\).*/\1 nil/' \
  -e '/if #alg_sip_paths/,/ end /d' \
  -e '/if zonenum ~= "" /,/ end /d' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 115@$(date +%H:%M:%S): Improving WAN Services card
sed \
  -e 's/class = "span4",//' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  upnp_status = "uci.upnpd.config.enable_upnp",' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  dnsrule_count = "uci.dhcp.dnsruleNumberOfEntries",' \
  -e '/local n_upnp_rules/a \    local n_dns_rules = tonumber(wan_services_data["dnsrule_count"])' \
  -e '/local n_upnp_rules/a \    local upnpstate' \
  -e '/local n_upnp_rules/a \    if wan_services_data["upnp_status"] == "1" then' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP enabled"' \
  -e '/local n_upnp_rules/a \    else' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP disabled"' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/local n_upnp_rules/a \    local wol = io.open("/lib/functions/firewall-wol.sh", "r") and proxy.get("uci.wol.config.")' \
  -e '/local n_upnp_rules/a \    local wolstate = ""' \
  -e '/local n_upnp_rules/a \    if wol then' \
  -e '/local n_upnp_rules/a \      wolenabled = proxy.get("uci.wol.config.enabled")' \
  -e '/local n_upnp_rules/a \      if wolenabled then' \
  -e '/local n_upnp_rules/a \        if wolenabled[1].value == "1" then' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("1", "WoL over Internet enabled")' \
  -e '/local n_upnp_rules/a \        else' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("0", "WoL over Internet disabled")' \
  -e '/local n_upnp_rules/a \        end' \
  -e '/local n_upnp_rules/a \      end' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/<p>/a \            wolstate,' \
  -e '/<p>/a \            ui_helper.createSimpleLight(ddns_light_map[format("%s", wan_services_data["upnp_status"])] or "0", upnpstate),' \
  -e '/firewall_rules/d' \
  -e '/port forwarding<\/strong> rule /,/subinfos/d' \
  -e "/modal\"', n_upnp_rules/a            '<br>'," \
  -e "/modal\"', n_upnp_rules/a            format( N(\"<strong %s>%d DNS rule</strong> defined\"," \
  -e "/modal\"', n_upnp_rules/a                      \"<strong %s>%d DNS rules</strong> defined\", n_dns_rules)," \
  -e "/modal\"', n_upnp_rules/a                      'class=\"modal-link\" data-toggle=\"modal\" data-remote=\"modals/wanservices-modal.lp\" data-id=\"wanservices-modal\"', n_dns_rules)," \
  -e 's|<p></p>||' \
  -e 's|upnp</strong> rule |UPnP rule</strong> |' \
  -e 's|upnp</strong> rules|UPnP rules</strong>|' \
  -i /www/cards/007_wanservices.lp

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule.
sed \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule_v6.
sed \
  -e '/src = {/i \      name = {' \
  -e '/src = {/i \        access = "readWrite",' \
  -e '/src = {/i \        type = "string",' \
  -e '/src = {/i \      },' \
  -e '/src =  function(mapping, paramname, k/i \    name =  function(mapping, paramname, key)' \
  -e '/src =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/src =  function(mapping, paramname, k/i \    end,' \
  -e '/src =  function(mapping, paramname, p/i \    name =  function(mapping, paramname, paramvalue, key)' \
  -e '/src =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/src =  function(mapping, paramname, p/i \    end,' \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule_v6.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 120@$(date +%H:%M:%S): Show the hidden Telephony tabs and fix default tab
sed \
 -e 's/--       {"mmpbx-service/       {"mmpbx-service/' \
 -e '/mmpbx-contacts/d' \
 -e '/T"Service"/i \       {"mmpbx-inoutgoingmap-modal.lp", T"In\/Outgoing Map"},' \
 -e '/T"Service"/a \       {"mmpbx-codec-modal.lp", T"Codecs"},' \
 -e '/T"Service"/a \       {"mmpbx-dial-plan-modal.lp", T"Dial Plans"},' \
 -e '/T"DECT"/a    \       {"mmpbx-contacts-modal.lp", T"Phone Book"},' \
 -i /www/snippets/tabs-voice.lp
echo 120@$(date +%H:%M:%S): Fix default Telephony tab
# Default telephony tab is DECT!!! 
sed \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    if mmpbx_state == "1" then' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \        modalPath = "\/modals\/mmpbx-info-modal.lp"' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    else' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \        modalPath = "\/modals\/mmpbx-global-modal.lp"' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    end' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/d' \
 -i /www/cards/008_telephony.lp

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  # only 1 FXS device
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 125@$(date +%H:%M:%S): Display Telephony tabs even when mmpbx disabled
sed \
 -e '/if mmpbx_state == "1" then/d' \
 -e '/elseif session:hasAccess/,/end/d' \
 -i /www/snippets/tabs-voice.lp

if [ $SIP_PWDS = y ]; then
  echo 125@$(date +%H:%M:%S): Always display decrypted SIP passwords
  sed \
  -e '/local mask_password/d' \
  -e '/if password == mask_password then/,/end/d' \
  -e '/v\[scns\["password"\]\] = mask_password/d' \
  -e '/ipairs(v)/a if sip_columns[j].name == "password" then' \
  -e '/ipairs(v)/a   w = proxy.get("rpc.gui.pwd.@" .. v[scns["profile"]] .. ".password")[1].value' \
  -e '/ipairs(v)/a   sip_columns[j].type = "text"' \
  -e '/ipairs(v)/a end' \
  -i /www/docroot/modals/mmpbx-profile-modal.lp
fi

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  echo 125@$(date +%H:%M:%S): Remove non-existing FXS2 device CODEC config
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 125@$(date +%H:%M:%S): Add missing insert option on dial plan entries
sed \
  -e 's/registerMultiMap/registerNamedMultiMap/' \
  -e 's/modify", "remove/modify", "insert", "remove/' \
  -i /usr/share/transformer/mappings/uci/mmpbx.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 130@$(date +%H:%M:%S): Add missing icons on Diagnostics card and change default tab to Traffic Monitor
sed \
 -e 's^"Diagnostics", "modals/diagnostics-xdsl-modal.lp"^"Diagnostics", "modals/diagnostics-traffic-modal.lp"^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-xdsl\)^<td><div data-toggle="modal" data-remote="modals/diagnostics-traffic-modal.lp" data-id="diagnostics-traffic-modal"><img href="#" rel="tooltip" data-original-title="TRAFFIC" src="/img/light/Profit-01-WF.png" alt="traffic"></div></td>\\\n\1^' \
 -e 's^\(alt="ping/trace"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/logviewer-modal.lp" data-id="logviewer-modal"><img href="#" rel="tooltip" data-original-title="LOGVIEWER" src="/img/light/log-viewer.png" alt="logviewer"></div></td>\2^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-connection\)^<td><div data-toggle="modal" data-remote="modals/log-connections-modal.lp" data-id="log-connections-modal"><img href="#" rel="tooltip" data-original-title="CONNECTIONS" src="/img/light/Data-Sync-WF.png" alt="connections"></div></td>\\\n\1^' \
 -e 's^\(alt="network"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/diagnostics-tcpdump-modal.lp" data-id="diagnostics-tcpdump-modal"><img href="#" rel="tooltip" data-original-title="TCPDUMP" src="/img/light/tcp-dump.png" alt="tcpdump"></div></td>\2^' \
 -e 's|\(alt="\)\([^/"]*\)|class="diag-\2" \1\2|g' \
 -i /www/cards/009_diagnostics.lp

echo 130@$(date +%H:%M:%S): Rename Diagnostics tabs and add Connections and Traffic Monitor tabs
sed \
 -e 's/"Connection"/"Connection Check"/' \
 -e 's/Log viewer/Log Viewer/' \
 -e 's/"Network"/"Ports"/' \
 -e 's/Tcpdump/TCP Dump/' \
 -e '/xdsl-modal/i       \    {"diagnostics-traffic-modal.lp", T"Traffic Monitor"},'  \
 -e '/connection-modal/a \    {"log-connections-modal.lp", T"Network Connections"},'  \
 -e '/string.len(ngx.var.args)/,/^end/d' \
 -e '/airiq/,/^[ ]*$/d' \
 -i /www/snippets/tabs-diagnostics.lp
sed \
 -e 's/tabs-management/tabs-diagnostics/' \
 -e 's/"Management"/"Diagnostics"/' \
 -i /www/docroot/modals/log-connections-modal.lp

echo 130@$(date +%H:%M:%S): Fix headings on Diagnostics tabs
for m in $(grep -L 'createHeader(T"Diagnostics"' /www/docroot/modals/diagnostics-*)
do 
    sed -e 's/\(createHeader(\)\([T]*\)\("Diagnostics\)\([^"]*\)\("\)/\1T\3\5/' -i $m
done

echo 135@$(date +%H:%M:%S): Add missing DHCP Relay configuration
sed \
 -e '/local format/a \local exists = proxy.get("uci.dhcp.relay.@relay.server_addr")' \
 -e '/local format/a \if not exists then' \
 -e '/local format/a \  proxy.add("uci.dhcp.relay.","relay")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.server_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.local_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.interface","")' \
 -e '/local format/a \  proxy.apply();' \
 -e '/local format/a \end' \
 -i /www/docroot/modals/relay-modal.lp


echo 135@$(date +%H:%M:%S): Add TCP Dump to Diagnostics
sed -e 's/    {"logviewer-modal.lp", T"Log Viewer"},/    {"logviewer-modal.lp", T"Log Viewer"},\n    {"diagnostics-tcpdump-modal.lp", T"TCP Dump"},/' -i /www/snippets/tabs-diagnostics.lp

echo 140@$(date +%H:%M:%S): Sort the device map hosts by name
sed \
 -e 's/loadTableData("rpc.hosts.host.", dcols)/loadTableData("rpc.hosts.host.", dcols, nil, "FriendlyName")/' \
 -i /www/snippets/networkmap.lp

echo 145@$(date +%H:%M:%S): Allow increase in WiFi output power to +6dBm
sed \
 -e '/{"-6", T"25%"}/a \    {"-5", T"&nbsp;-5 dBm"},' \
 -e '/{"-6", T"25%"}/a \    {"-4", T"&nbsp;-4 dBm"},' \
 -e '/{"-2", T"75%"}/a \    {"-1", T"&nbsp;-1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+1", T"&nbsp;+1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+2", T"&nbsp;+2 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+3", T"&nbsp;+3 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+4", T"&nbsp;+4 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+5", T"&nbsp;+5 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+6", T"&nbsp;+6 dBm"},' \
 -e 's/-6", T"25%/-6", T"\&nbsp;-6 dBm/' \
 -e 's/-3", T"50%/-3", T"\&nbsp;-3 dBm/' \
 -e 's/-2", T"75%/-2", T"\&nbsp;-2 dBm/' \
 -e 's/0", T"100%/0", T"\&nbsp;0 dBm/' \
 -e 's/T"Output Power"/T"Output Power Adjustment"/' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Add cogs to card headers
for f in $(grep -l createCardHeaderNoIcon /www/cards/*)
do
  sed -e 's/createCardHeaderNoIcon/createCardHeader/' -i $f
done
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/switchName, content\["cwmp_state"\], {input = {id = "cwmp_card_state"}}/nil, nil, nil/' -i /www/cards/090_cwmpconf.lp

echo 150@$(date +%H:%M:%S): Fix mobile signal placement
sed \
 -e '/^<\/script>/i var div = document.querySelector("#mobiletab").querySelector(".header-title");\\' \
 -e '/^<\/script>/i var signal = document.querySelector("#signal-strength-indicator-small");\\' \
 -e '/^<\/script>/i div.parentNode.insertBefore(signal, div.nextSibling);\\' \
 -i $(find /www/cards -type f -name '*lte.lp')
sed \
 -e '$ a #signal-strength-indicator-small .absolute{float:right;margin-top:unset;margin-left:unset;height:unset;padding-left:10px;width:unset;position:relative;}' \
 -i /www/docroot/css/mobiled.css

echo 150@$(date +%H:%M:%S): Handle Wi-Fi switch
sed \
 -e '/Take the input/i \if ngx.var.request_method == "POST" then' \
 -e '/Take the input/i \  local radio_state = ngx.req.get_post_args().set_wifi_radio_state' \
 -e '/Take the input/i \  if radio_state then' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_2G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_5G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.apply()' \
 -e '/Take the input/i \     ngx.exit(ngx.HTTP_NO_CONTENT)' \
 -e '/Take the input/i \  end' \
 -e '/Take the input/i \end' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Handle Telephony switch
 sed \
  -e '/local sipnet_options/i \if ngx.var.request_method == "POST" then' \
  -e '/local sipnet_options/i \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/local sipnet_options/i \  if mmpbx_enable then' \
  -e '/local sipnet_options/i \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/local sipnet_options/i \    proxy.apply()' \
  -e '/local sipnet_options/i \    ngx.sleep(20)' \
  -e '/local sipnet_options/i \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/local sipnet_options/i \  end' \
  -e '/local sipnet_options/i \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 155@$(date +%H:%M:%S): Make Content Sharing Screen nicer
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/<form class/<form id="content-sharing-modal" class/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/T"General status"/d' \
  -e '/"File Server Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"File Server Status" .. "<\/legend>")' \
  -e '/"File Server descript/a\                tinsert(html, "<\/fieldset>")' \
  -e '/DLNA Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"DLNA Server Status" .. "<\/legend>")' \
  -i /www/docroot/modals/contentsharing-modal.lp

else # THEME_ONLY = y
  echo 160@$(date +%H:%M:%S): Restoring CSS files to apply theme change
  cp -p /rom/www/docroot/css/gw.css /rom/www/docroot/css/gw-telstra.css /rom/www/docroot/css/responsive.css /www/docroot/css/
fi # End of if [ THEME_ONLY = n ]   

echo 160@$(date +%H:%M:%S): Adding or updating card background icons
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf012;"/' -i $(ls /www/cards/*_lte.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf129;"/' -i $(ls /www/cards/*_gateway.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0c1;"/' -i $(ls /www/cards/*_broadband.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0ac;"/' -i $(ls /www/cards/*_internet.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf09e;"/' -i $(ls /www/cards/*_wireless.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf015;"/' -i $(ls /www/cards/*_LAN.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf109;"/' -i $(ls /www/cards/*_Devices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c2;"/' -i $(ls /www/cards/*_wanservices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf132;"/' -i $(ls /www/cards/*_firewall.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf095;"/' -i $(ls /www/cards/*_telephony.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf188;"/' -i $(ls /www/cards/*_diagnostics.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c0;"/' -i $(ls /www/cards/*_usermgr.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf115;"/' -i $(ls /www/cards/*_contentsharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf02f;"/' -i $(ls /www/cards/*_printersharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf023;"/' -i $(ls /www/cards/*_parental.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf074;"/' -i $(ls /www/cards/*_iproutes.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf017;"/' -i $(ls /www/cards/*_tod.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf079;"/' -i $(ls /www/cards/*_relaysetup.lp)
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf019;"/' -i $(ls /www/cards/*_cwmpconf.lp)
sed -e 's/xf0ad/xf0ec;"/' -i $(ls /www/cards/*_natalghelper.lp)
sed -e 's/xf0ad/xf0b1;"/' -i $(ls /www/cards/*_xdsl.lp)
[ -f /www/cards/*_nfc.lp ] && sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0b2;"/' -i $(ls /www/cards/*_nfc.lp)
[ -f /www/cards/*_fon.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf143;"/' -i $(ls /www/cards/*_fon.lp)

sed \
  -e 's/:56px/:80px/' \
  -e 's/:170px/:150px/' \
  -i /www/docroot/css/responsive.css

for f in $(grep -l -r '</head>\\' /www 2>/dev/null | grep -v '\(airiq\|help\|landingpage\)')
do
  grep -q 'lp.include("../snippets/theme' $f
  if [ $? -eq 1 ]; then
    grep -q "/css/gw.css" $f
    if [ $? -eq 0 ]; then
      LP="advanced"
    else
      LP="basic"
    fi
    req=$(grep -n 'local lp = require("web.lp")' $f | cut -d: -f1)
    if [ -z "$req" ]; then
      sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
    else
      head=$(grep -n '</head>\\' $f | cut -d: -f1)
      if [ $head -lt $req ]; then
        sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -e "${req}d" -i $f
      else
        sed -e "/<\/head>\\\/i '); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
      fi
    fi
  fi
done

echo 165@$(date +%H:%M:%S): Deploy theme files
echo  | base64 -d | tar -xzf - -C /

# Fix directory permissions after tar extracts
chmod +x /www /www/docroot /www/docroot/css /www/docroot/css/telstra /www/docroot/css/light /www/docroot/css/night /www/docroot/img /www/docroot/img/telstra /www/docroot/img/light /www/docroot/img/night /www/snippets

echo 165@$(date +%H:%M:%S): Persisting theme settings
echo -n "THEME=$THEME COLOR=$COLOR ICONS=$ICONS KEEPLP=$KEEPLP" > /etc/tch-gui-unhide.theme

sed \
  -e '$ a .card_bg{position:relative;z-index:1;}' \
  -e '$ a .card_bg:after{color:#EAEAEA;font-family:FontAwesome;content:attr(data-bg-text);display:block;font-size:110px;line-height:1;position:absolute;bottom:-5px;right:5px;}' \
  -i /www/docroot/css/gw.css
for f in /www/docroot/modals/assistance-modal.lp /www/docroot/modals/usermgr-modal.lp
do
  sed \
    -e '/^if not bridged.isBridgedMode/i \  local lp = require("web.lp")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.setpath("/www/snippets/")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.include("tabs-management.lp")' \
    -e '/^if not bridged.isBridgedMode/,/^end/d' \
    -i $f
done

SRV_transformer=$(( $SRV_transformer + 2 ))

echo 175@$(date +%H:%M:%S): Fix Time of Day tabs
sed \
  -e 's/T"Time of day access control"/T"Device Access Control"/' \
  -e "/update\">\\\/a ');" \
  -e '/update">\\/a local lp = require("web.lp")' \
  -e '/update">\\/a lp.setpath("/www/snippets/")' \
  -e '/update">\\/a lp.include("tabs-tod.lp")' \
  -e "/update\">\\\/a ngx.print('\\\\" \
  -i /www/docroot/modals/tod-modal.lp

echo 175@$(date +%H:%M:%S): Restart Time of Day processing after updates applied 
sed -e 's|reload$|reload; /etc/init.d/tod restart;|' -i /usr/share/transformer/commitapply/uci_tod.ca
SRV_transformer=$(( $SRV_transformer + 1 ))

# Initial invocation of transformer code will fail if history directory does not exist
if [ ! -d /root/trafficmon/history ]; then
  echo 180@$(date +%H:%M:%S): Create directory to retain traffic monitor daily history
  mkdir -p /root/trafficmon/history
fi
if [ ! -f /root/trafficmon/history/.wan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wan_rollover
fi
if [ ! -f /root/trafficmon/history/.wwan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WWAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wwan_rollover
fi

grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
if [ $? -eq 1 ]; then
  echo 180@$(date +%H:%M:%S): Create cron job to retain traffic monitor daily history
  echo "9,19,29,39,49,59 * * * * /usr/sbin/traffichistory.lua" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

if [ $THEME_ONLY = n ]; then
  # Run any extra feature scripts
  for s in $(ls tch-gui-unhide-xtra.* 2>/dev/null)
  do
    echo -n 190@$(date +%H:%M:%S): Executing extra feature script for $(echo $s | cut -d. -f2-):
    . $s
  done
fi

echo 195@$(date +%H:%M:%S): Sequencing cards
for RULE in $(uci show web | grep '=card' | cut -d= -f1)
do
  CARD=$(uci -q get ${RULE}.card)
  FILE=$(ls /www/cards/ | grep "..._${CARD#*_}")
  if [ "$CARD" != "$FILE" ]
  then
    echo "195@$(date +%H:%M:%S):  - Renaming $FILE to $CARD"
    mv /www/cards/$FILE /www/cards/$CARD
  fi
done

if [ -z "$ALLCARDRULES" -a -f tch-gui-unhide-cards ]
then
  ./tch-gui-unhide-cards -s -a -q
fi

if [ $THEME_ONLY = n ]; then
  for l in $(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)
  do
    echo 200@$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in $l
    sed -e "s/\(current_year); ngx.print('\)/\1 \[tch-gui-unhide 2021.02.22 for FW Version 17.2.0468\]/" -i $l
  done
fi

echo 200@$(date +%H:%M:%S): Applying service changes if required...
apply_service_changes

chmod 644 /usr/share/transformer/mappings/rpc/gui.*
echo "************************************************************"
echo "* Done!! You should clear your browser cache of images and *"
echo "* files, otherwise you won't see the theme changes.        *"
echo "************************************************************"
echo
echo "++ TIP #1: Bookmark http://$(uci get network.lan.ipaddr)/gateway.lp"
echo "++         to bypass the Telstra Basic web GUI..."
echo
echo "++ TIP #2: Use the tch-gui-unhide-cards script to"
echo "++         change card order and visibility"
echo
if [ "$UPDATE_BTN" = n ]; then
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "++ WARNING! The Update Available notification is DISABLED! +"
  echo "++          You must check for updates manually.           +"
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo
fi
