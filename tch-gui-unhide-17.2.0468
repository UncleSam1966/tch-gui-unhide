#!/bin/sh
echo 000@$(date +%H:%M:%S): Built for firmware version 17.2.0468 - Release 2021.05.09
RELEASE='2021.05.09@17:27'
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on various pages https://hack-technicolor.readthedocs.io/en/stable/

TARGET_VERSION=""
for x in $(basename $0 | tr '-' "$IFS")
do 
  TARGET_VERSION=$x
done
echo "$TARGET_VERSION" | grep -q '\.'
if [ $? -eq 1 ]
then
  echo "ERROR: Unable to determine Target Version!"
  echo "       Did the script get renamed??"
  echo "       Aborting..."
  exit 1
fi
SCRIPT=$(basename $0 | sed "s/-$TARGET_VERSION//")

DFLT_USR=$(uci -q get web.uidefault.defaultuser)
FW_UPGRD=$(uci -q get web.uidefault.upgradefw)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC=$(uci -q get env.var.ssid_mac_postfix_r0)
HOSTNAME=$(uci -q get system.@system[0].hostname)
case "$(grep 'title>.*</title' /www/docroot/gateway.lp | cut -d'>' -f2 | cut -d'<' -f1)" in
  $VARIANT) TITLE="$VARIANT";;
  $HOSTNAME) TITLE="$HOSTNAME";;
  $VARIANT-$MAC) TITLE="$VARIANT-$MAC";;
  *) TITLE="";;
esac

if [ -f /usr/tch-gui-unhide.theme ]; then
  mv /usr/tch-gui-unhide.theme /etc/tch-gui-unhide.theme
fi
if [ -f /etc/tch-gui-unhide.theme ]; then
  . /etc/tch-gui-unhide.theme
fi
if [ -z "$THEME" ]; then
  KEEPLP=n
  grep -q 'body{background-color:#353c42;' /www/docroot/css/gw.css
  if [ $? -eq 0 ]; then
    THEME=night
  else
    grep -q 'body{background-color:#fff;' /www/docroot/css/gw.css
    if [ $? -eq 0 ]; then
      THEME=light
    else
      THEME=telstra
      grep -q 'body.landingpage #detailed_info_mobile>div:nth-child(5)>form>center>div{background-color' /www/docroot/css/gw-telstra.css
      if [ $? -eq 1 -a -f /www/snippets/tabs-home.lp ]; then
        grep -q 'T"Boost Your Wi-Fi"' /www/snippets/tabs-home.lp
        if [ $? -eq 1 ]; then
          KEEPLP=y
        else
          KEEPLP=n
        fi
      fi
    fi
  fi
  case "$(grep '.smallcard .header{background-color:#......;}' /www/docroot/css/gw.css  | cut -d# -f2 | cut -d\; -f1)" in
    "005c32") COLOR=green;;
    "662e91") COLOR=purple;;
    "f36523") COLOR=orange;;
    "008fd5") COLOR=blue;;
    "272c30") COLOR=monochrome;;
    *) if [ $THEME = light ]; then COLOR=monochrome; else COLOR=blue; fi;;
  esac
  ICONS="$(grep '.card_bg:after{visibility:' /www/docroot/css/gw.css | cut -d: -f3 | cut -d\; -f1)"
fi

grep -q 'rpc.gui.pwd.@' /www/docroot/modals/mmpbx-profile-modal.lp
if [ $? -eq 0 ]; then
  SIP_PWDS=y
else
  SIP_PWDS=n
fi

INSTALLED_RELEASE="$(grep -o -m 1 -E '[0-9][0-9][0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]@[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' /usr/share/transformer/mappings/rpc/gui.map 2>/dev/null)"

grep -q 'rpc.gui.UpdateAvailable' /www/docroot/gateway.lp
if [ $? -eq 0 ]; then
  UPDATE_BTN=y
else
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp
  if [ $? -eq 0 ]; then
    UPDATE_BTN=n
  else
    UPDATE_BTN=y
  fi
fi

FIX_DFLT_USR=n
FIX_FW_UPGRD=n
if [ "$(uci -q get dropbear.lan.enable)" = "1" -a "$(uci -q get dropbear.lan.PasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = "on" -a "$(uci -q get dropbear.lan.RootLogin)" = "1" ]; then
  FIX_SSH=n
else
  FIX_SSH=y
fi
if [ "$(uci -q get system.config.export_plaintext)" = "1" -a "$(uci -q get system.config.export_unsigned)" = "1" -a "$(uci -q get system.config.import_plaintext)" = "1" -a "$(uci -q get system.config.import_unsigned)" = "1" ]; then
  FIX_CFG_PORT=n
else
  FIX_CFG_PORT=y
fi
echo "$(uci -q get web.parentalblock.roles)" | grep -q "admin"
if [ $? -eq 0 ]; then
  FIX_PARENT_BLK=n
else
  FIX_PARENT_BLK=y
fi

# Keep count of changes so we know whether to restart services
SRV_cron=0
SRV_dropbear=0
SRV_nginx=0
SRV_power=0
SRV_system=0
SRV_transformer=0

check_pwr_setting() {
  section="$1"
  option="$2"
  text="$3"
  if [ -z "$(uci -q get power.$section.$option)" ]; then
    pwrctl show | grep "$text" | grep -q DISABLED
    uci set power.$section.$option="$?"
    SRV_power=$(( $SRV_power + 1 ))
  fi
}

apply_service_changes() {
  if [ $SRV_transformer -gt 0 ]; then
    # Need to stop watchdog whilst we restart transformer, because if it does not find /var/run/transformer.pid, it will reboot the system!
    /etc/init.d/watchdog-tch stop
    /etc/init.d/transformer restart
    /etc/init.d/watchdog-tch start
  fi
  [ $SRV_cron -gt 0 ] && /etc/init.d/cron restart
  [ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear restart
  [ $SRV_system -gt 0 ] && /etc/init.d/system reload
  [ $SRV_nginx -gt 0 ] && /etc/init.d/nginx restart

  if [ -z "$(uci -q get power.cpu)" ];then
    uci set power.cpu='cpu'
  fi

  if [ -z "$(uci -q get power.cpu.cpuspeed)" ]; then
    case "$(pwrctl show | grep "CPU Speed Divisor" | tr -s " " | cut -d" " -f4)" in
      1) uci set power.cpu.cpuspeed="1";;
      2) uci set power.cpu.cpuspeed="2";;
      4) uci set power.cpu.cpuspeed="4";;
      5) uci set power.cpu.cpuspeed="8";;
      *) uci set power.cpu.cpuspeed="256";;
    esac
    SRV_power=$(( $SRV_power + 1 ))
  fi
  check_pwr_setting "cpu" "wait" "CPU Wait"
  check_pwr_setting "ethernet" "ethapd" "Auto Power"
  check_pwr_setting "ethernet" "eee" "Energy Efficient Ethernet"
  check_pwr_setting "ethernet" "autogreeen" "AutoGreeen"
  check_pwr_setting "ethernet" "dgm" "Deep Green Mode"
  [ $SRV_power -gt 0 ] && uci commit power
}

RESTORE=n
WRAPPER=n
YES=n
THEME_ONLY='n'

FILENAME=$(basename $0)

while getopts :c:d:f:h:i:l:p:rt:uv:yTVW option
do
 case "${option}" in
   c) case "$(echo ${OPTARG} | tr "BGMOPR" "bgmopr" | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;; 
        g) COLOR=green;; 
        o) COLOR=orange;; 
        p) COLOR=purple;; 
        r) COLOR=red;; 
        *) COLOR=monochrome;;
      esac;;
   d) case "${OPTARG}" in y|Y) FIX_DFLT_USR=y; DFLT_USR='admin';; n|N) FIX_DFLT_USR=y; DFLT_USR='';;  *) echo 'WARNING: -d valid options are y or n';; esac;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPGRD=y; FW_UPGRD='1';;     n|N) FIX_FW_UPGRD=y; FW_UPGRD='0';; *) echo 'WARNING: -f valid options are y or n';; esac;;
   h) case "${OPTARG}" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        s) TITLE="$VARIANT-$MAC";;
        *) TITLE="$OPTARG";;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   l) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then KEEPLP=y; else KEEPLP=n; fi;;
   p) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then SIP_PWDS=y; else SIP_PWDS=n; fi;;
   r) RESTORE=y;;
   t) case "${OPTARG}" in
        g) THEME=night; COLOR=green; KEEPLP=n; echo WARNING: -tg deprecated. Use -tn -cg in future;; 
        o) THEME=night; COLOR=orange; KEEPLP=n; echo WARNING: -to deprecated. Use -tn -co in future;; 
        p) THEME=night; COLOR=purple; KEEPLP=n; echo WARNING: -tp deprecated. Use -tn -cp in future;; 
        l) THEME=light; COLOR=monochrome; KEEPLP=n;;
        m) THEME=telstramodern; COLOR=blue; KEEPLP=y;;
        n) THEME=night; COLOR=blue; KEEPLP=n;;
        *) THEME=telstra; COLOR=blue; KEEPLP=y;;
      esac;;
   u) RESULT=$(curl -m 5 -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else 
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]
                then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo "002@$(date +%H:%M:%S): Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]
                then
                  chmod +x $FILENAME
                  echo "002@$(date +%H:%M:%S): Successfully updated $FILENAME."
                  return 0
                else
                  echo "002@$(date +%H:%M:%S): Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo "002@$(date +%H:%M:%S): Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo "002@$(date +%H:%M:%S): GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   v) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then UPDATE_BTN=y; else UPDATE_BTN=n; fi;;
   y) YES=y;;
   T) THEME_ONLY=y;;
   V) LATEST_RELEASE=$(curl -m 1 -q -s -k -L -r0-9 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt)
      echo "002@$(date +%H:%M:%S): This Release       $RELEASE"
      if [ -z "$INSTALLED_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Installed Release  NOT INSTALLED"
      else
        echo "002@$(date +%H:%M:%S): Installed Release  $INSTALLED_RELEASE"
      fi
      if [ -z "$LATEST_RELEASE" ]; then
        echo "002@$(date +%H:%M:%S): Latest Release     UNKNOWN (No internet access?)"
      else
        echo "002@$(date +%H:%M:%S): Latest Release     $LATEST_RELEASE"
      fi
      exit;;      
   W) WRAPPER=y;;
   ?) echo "Optional parameters:"
      echo " Control Options:"
      echo " -d y|n         : Enable (y) or Disable (n) Default user (i.e. GUI access without password)"
      echo "                    (Default is current setting)"
      echo " -f y|n         : Enable (y) or Disable (n) firmware upgrade in the web GUI"
      echo "                    (Default is current setting)"
      echo " -p y|n         : Use decrypted text (y) or masked password (n) field for SIP Profile passwords"
      echo "                    (Default is current setting i.e (n) by default)"
      echo " -v y|n         : Enable (y) check for new releases and show 'Update Available' button in GUI, or Disable (n)"
      echo "                    (Default is current setting or (y) for first time installs)"
      echo " Theme Options:"
      echo " -c b|o|g|p|r|m : Set the theme highlight colour"
      echo "                    b=blue o=orange g=green p=purple r=red m=monochrome"
      echo "                    (Default is current setting, or (m) for light theme or (b) for night theme)"
      echo " -h d|s|n|\"txt\" : Set the browser tabs title (Default is current setting)"
      echo "                    (d)=$VARIANT (s)=$VARIANT-$MAC (n)=$HOSTNAME (\"txt\")=Specified \"txt\""
      echo " -i y|n         : Show (y) or hide (n) the card icons"
      echo "                    (Default is current setting, or (n) for light theme and (y) for night theme)"
      echo " -l y|n         : Keep the Telstra landing page (y) or de-brand the landing page (n)"
      echo "                    (Default is current setting, or (n) if no theme has been applied)"
      echo " -t l|n|t|m     : Set a light (l), night (n), or Telstra-branded Classic (t) or Modern (m) theme"
      echo "                    (Default is current setting, or Telstra Classic if no theme has been applied)"
      echo " -T             : Apply theme ONLY - bypass all other processing"
      echo " Update Options:"
      echo " -u             : Check for and download any changes to this script (may be newer than latest release version)"
      echo "                    When specifying the -u option, it must be the ONLY parameter specifed."
      if [ $WRAPPER = y ]; then
      echo " -U             : Download the latest release, including utility scripts (will overwrite all existing script versions)."
      echo "                    When specifying the -U option, it must be the ONLY parameter specifed."
      fi
      echo " Miscellaneous Options:"
      echo " -r             : Restore changed GUI files to their original state (config changes are NOT restored)"
      echo "                    When specifying the -r option, it must be the ONLY parameter specifed."
      echo " -y             : Bypass confirmation prompt (answers 'y')"
      echo " -V             : Show the release number of this script, the current installed release, and the latest available release on GitHub"
      echo 
      echo "NOTE #1: Theme (-t) does not need to be re-specified when re-running the script: current state will be 'remembered'"
      echo "         between executions (unless you execute with the -r option, which will remove all state information)"
      echo "NOTE #2: Use tch-gui-unhide-cards to set card order and visibility"
      echo
      exit;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

if [ $THEME_ONLY = n ]; then
restore_www() {
  # File deployed to incorect location by releases prior to 2021.02.06
  if [ -f /usr/share/transformer/mappings/iperf.map ]; then
    rm /usr/share/transformer/mappings/iperf.map
  fi
  # Need to remove existing version or it doesn't get replaced?? 
  if [ -f /usr/sbin/traffichistory.lua ]; then
    if [ "$1" = "V" ]; then
      echo 010@$(date +%H:%M:%S): Removing file /usr/sbin/traffichistory.lua
    fi
    rm /usr/sbin/traffichistory.lua
  fi
  grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
  if [ $? -eq 0 ]; then
    sed -e '/traffichistory.lua/d' -i /etc/crontabs/root
    SRV_cron=$(( $SRV_cron + 1 ))
  fi
  # Add individual files to be restored here
  for t in /etc/init.d/power
  do
    s=/rom$t
    if [ -f $s ]; then
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        echo 010@$(date +%H:%M:%S): Restoring file $t
        cp -f -p "$s" "$t"
      fi
    fi
  done
  # Add directories to be restored here
  for d in www/cards www/docroot www/lua www/snippets usr/share/transformer/commitapply usr/share/transformer/mappings/rpc usr/share/transformer/mappings/uci
  do
    echo 010@$(date +%H:%M:%S): Restoring directory /$d
    for s in $(find /rom/$d -type f | grep -v -E \(/rom/www/docroot/help\))
    do
      t=$(echo "$s" | cut -c5-)
      cmp -s "$s" "$t"
      if [ $? -ne 0 ]; then
        if [ "$1" = "V" ]; then
          echo 014@$(date +%H:%M:%S): Restoring file $t
        fi
        cp -f -p "$s" "$t"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done

    for f in $(find /$d -type f ! -path '/www/docroot/help*' ! -name '003_lte.lp')
    do
      if [ ! -f "/rom$f" -a -f "$f" ]; then
        if [ "$1" = "V" ]; then
          echo 019@$(date +%H:%M:%S): Removing file $f
        fi
        rm -f "$f"
        if [ $d = "usr/share/transformer" ]; then
          SRV_transformer=$(( $SRV_transformer + 1 ))
        fi
      fi
    done
  done
}

if [ $RESTORE = y ]; then
  restore_www V
  for f in /etc/tch-gui-unhide.ignored_release /etc/tch-gui-unhide.theme
  do
    if [ -f "$f" ]
    then
      echo 019@$(date +%H:%M:%S): Removing $f
      rm "$f"
    fi
  done
  for d in /www/docroot/css/light /www/docroot/css/night /www/docroot/css/telstra /www/docroot/img/light /www/docroot/img/night /www/docroot/css/Telstra
  do
    if [ -d "$d" ]
    then
      echo 019@$(date +%H:%M:%S): Removing empty directory $d
      rmdir "$d"
    fi
  done
  for s in $(uci show web | grep normally_hidden | cut -d. -f2)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry web.$s
    uci -q delete web.$s
    uci -q del_list web.ruleset_main.rules="$s"
    SRV_nginx=$(( $SRV_nginx + 2 ))
  done
  for s in $(uci show web | grep '=card' | cut -d= -f1)
  do
    echo 019@$(date +%H:%M:%S): Removing config entry $s
    uci -q delete $s
    SRV_nginx=$(( $SRV_nginx + 1 ))
  done
  RULES=$(uci get web.ruleset_main.rules)
  for s in $(echo $RULES | tr " " "\n" | grep -v dumaos | sort -u)
  do
    TARGET=$(uci -q get web.$s.target)
    if [ ! -z "$TARGET" -a ":$TARGET" != ":/" -a ! -f /www/docroot$TARGET -a ! -f /www$TARGET -a ! -f /www/docroot/ajax$TARGET ]; then
      echo 019@$(date +%H:%M:%S): Removing config entry web.$s
      uci -q delete web.$s
      uci -q del_list web.ruleset_main.rules="$s"
      SRV_nginx=$(( $SRV_nginx + 2 ))
    else
      ROLE=$(uci -q get web.$s.roles)
      if [ ! -z "$ROLE" -a "$ROLE" = "nobody" ]; then
        echo 019@$(date +%H:%M:%S): Resetting admin role on config entry web.$s.roles
        uci -q delete web.$s.roles
        uci add_list web.$s.roles="admin"
        SRV_nginx=$(( $SRV_nginx + 2 ))
      fi
    fi
  done
  uci commit web
  sed -e '/lua_shared_dict *TGU_MbPS/d' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
  apply_service_changes
  echo "************************************************************"
  echo "* Restore complete. You should clear your browser cache of *"
  echo "* images and files to make sure you can see the changes.   *"
  echo "* NOTE: No config changes have been restored, except to    *"
  echo "*       remove added entries to display hidden modals.     *"
  echo "************************************************************"
  exit
fi

VERSION=$(uci get version.@version[0].version | cut -d- -f1)
if [ "$VERSION" = "$TARGET_VERSION" ]
then
  echo 020@$(date +%H:%M:%S): Current version matches target \($TARGET_VERSION\)
else
  echo 020@$(date +%H:%M:%S): WARNING: This script was developed for the $TARGET_VERSION firmware.
  echo 020@$(date +%H:%M:%S): It MAY work on your $VARIANT with $VERSION firmware, but it also may not.
  echo 020@$(date +%H:%M:%S): If you still wish to proceed, reply FORCE \(in capitals as shown\).
  read
  if [ "$REPLY" != "FORCE" ]
  then
    echo 020@$(date +%H:%M:%S): Good choice.
    exit
  fi
fi

echo "030@$(date +%H:%M:%S): This script will perform the following actions:"
if [ $FIX_SSH = y ]; then
echo "030@$(date +%H:%M:%S):  - Properly enable SSH access over LAN"
fi
echo "030@$(date +%H:%M:%S):  - Preserve the password files and SSH configuration to prevent root loss on RTFD"
if [ $FIX_CFG_PORT = y ]; then
echo "030@$(date +%H:%M:%S):  - Enable unsigned configuration export/import in the web GUI"
fi
if [ $FIX_FW_UPGRD = y ]; then
if [ "$FW_UPGRD" = "1" ]; then
echo "030@$(date +%H:%M:%S):  - Enable firmware upgrade in the web GUI"
else
echo "030@$(date +%H:%M:%S):  - DISABLE firmware upgrade in the web GUI"
fi
fi
if [ $FIX_DFLT_USR = y ]; then
if [ "$DFLT_USR" = "admin" ]; then
echo "030@$(date +%H:%M:%S):  - ENABLE the default user in the web GUI (i.e. GUI access without password)"
else
echo "030@$(date +%H:%M:%S):  - Disable the default user in the web GUI"
fi
fi
if [ $FIX_PARENT_BLK = y ]; then
echo "030@$(date +%H:%M:%S):  - Ensure admin role can administer the parental block"
fi
if [ -z "$INSTALLED_RELEASE" ]; then
echo "030@$(date +%H:%M:%S):  - Install tch-gui-unhide release $RELEASE"
else
echo "030@$(date +%H:%M:%S):  - Replace tch-gui-unhide release $INSTALLED_RELEASE with $RELEASE"
fi
echo "030@$(date +%H:%M:%S):  - Allow editing of various settings that are not exposed in the stock GUI"
echo "030@$(date +%H:%M:%S):  - Unhide various cards and tabs contained in the stock GUI that are normally hidden"
echo "030@$(date +%H:%M:%S):  - Add new cards and screens, and modified cards and screens from the Ansuel tch-nginx-gui"
echo "030@$(date +%H:%M:%S):  - The GUI screens will be prettied up a bit and the $THEME theme applied with $COLOR highlights and $ICONS card icons"
if [ -f /www/docroot/landingpage.lp ]; then
echo "030@$(date +%H:%M:%S):  - The Telstra Landing Page will be $(echo $KEEPLP | sed -e 's/y/left UNCHANGED/' -e 's/n/themed and de-branded/')"
fi
if [ ! -z "$TITLE" ]; then
echo "030@$(date +%H:%M:%S):  - The browser tabs titles will be set to $TITLE"
fi
if [ "$SIP_PWDS" = y ]; then
echo "030@$(date +%H:%M:%S):  - SIP Profile passwords will be decrypted and displayed in text fields rather than password fields"
fi
if [ "$UPDATE_BTN" = y ]; then
echo "030@$(date +%H:%M:%S):  - New release checking is ENABLED and 'Update Available' will be shown in GUI when new version released"
else
echo "030@$(date +%H:%M:%S):  - New release checking is DISABLED! 'Update Available' will NOT be shown in GUI when new version released"
fi

echo 030@$(date +%H:%M:%S): If you wish to proceed, enter y otherwise just press [Enter] to stop.
if [ $YES = y ]; then
  REPLY=y
else
  read
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

echo 030@$(date +%H:%M:%S): IMPORTANT NOTE - You can restore changed GUI files to their original state by running: $0 -r

if [ $FIX_SSH = y ]; then
  echo 040@$(date +%H:%M:%S): Properly enabling SSH access over LAN
  # We need to enable this properly as you can enable/disable via the GUI, and if done
  # without allowing password auth and root login, it can accidently prevent SSH access
  uci set dropbear.lan.enable='1'
  uci set dropbear.lan.PasswordAuth='on'
  uci set dropbear.lan.RootPasswordAuth='on'
  uci set dropbear.lan.RootLogin='1'
  uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
fi
  
if [ $FIX_CFG_PORT = y ]; then
  echo 040@$(date +%H:%M:%S): Enabling unsigned configuration export/import in the web GUI
  uci set system.config.export_plaintext='1'
  uci set system.config.export_unsigned='1'
  uci set system.config.import_plaintext='1'
  uci set system.config.import_unsigned='1'
  uci commit system
  SRV_system=$(( $SRV_system + 4 ))
fi

if [ $FIX_FW_UPGRD = y ]; then
  if [ $FW_UPGRD = 1 ]; then
    echo 040@$(date +%H:%M:%S): Enabling firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='1'
    uci set web.uidefault.upgradefw_role='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  else
    echo 040@$(date +%H:%M:%S): DISABLING firmware upgrade in the web GUI
    uci set web.uidefault.upgradefw='0'
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
  uci commit web
fi

if [ $FIX_DFLT_USR = y ]; then
  if [ "$DFLT_USR" = "admin" ]; then
    echo 040@$(date +%H:%M:%S): Enabling the default user in the web GUI
    uci set web.default.default_user='usr_admin'
    uci set web.uidefault.defaultuser='admin'
  else
    echo 040@$(date +%H:%M:%S): Disabling the default user in the web GUI
    uci -q delete web.default.default_user
    uci -q delete web.uidefault.defaultuser
  fi
  uci commit web
  SRV_web=$(( $SRV_web + 2 ))
fi

if [ $FIX_PARENT_BLK = y ]; then
  echo 040@$(date +%H:%M:%S): Ensuring admin role can administer the parental block
  uci -q del_list web.parentalblock.roles='admin'
  uci add_list web.parentalblock.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

grep -q -E "lua_shared_dict *TGU_MbPS" /etc/nginx/nginx.conf
if [ $? -eq 1 ]; then
  echo 040@$(date +%H:%M:%S): Creating shared dictionary for throughput calculations
  sed -e '/^http/a\    lua_shared_dict TGU_MbPS 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

echo 040@$(date +%H:%M:%S): Preserving password files and SSH configuration to prevent root loss on RTFD
for f in /etc/passwd /etc/shadow /etc/config/dropbear /etc/dropbear/* /etc/rc.d/*dropbear
do
  grep -q -E "^$f$" /etc/rtfd_persistent_filelist.conf
  if [ $? -eq 1 ]
  then
    echo "$f">>/etc/rtfd_persistent_filelist.conf
  fi
done

echo 050@$(date +%H:%M:%S): Ensuring card sequence and visibility is up to date
ALLCARDRULES="$(uci show web | grep =card)"
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="${CARDFILE#*_}"
  CARDRULE="card_$(basename $CARD .lp)"
  MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
  HIDDEN=$(uci -q get web.${CARDRULE}.hide)
  if [ -z "$MODAL" ]
  then
    MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
  fi
  MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
  if [ ! -z "$MODALRULE" -a "$(uci -q get web.$MODALRULE.roles)" != "admin" ]
  then
    echo "050@$(date +%H:%M:%S):  - Converting $CARD card visibility from modal-based visibility"
    HIDDEN=1
    uci -q delete web.$MODALRULE.roles
    uci add_list web.$MODALRULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  if [ -z "$HIDDEN" -o \( "$HIDDEN" != "0" -a "$HIDDEN" != "1" \) ]
  then
    HIDDEN=0
  fi
  uci set web.${CARDRULE}=card
  uci set web.${CARDRULE}.card="$(basename $CARDFILE)"
  uci set web.${CARDRULE}.modal="$MODALRULE"
  uci set web.${CARDRULE}.hide="$HIDDEN"
  SRV_nginx=$(( $SRV_nginx + 4 ))
done
uci commit web

# Do the restore
restore_www
echo 050@$(date +%H:%M:%S): Pre-update restore completed

echo 060@$(date +%H:%M:%S): Deploy modified broadband GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified devices GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified eco GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified firewall GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified gateway GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified internet GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified iproutes GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified lte GUI code
echo H4sIAAAAAAAAA+1ZbW/bOBLOZ/0KQosi0q3fFdd3bRJcmk1vC7Rpb5vu4pArDNqibSIypZMo29ki/31nSEmWZDtN0qbF7nGA1iI5HA7JZ4Yzk+Vy2d57ZOoADfp99QtU/1XfXW8weNrtPz0Y9PY63c5Br7dH+o+tGFKaSBoTsheHobyN73Pjf1Jawv374Rh392g4uP/99zoDz9z/t6Dy/c9DnwbJ14fBne7/oHPQH8C19/D+Pc87MPf/LWjL/QeSNWkqwwnlQbhgcSuIvmwNvOCnBwc77r/b6fWf1u5/0O0P9kjn62zxdvo/v/9mM4qZjKlIAiqZ/4z4IRGhJOMZFVNG5IwnZMIDZllBOKYBkXQUMHJEPhEuEhZL+FRdrax5k/GJ6apB5HWEvMW3ZTWb5EwoEYqN/04lD4U1ZVKylWzhf344p1w4+0s2SnlzHo5gdX/fzRUYh0IyIYczFkQsBukx+1/KY+bYMKFVHbXdbFIUh6vrMq9PJQW4s2DNEia7hJaGCvY5SxI6ZTtmpLw6XkxL+c4ZG6ySB0mdDW1TDdjFgUQ0pnNkVP0tOMqh7nIKlsULGC7torWAo4cjYC/CMGBUZGzTX89f/VLjBHG/Zszn6XzE4lfiF0RGLnpOo3e5Ap+sstuY09WScgSInY55awkQYyLhYtqaBuGIBq0tzHbDuilJVivfIlgp7HQbXsctTcww0CC4hXkyre0IgO0H7N8pi6+dQvtGsVxxaEEPPINkw3EYpHOh9/eJAIAvux+tGaO+usQL+5zOGegt4Af3KnRTXUGpnZmCjQiHZgzzQxEgJmWcMtC+kQnvVYS/AVNIStLnWbsQn3fcWb5XkX8mZHzdPltxWV6FYS/LOoulKr13Xu+gst4FGEaYysNRfOy8Z3BTfuKWFpZ6uLzququ2JJUyzhxRlEr1lXMIhVQbLpULbHfxk67w0+t0oDEOaJIc2UlERQ+aibxWTs1ecl/OnvU70comN+RGbeOmDogwQp+lAaF8n8KonQ2DZiOasIjK2Rbov+69R6bWP1vAN6bixMe5E3h2mWr/xAIm2borCWPwyiiIC5+t7E1tFoWNXBZn9bFiGxXjyKehA2wUrdss5QK3qM2lZhKN+pE0iOBB9l9Fv7VReRtGdWNNwphcNRZwkYRHlMdJfSEXXiWrNvXyCne5sJjwN4Z+qHX82P2o8IF47Ffw+JImknwGlBPg2QLMavd3AWf9VHch07sLMr2vhkzvPsi8rBzkbcj1Ksj17odcr45cbzdyvW3IhViBXheqZJep4gp8I50db5zmhMeaT/JZoFr2CQ8JBFgsf34RJsUAPtEpU6YxrJpG6RiUXYDkBUo6AterhC8A41qu0hmkOo4MNewcHHQJSO245G+k23XJj2Q9mj2dl/a2tzmfZ43A218pw8v/WRDitaKYC+msQ5zWGPgk+1lZm6NjkpbKMYaSy4A1MiipF8Ml7nOylrL/X+vQ54vcFtSs5ij0r0kaYSxiE+4f2RgNYad9DOxwVPOcH7+bszDmv8OGaGBDuCZnIcxAkNiEjvHSM7FbEx6UuA8alVSq7+uNjvASpxrqQbQYFUOu6z7PMRNtxHIRxnpRK2ESbdKx25iMJYJHEZNJWw9yMQ5SH2aAPSd5NKynZoJpAHH3EB0OH6WSZYFYoGPzT5Y6ETRT1dXkYhKCgRdOBf1VE4A+Fc/IGK6exc9t/epp6XjzdeGFT7PqPs1a+zQr82ndTnk57cMG6MNwjcK4Z3Ie6MegnE042N0g9uGEs8CHczo+DNgUAHdsk1YL3PcJ3FrzZXZt5F/K5sh7SCbABBPFYx+28ynuNtn1W32Fe7uAQ3Ew+FqR3zDSLL0KZKtpNMjtltOon2MRnO4yta3KwmaKk9i+nd1H9RsV77VvIq97RPn6Bx2Qcqq7I4FqXFH1rrVo43H36H35Hne9GdUXqLZH7/57BA+uPbVy2nfQ7wRN+QVYzpVz4SSAKXhw0OVReIcAtHyezglL4E3FlJ4gwJo5wrKVIKs/hImhmB4/SQ7b2SdJNM4JnYAjQHUQ14Ipd0n8OIwSiA60CNdtbLge2C2+Bmufieq7VtWtt1FTdNhtcPCbbnZjsy/DEJRx8IGwvne15K9HO+p/IZw/lWGcfHHxb+9z9b/O085Bt1b/U38GMPW/b0D3rf9pbwNPtf54aFUQYj/lrxrgiSQFu1epRGm44tWKZsH8F6okfp+SYJowfxgFc6GjrjzHWfCxCvKKxObduU5t8shTs+AroKJ2/XbpWer10gmL7sKsRSctGYvO43V1bzzGXDJ7tJ4kIHCdTGWLqEwVn29gtt0iKSpKsOI+IkRVRLH/S9QEOIABk8/uOqfJlsldYSWfVVW9j7trpe8VXl8zMZWzrGIKGS3p9gYq5cUN4ez69BPhZxIAy849ZHsN4sGDvK3G+y5MuOQLLN/qtcV4m+YPXrp316WLYH+SCh1RFEcLHgbfeJXTIqTWt1O5XhxvYbebJ7jQcWkjt9rShf0fltjPLfBoaSzAG42pOPNVqThLNTcKGeCaGPxsSjoPtwtS5c2KHOxBMTluarCp1I/Ltae3GQd5UAV5S4WpVjiCZCJQN3VkA+5UzUiVZSv1ZWXW5DRMsbgLv35ZE4RpudasmjU9fDahaaDK/P1Of3fp66hS+MoV86p6erdqec7kMoyvNrQUVS3FFi3vpVTvTkq9EuRDUtZDgaekSNb+bKV8bRgFZnYV8lS6kUVmW8p5uZPOeWrFPL1eHbrQo+sZqooGOTXwCrYslNFZPf6hgKunobtFX50RFc07FuXqJtLYOIBG3UVkWVbVJ7tWNcX4XEbx56hIlUPwrBz12KWkB1Zh3haQfHiyfQsWauCq5tt1zD28qEAhZI3hrTvaH44CKq72ySxmk6P9mZRR8qzdZqK15Fc8Yj6nrTCetrHV1q5pmLmmIbqmZMjF8NXFh2HMpqDpsL9aDZ23Y0YFp+4PJ5BwxIBaOnxy1nvy986Tf3jDkw/7x6cBH1+RGYsZhjREBxtvTk9VSffN+SlRgQvk6hR38GgpNqlb0vdOUAwZMmTIkCFDhgwZMmTIkCFDhgwZMmTIkCFDhgwZMmTIkCFDhgwZMmTIkCFDG/QHAFpO3gBQAAA= | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified management GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified multiap GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified qos GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified system GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified telephony GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified theme GUI code
echo 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 | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified tod GUI code
echo  | base64 -d | tar -xzf - -C /

echo 060@$(date +%H:%M:%S): Deploy modified wireless GUI code
echo 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 | base64 -d | tar -xzf - -C /

if [ -f /www/docroot/booster.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local lp = require("web.lp")/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    -e 's#/booster.lp#/modals/wireless-boosters-boosters-modal.lp#' \
    /www/docroot/booster.lp > /www/docroot/modals/wireless-boosters-boosters-modal.lp
fi
if [ -f /www/docroot/boosterstatus.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster status screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/require("web.content_helper")/a local ui_helper = require("web.ui_helper")' \
    -e '/local type_convert/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#networkmap span12#networkmap#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/boosterstatus.lp > /www/docroot/modals/wireless-boosters-status-modal.lp
fi
if [ -f /www/docroot/wifidevices.lp ]
then
  echo 065@$(date +%H:%M:%S): Importing Booster Wi-Fi devices screen into advanced view
  sed \
    -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
    -e '/local content =/i \    ngx.print(ui_helper.createHeader(T"Wi-Fi Boosters", false, false, nil, nil) )' \
    -e 's#<div class="container">#<div class="modal-body update">#' \
    -e 's#<div class="row">#<div>#' \
    -e 's#lp.include("tabs-home.lp")#lp.include("tabs-boosters.lp")#' \
    -e 's#lp.include("footer.lp")#ngx.print(ui_helper.createFooter())#' \
    /www/docroot/wifidevices.lp > /www/docroot/modals/wireless-boosters-devices-modal.lp
fi

echo 066@$(date +%H:%M:%S): Fix QoS card for 17.2 FW
sed \
  -e '/-- 18\.1\.c only[ \t]*$/d' \
  -e '/-- 18\.1\.c only START/,/-- 18\.1\.c only END/d' \
  -i /www/cards/008_qos.lp

echo 066@$(date +%H:%M:%S): Fix QoS classify modal for 17.2 FW
sed \
  -e 's/uci_classify_path\.\."@."/uci_classify_path/' \
  -e '/-- 18\.1\.c only[ \t]*$/d' \
  -e '/-- 18\.1\.c only START/,/-- 18\.1\.c only END/d' \
  -i /www/docroot/modals/qos-classify-modal.lp

echo 066@$(date +%H:%M:%S): Remove QoS Upload Shapers tab \(Not supported on 17.2 FW\)
if [ -f /www/docroot/modals/qos-swshaper-modal.lp ]; then
  rm /www/docroot/modals/qos-swshaper-modal.lp
fi
sed \
  -e '/qos-swshaper-modal.lp/d' \
  -i /www/snippets/tabs-qos.lp

echo 066@$(date +%H:%M:%S): Importing Traffic Monitor into Diagnostics
sed \
  -e '/lp.include("header.lp")/,/lp.include("message.lp")/d' \
  -e '/^local attributes/i \    ngx.print(ui_helper.createHeader(T"Diagnostics", false, false, nil, nil) )' \
  -e '/"tabs-services/i <div class="modal-body update">\\' \
  -e '/^<div class="container toplevel">/d' \
  -e '/^<div class="row">/d' \
  -e '/^<div class="span11">/d' \
  -e '/^<fieldset>/,/^\\/d' \
  -e '/^<\/script>/a <\/script>\\' \
  -e '/^<\/script>/a <\/div>\\' \
  -e '/^<\/script>/,/^\\/d' \
  -e 's|tabs-services|tabs-diagnostics|' \
  -e 's|lp.include("footer.lp")|ngx.print(ui_helper.createFooter())|' \
  -e 's|800px;|900px;margin:0 auto;|' \
  -e 's|traffic.lp|modals/diagnostics-traffic-modal.lp|' \
  -e 's|<a href="%s" target="_self">|<a href="#" data-remote="%s">|' \
  -e 's|@wwan.up")\[1\].value|@wwan.up")|' \
  -e 's|if wwan_up|if wwan_up and wwan_up[1].value|' \
  /www/docroot/traffic.lp > /www/docroot/modals/diagnostics-traffic-modal.lp

echo 067@$(date +%H:%M:%S): Creating QoS Reclassify Rules modal
sed \
  -e 's/\(classify[\.-_%]\)/re\1/g' \
  -e 's/Classify/Reclassify/' \
  /www/docroot/modals/qos-classify-modal.lp > /www/docroot/modals/qos-reclassify-modal.lp

if [ -f /etc/init.d/cwmpd ]
then
  echo 070@$(date +%H:%M:%S): CWMP found - Leaving in GUI
else
  echo 070@$(date +%H:%M:%S): CWMP not found - Removing from GUI
  rm /www/cards/090_cwmpconf.lp
  rm /www/docroot/modals/cwmpconf-modal.lp
  uci -q delete web.cwmpconfmodal
  uci -q del_list web.ruleset_main.rules=cwmpconfmodal
  uci -q delete web.card_cwmpconf
fi

if [ $(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | wc -l) -eq 0 ]
then
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs not found - Removing from GUI
  rm /www/cards/010_fon.lp
  rm /www/docroot/modals/fon-modal.lp
  uci -q delete web.fon
  uci -q delete web.fonmodal
  uci -q del_list web.ruleset_main.rules=fon
  uci -q del_list web.ruleset_main.rules=fonmodal
  uci -q delete web.card_fon
else
  echo 070@$(date +%H:%M:%S): Telstra Air and Fon SSIDs FOUND - Leaving in GUI
fi

# Check all modals are enabled, except:
#  - diagnostics-airiq-modal.lp (requires Flash player)
#  - mmpbx-sipdevice-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - mmpbx-statistics-modal.lp (only required for firmware 17.2.0188-820-RA and earlier)
#  - speedservice-modal.lp
#  - wireless-qrcode-modal.lp (fails with a nil password index error)
echo 070@$(date +%H:%M:%S): Checking modal visibility
for f in $(ls /www/docroot/modals | grep -E -v \(diagnostics-airiq-modal.lp\|mmpbx-sipdevice-modal.lp\|mmpbx-statistics-modal.lp\|speedservice-modal.lp\|wireless-qrcode-modal.lp\) )
do
  MODAL=$(basename $f)
  uci show web | grep -q "/modals/$MODAL"
  if [ $? -eq 1 ]
  then
    CREATE_RULE=y
    RULE=$(basename $f .lp | sed -e 's/-//g')
  else
    CREATE_RULE=n
    RULE=$(uci show web | grep "/modals/$MODAL" | grep -m 1 -v card_ | cut -d. -f2)
  fi
  if [ $CREATE_RULE = y ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL
    uci add_list web.ruleset_main.rules=$RULE
    uci set web.$RULE=rule
    uci set web.$RULE.target=/modals/$MODAL
    uci set web.$RULE.normally_hidden='1'
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]
  then
    echo 070@$(date +%H:%M:%S): Enabling $MODAL 
    uci -q delete web.$RULE.roles
    uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
done
uci commit web

echo 070@$(date +%H:%M:%S): Processing any additional cards
for CARDFILE in $(find /www/cards/ -maxdepth 1 -type f | sort)
do
  CARD="$(basename $CARDFILE)"
  CARDRULE=$(uci show web | grep "^web\.card_.*${CARDFILE#*_}" | cut -d. -f2)
  if [ -z "$CARDRULE" -o -z "$(uci -q get web.${CARDRULE}.modal)" ]
  then
    CARDRULE="card_$(basename ${CARDFILE#*_} .lp)"
    MODAL=$(grep createCardHeader $CARDFILE | grep -o "modals/.*\.lp")
    if [ -z "$MODAL" ]
    then
      MODAL=$(grep '\(modalPath\|modal_link\)' $CARDFILE | grep -m 1 -o "modals/.*\.lp")
    fi
    MODALRULE=$(uci show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
    uci set web.${CARDRULE}=card
    uci set web.${CARDRULE}.card="$CARD"
    uci set web.${CARDRULE}.modal="$MODALRULE"
    uci set web.${CARDRULE}.hide='0'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  fi
done

if [ "$(uci -q get web.broadbandstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling broadband-status.lua
  uci add_list web.ruleset_main.rules='broadbandstatusajax'
  uci set web.broadbandstatusajax='rule'
  uci set web.broadbandstatusajax.target='/ajax/broadband-status.lua'
  uci set web.broadbandstatusajax.normally_hidden='1'
  uci add_list web.broadbandstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.networkthroughputajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling network-throughput.lua
  uci add_list web.ruleset_main.rules='networkthroughputajax'
  uci set web.networkthroughputajax='rule'
  uci set web.networkthroughputajax.target='/ajax/network-throughput.lua'
  uci set web.networkthroughputajax.normally_hidden='1'
  uci add_list web.networkthroughputajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.devicesstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling devices-status.lua
  uci add_list web.ruleset_main.rules='devicesstatusajax'
  uci set web.devicesstatusajax='rule'
  uci set web.devicesstatusajax.target='/ajax/devices-status.lua'
  uci set web.devicesstatusajax.normally_hidden='1'
  uci add_list web.devicesstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.gatewaystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling gateway-status.lua
  uci add_list web.ruleset_main.rules='gatewaystatusajax'
  uci set web.gatewaystatusajax='rule'
  uci set web.gatewaystatusajax.target='/ajax/gateway-status.lua'
  uci set web.gatewaystatusajax.normally_hidden='1'
  uci add_list web.gatewaystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.internetstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling internet-status.lua
  uci add_list web.ruleset_main.rules='internetstatusajax'
  uci set web.internetstatusajax='rule'
  uci set web.internetstatusajax.target='/ajax/internet-status.lua'
  uci set web.internetstatusajax.normally_hidden='1'
  uci add_list web.internetstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.telephonystatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling telephony-status.lua
  uci add_list web.ruleset_main.rules='telephonystatusajax'
  uci set web.telephonystatusajax='rule'
  uci set web.telephonystatusajax.target='/ajax/telephony-status.lua'
  uci set web.telephonystatusajax.normally_hidden='1'
  uci add_list web.telephonystatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi
if [ "$(uci -q get web.ssidstatusajax)" != "rule" ]
then
  echo 075@$(date +%H:%M:%S): Enabling ssid-status.lua
  uci add_list web.ruleset_main.rules='ssidstatusajax'
  uci set web.ssidstatusajax='rule'
  uci set web.ssidstatusajax.target='/ajax/ssid-status.lua'
  uci set web.ssidstatusajax.normally_hidden='1'
  uci add_list web.ssidstatusajax.roles='admin'
  uci commit web
  SRV_nginx=$(( $SRV_nginx + 4 ))
fi

SERIAL=$(uci get env.var.serial)
echo 080@$(date +%H:%M:%S): Change config export filename from config.bin to $VARIANT-$SERIAL-$VERSION@YYMMDD.bin
echo 080@$(date +%H:%M:%S): Add reset/upgrade warnings
sed \
  -e "s/=config.bin/=$VARIANT-$SERIAL-$VERSION@\" .. os.date(\"%Y%m%d\") .. \".bin/" \
  -e '/local basic =/i local lose_root_warning = { alert = { class = "alert-info", style = "margin-bottom:5px;" }, }' \
  -e '/T"Reset"/i \    html[#html + 1] = ui_helper.createAlertBlock(T"Root access <i>should</i> be preserved when using the <b><i class=\\"icon-bolt\\" style=\\"width:auto;\\">\</i> Reset</b> button. You can use the <i>reset-to-factory-defaults-with-root</i> utility script from the command line to have more control over the factory reset and still retain root access.", lose_root_warning)' \
  -e '/T"Upgrade"/i \          html[#html + 1] = ui_helper.createAlertBlock(T"<b>WARNING!</b> Upgrading firmware using this method will cause loss of root access! Use the <i>reset-to-factory-defaults-with-root</i> utility script with the -f option from the command line to upgrade to the firmware and still retain root access.", lose_root_warning)' \
  -e '/"uci.versioncusto.override.fwversion_override"/a \   unhide_version = "rpc.gui.UnhideVersion",' \
  -e '/"Serial Number"/i \    html[#html + 1] = ui_helper.createLabel(T"tch-gui-unhide Version", content["unhide_version"], basic)' \
  -e '/Global Information/d' \
  -i /www/docroot/modals/gateway-modal.lp

if [ "$UPDATE_BTN" = y ]; then
  echo 080@$(date +%H:%M:%S): Add update available button
  sed \
    -e '/uci.version.version.@version\[0\].timestamp/a\    updatable = "rpc.gui.UpdateAvailable",' \
    -e '/isBridgedMode/i\        if cui.updatable == "1" then' \
    -e "/isBridgedMode/i\          html[#html + 1] = '<div class=\"btn-group\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn\"><i class=\"icon-info-sign orange\"></i>&nbsp;'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Update Available\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"caret\"></span></button>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<ul class=\"dropdown-menu pull-right\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"https://github.com/seud0nym/tch-gui-unhide/releases/latest\" target=\"_blank\" rel=\"noopener noreferrer\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Open Download Page\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '<li><a tabindex=\"-1\" href=\"/gateway.lp?ignore_update=1\">'" \
    -e "/isBridgedMode/i\          html[#html + 1] = T\"Ignore This Update\"" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</a></li>'" \
    -e "/isBridgedMode/i\          html[#html + 1] = '</ul></div>'" \
    -e '/isBridgedMode/i\        end' \
    -e '/local getargs/a\if getargs and getargs.ignore_update then' \
    -e '/local getargs/a\  local proxy = require("datamodel")' \
    -e '/local getargs/a\  proxy.set("rpc.gui.IgnoreCurrentRelease", getargs.ignore_update)' \
    -e '/local getargs/a\end' \
    -i /www/docroot/gateway.lp
else
  echo 080@$(date +%H:%M:%S): Update available button will NOT be shown in GUI
fi

echo 080@$(date +%H:%M:%S): Add auto-refresh management and wait indicator when opening modals
sed \
  -e '/<title>/i \    <script src="/js/tch-gui-unhide.js"></script>\\' \
  -e '/id="waiting"/a \    <script>$(".smallcard .header,.modal-link").click(function(){$("#waiting").fadeIn();});</script>\\' \
  -i /www/docroot/gateway.lp

echo 080@$(date +%H:%M:%S): Fix uptime on basic Broadband tab
sed -e 's/days > 1/days > 0/' -i /www/docroot/broadband.lp

echo 085@$(date +%H:%M:%S): Add Device Capabilities and LTE Band Selection to Mobile Configuration screen
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/local function get_session_info_section/i \local function get_device_capabilities_section(page, html)' \
  -e '/local function get_session_info_section/i \	local section = {}' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.arfcn_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"ARFCN Selection Support" .. ":", page.device.capabilities.arfcn_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.band_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Band Selection Support" .. ":", page.device.capabilities.band_selection_support))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.manual_plmn_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Manual PLMN Selection" .. ":", page.device.capabilities.manual_plmn_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.strongest_cell_selection ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Strongest Cell Selection" .. ":", page.device.capabilities.strongest_cell_selection))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_modes ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported Modes" .. ":", page.device.capabilities.supported_modes))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_cdma ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported CDMA Bands" .. ":", page.device.capabilities.supported_bands_cdma))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_gsm ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported GSM Bands" .. ":", page.device.capabilities.supported_bands_gsm))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.supported_bands_lte ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Supported LTE Bands" .. ":", page.device.capabilities.supported_bands_lte))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.max_data_sessions ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"Max Data Sessions" .. ":", page.device.capabilities.max_data_sessions))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_reading ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Reading" .. ":", page.device.capabilities.sms_reading))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if page.device.capabilities.sms_sending ~= "" then' \
  -e '/local function get_session_info_section/i \		tinsert(section, ui_helper.createLabel(T"SMS Sending" .. ":", page.device.capabilities.sms_sending))' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \	if utils.Len(section) > 0 then' \
  -e '/local function get_session_info_section/i \		tinsert(html, "<fieldset><legend>" .. T"Device Capabilities" .. "</legend>")' \
  -e '/local function get_session_info_section/i \		tinsert(html, section)' \
  -e '/local function get_session_info_section/i \		tinsert(html, "</fieldset>")' \
  -e '/local function get_session_info_section/i \	end' \
  -e '/local function get_session_info_section/i \end' \
  -e '/local function get_session_info_section/i \\' \
  -e '/local function get_profile_select/i \local function validate_lte_bands(device)' \
  -e '/local function get_profile_select/i \    local choices = setmetatable({}, untaint_mt)' \
  -e '/local function get_profile_select/i \    local b' \
  -e '/local function get_profile_select/i \    for b in string.gmatch(device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/local function get_profile_select/i \      choices[string.untaint(b)] = true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \    return function(value, object, key)' \
  -e '/local function get_profile_select/i \      local uv' \
  -e '/local function get_profile_select/i \      local concatvalue = ""' \
  -e '/local function get_profile_select/i \      if not value then' \
  -e '/local function get_profile_select/i \        return nil, T"Invalid input."' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      if type(value) == "table" then' \
  -e '/local function get_profile_select/i \        uv = value' \
  -e '/local function get_profile_select/i \      else' \
  -e '/local function get_profile_select/i \        uv = { value }' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      for i,v in ipairs(uv) do' \
  -e '/local function get_profile_select/i \        if v ~= "" then' \
  -e '/local function get_profile_select/i \          if concatvalue ~= "" then' \
  -e '/local function get_profile_select/i \            concatvalue = concatvalue.." "' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \          concatvalue = concatvalue..string.untaint(v)' \
  -e '/local function get_profile_select/i \          if not choices[v] then' \
  -e '/local function get_profile_select/i \            return nil, T"Invalid value."' \
  -e '/local function get_profile_select/i \          end' \
  -e '/local function get_profile_select/i \        end' \
  -e '/local function get_profile_select/i \      end' \
  -e '/local function get_profile_select/i \      object[key] = concatvalue' \
  -e '/local function get_profile_select/i \      return true' \
  -e '/local function get_profile_select/i \    end' \
  -e '/local function get_profile_select/i \end' \
  -e '/local function get_profile_select/i \\' \
  -e '/p.mapParams\["interface_enabled"\]/a \		if utils.radio_tech_map[device.leds.radio] == "LTE" then' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapParams["lte_bands"] = device.uci_path .. "lte_bands"' \
  -e '/p.mapParams\["interface_enabled"\]/a \			p.mapValid["lte_bands"] = validate_lte_bands(device)' \
  -e '/p.mapParams\["interface_enabled"\]/a \		end' \
  -e '/"Access Technology"/a \	 			if utils.radio_tech_map[page.device.leds.radio] == "LTE" then' \
  -e '/"Access Technology"/a \	 				local b, lte_bands, lte_bands_checked = nil, {}, {}' \
  -e '/"Access Technology"/a \	 				for b in string.gmatch(page.device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/"Access Technology"/a \	 					lte_bands[#lte_bands+1] = { string.untaint(b), b }' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				if not page.content["lte_bands"] or page.content["lte_bands"] == "" then' \
  -e '/"Access Technology"/a \	 					for k,v in ipairs(lte_bands) do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[k] = string.untaint(v[1])' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				else' \
  -e '/"Access Technology"/a \	 					for b in string.gmatch(page.content["lte_bands"], "%d+") do' \
  -e '/"Access Technology"/a \	 						lte_bands_checked[#lte_bands_checked+1] = string.untaint(b)' \
  -e '/"Access Technology"/a \	 					end' \
  -e '/"Access Technology"/a \	 				end' \
  -e '/"Access Technology"/a \	 				tinsert(html, ui_helper.createCheckboxGroup(T"LTE Bands", "lte_bands", lte_bands, lte_bands_checked, {checkbox = { class="inline" }}, nil))' \
  -e '/"Access Technology"/a \	 			end' \
  -e '/^\s*get_device_info_section/a get_device_capabilities_section(page, html)' \
  -i /www/docroot/modals/lte-modal.lp

echo 085@$(date +%H:%M:%S): Add new Mobile tabs
sed \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-autofailover.lp", T"Auto-Failover"},' \
  -e '/{"lte-doctor.lp", T"Diagnostics"},/a \	{"lte-operators.lp", T"Network Operators"},' \
  -i /www/snippets/tabs-mobiled.lp

echo 085@$(date +%H:%M:%S): Configure transformer for missing WanSensing settings
sed \
  -e 's/\("autofailover\)/\1", \1maxwait/' \
  -e '/timeout/ {n; :a; /timeout/! {N; ba;}; s/\("timeout"\)/\1, "fasttimeout"/;}' \
  -i /usr/share/transformer/mappings/uci/wansensing.map
SRV_transformer=$(( $SRV_transformer + 1 ))

if [ -z "$TITLE" ]
then
  echo 090@$(date +%H:%M:%S): Leaving browser tabs title unchanged
else
  echo 090@$(date +%H:%M:%S): Change the title in browser tabs to $TITLE
  for f in /www/docroot/gateway.lp /www/lua/hni_helper.lua /www/snippets/header.lp
  do
      sed -e "s,title>.*</title,title>$TITLE</title," -i $f
  done
  sed -e "s,<title>');  ngx.print( T\"Change password\" ); ngx.print('</title>,<title>$TITLE - Change Password</title>," -i /www/docroot/password.lp
fi

echo 090@$(date +%H:%M:%S): Change Gateway to $VARIANT
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/001_gateway.lp
sed -e "s/Gateway/$VARIANT/g" -i /www/cards/003_internet.lp

sed -e "s/Gateway/LAN/g" -i /www/cards/005_LAN.lp
sed -e "s,<title>');  ngx.print( T\"Login\" ); ngx.print('</title>,<title>$TITLE Login</title>," -i /www/docroot/login.lp

echo 095@$(date +%H:%M:%S): Add forceprefix to transformer mapping for network interface
sed \
  -e 's/"reqprefix", "noslaaconly"/"reqprefix", "forceprefix", "noslaaconly"/' \
  -i /usr/share/transformer/mappings/uci/network.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 095@$(date +%H:%M:%S): Make Telstra bridge mode compatible with Ansuel network cards and modals
sed \
  -e "/uci.network.interface.@lan.ifname/i \        [\"uci.network.config.wan_mode\"] = 'bridge'," \
  -i /www/lua/bridgedmode_helper.lua

echo 100@$(date +%H:%M:%S): Fix card visibility check
sed \
  -e '/local access/,/end/d' \
  -e 's/access and/session:hasAccess(card.modal) or/' \
  -i /www/lua/cards.lua

echo 100@$(date +%H:%M:%S): Remove obsolete help links
for m in $(grep -l 'local help_link = ' /www/docroot/modals/*)
do
  sed -e 's/\(local help_link = \)\(.*\)/\1nil/' -i "$m"
done

echo 100@$(date +%H:%M:%S): Update gateway card and status ajax with hardware temperature monitors
elements=""
for m in $(find /sys/devices/i2c-*/ -name temp1_input)
do
  elements="$elements\"$m\","
done
for f in /www/cards/001_gateway.lp /www/docroot/ajax/gateway-status.lua
do
  sed -e "s|\(^local temp1_input = {\)|\1$elements|" -i $f
done

echo 100@$(date +%H:%M:%S): Fix display bug on Mobile card and hide if no devices found
sed \
  -e '/<script>/a var divs = $("#mobiletab .content").children("div");if(divs.length>0){var p=$("#mobiletab .content .subinfos");divs.appendTo(p);}\\' \
  -e '/require("web.lte-utils")/a local result = utils.getContent("rpc.mobiled.DeviceNumberOfEntries")' \
  -e '/require("web.lte-utils")/a local devices = tonumber(result.DeviceNumberOfEntries)' \
  -e '/require("web.lte-utils")/a if devices and devices > 0 then' \
  -e '$ a end' \
  -i $(find /www/cards -type f -name '*lte.lp')

echo 100@$(date +%H:%M:%S): Add DHCPv6 Server status and prefix to LAN card 
sed \
  -e '/local dhcpState$/a local dhcp6State_text = ""' \
  -e '/local dhcpState$/a local dhcp6State' \
  -e '/local dhcpState$/a local slaacState_text = ""' \
  -e '/local dhcpState$/a local slaacState' \
  -e '/local dhcpState$/a local ipv6State_text' \
  -e '/@lan.dhcpv4/a \    ipv6State = "uci.network.interface.@lan.ipv6",' \
  -e '/@lan.dhcpv4/a \    dhcpv6State = "uci.dhcp.dhcp.@lan.dhcpv6",' \
  -e '/@lan.dhcpv4/a \    slaacState = "uci.dhcp.dhcp.@lan.ra",' \
  -e '/@lan.dhcpv4/a \    ignored = "uci.dhcp.dhcp.@lan.ignore",' \
  -e '/@lan.netmask/a \    ipv6prefix = "rpc.network.interface.@lan.ip6prefix_assignment",' \
  -e '/DHCP enabled/i if mapParams["ignored"] == "1" then' \
  -e '/DHCP enabled/i   dhcp4State_text = T"DHCPv4 ignored (Bridged mode)"' \
  -e '/DHCP enabled/i   dhcp4State = "2"' \
  -e '/DHCP enabled/i else' \
  -e '/dhcpState = "1"/a end' \
  -e 's/localdevIP = "uci/localdevIP = "rpc/' \
  -e 's/dhcpState/dhcp4State/g' \
  -e 's/DHCP enabled/DHCPv4 enabled/' \
  -e 's/DHCP disabled/DHCPv4 disabled/' \
  -e '/getExactContent/a \if mapParams["ipv6State"] == "" or mapParams["ipv6State"] == "1" then' \
  -e '/getExactContent/a \  if mapParams["dhcpv6State"] == "" or mapParams["dhcpv6State"] == "server" then' \
  -e '/getExactContent/a \    if mapParams["ignored"] == "1" then' \
  -e '/getExactContent/a \      dhcp6State_text = T"DHCPv6 ignored (Bridged mode)"' \
  -e '/getExactContent/a \      dhcp6State = "2"' \
  -e '/getExactContent/a \    else' \
  -e '/getExactContent/a \      dhcp6State_text = T"DHCPv6 enabled"' \
  -e '/getExactContent/a \      dhcp6State = "1"' \
  -e '/getExactContent/a \    end' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    dhcp6State_text = T"DHCPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \  if mapParams["slaacState"] == "" or mapParams["slaacState"] == "server" then' \
  -e '/getExactContent/a \    if mapParams["ignored"] == "1" then' \
  -e '/getExactContent/a \      slaacState_text = T"SLAAC + RA ignored (Bridged mode)"' \
  -e '/getExactContent/a \      slaacState = "2"' \
  -e '/getExactContent/a \    else' \
  -e '/getExactContent/a \      slaacState_text = T"SLAAC + RA enabled"' \
  -e '/getExactContent/a \      slaacState = "1"' \
  -e '/getExactContent/a \    end' \
  -e '/getExactContent/a \  else' \
  -e '/getExactContent/a \    slaacState_text = T"SLAAC + RA disabled"' \
  -e '/getExactContent/a \    slaacState = "0"' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    dhcp6State_text = T"IPv6 disabled"' \
  -e '/getExactContent/a \    dhcp6State = "0"' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \if mapParams["ipv6prefix"] == "" then' \
  -e '/getExactContent/a \    ipv6State_text = T""' \
  -e '/getExactContent/a \else' \
  -e '/getExactContent/a \    ipv6State_text = T"Prefix: "' \
  -e '/getExactContent/a \end' \
  -e '/createSimpleLight/a \            ui_helper.createSimpleLight(dhcp6State, dhcp6State_text)' \
  -e '/createSimpleLight/a \        )' \
  -e '/createSimpleLight/a \        if mapParams["ipv6State"] == "1" then' \
  -e '/createSimpleLight/a \            ngx.print(ui_helper.createSimpleLight(slaacState, slaacState_text))' \
  -e '/createSimpleLight/a \        end' \
  -e '/createSimpleLight/a \        ngx.print(' \
  -e 's/and netmask is/<br>Subnet Mask:/' \
  -e "s/IP is/IP:/" \
  -e "/<\/p>/i \            '<br>'," \
  -e "/<\/p>/i \            format(T'%s <nobr><strong style=\"letter-spacing:-1px;font-size:12px;\">%s</strong></nobr>', ipv6State_text, mapParams[\"ipv6prefix\"])," \
  -e '/^\\$/d' \
  -e "s/<strong>/<strong style=\"letter-spacing:-1px;font-size:12px;\">/g" \
  -i /www/cards/005_LAN.lp

echo 100@$(date +%H:%M:%S): Fix bug in relay setup card 
sed \
  -e '/getExactContent/a \ ' \
  -e '/getExactContent/a local server_addr = proxy.get\("uci.dhcp.relay.@relay.server_addr"\)' \
  -e 's/\(if proxy.get."uci.dhcp.relay.@relay.server_addr".\)\(.*\)\( then\)/if not server_addr or \(server_addr\2\)\3/' \
  -e 's/\r//' \
  -i /www/cards/018_relaysetup.lp

echo 100@$(date +%H:%M:%S): Add SAMBA and DLNA server names to the Content Sharing card
sed \
  -e 's/\t/  /g' \
  -e '/Light(content\["dlna/i\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["samba_name"]))' \
  -e '/Light(content\["dlna/a\        tinsert(html, format(T"<p class=\\"subinfos\\">%s</p>", content["dlna_name"]))' \
  -i /www/cards/012_contentsharing.lp

echo 100@$(date +%H:%M:%S): Only show xDSL Config card if WAN interface is DSL 
sed \
 -e '/uci.xdsl.xdsl.@dsl0.enabled/a \      wan_ifname = "uci.network.interface.@wan.ifname",' \
 -e '/if session:hasAccess/i \local wan_ifname = content["wan_ifname"]' \
 -e 's/if session:hasAccess/if wan_ifname and (wan_ifname == "ptm0" or wan_ifname == "atmwan") and session:hasAccess/' \
 -i /www/cards/093_xdsl.lp

echo 100@$(date +%H:%M:%S): Enable cards in Bridge Mode
# https://www.crc.id.au/hacking-the-technicolor-tg799vac-and-unlocking-features/#mozTocId685948
sed -e '/if info.bridged then/,/end/d' -i /www/lua/cards_limiter.lua

echo 100@$(date +%H:%M:%S): Show individual helper status on NAT Helpers card
sed \
  -e '/local enabled/,/^  end/d' \
  -e '/convertResultToObject/a \  local htmlLeft = {}' \
  -e '/convertResultToObject/a \  local htmlRight = {}' \
  -e '/convertResultToObject/a \  local attributes = {' \
  -e '/convertResultToObject/a \    span = { style = "display:inline-block;font-size:smaller;letter-spacing:-1px;vertical-align:unset;" },' \
  -e '/convertResultToObject/a \  }' \
  -e '/convertResultToObject/a \  for _, v in ipairs(helper_uci_content) do' \
  -e '/convertResultToObject/a \      if v.intf ~= "loopback" then' \
  -e '/convertResultToObject/a \          local state = v.enable' \
  -e '/convertResultToObject/a \          local text' \
  -e '/convertResultToObject/a \          if state ~= "0" then' \
  -e '/convertResultToObject/a \              text =" enabled<br>"' \
  -e '/convertResultToObject/a \              state = "1"' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              text = " disabled<br>"' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \          if #htmlRight >= #htmlLeft then' \
  -e '/convertResultToObject/a \              htmlLeft[#htmlLeft+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          else' \
  -e '/convertResultToObject/a \              htmlRight[#htmlRight+1] = ui_helper.createSimpleLight(state, string.upper(v.helper), attributes) .. text' \
  -e '/convertResultToObject/a \          end' \
  -e '/convertResultToObject/a \      end' \
  -e '/convertResultToObject/a \  end' \
  -e '/divtable/,/div>/d' \
  -e '/card_bg/a \            <div style="display:flex;flex-direction:row;">\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlLeft);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \              <div style="width:50%">\\' \
  -e "/card_bg/a \                ');" \
  -e '/card_bg/a \                ngx.print(htmlRight);' \
  -e "/card_bg/a \                ngx.print('\\\\" \
  -e '/card_bg/a \              </div>\\' \
  -e '/card_bg/a \            </div>\\' \
  -i /www/cards/092_natalghelper.lp

echo 101@$(date +%H:%M:%S): Missing proxy in relay setup card 
sed -e '/local content_helper/a local proxy = require\("datamodel"\)' -i /www/cards/018_relaysetup.lp

echo 101@$(date +%H:%M:%S): Change WAN Services modal checkboxes to switches
sed \
  -e 's/= gVCS/= vB/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 105@$(date +%H:%M:%S): Changing description of router DNS Server from Telstra to $VARIANT 
sed -e "s/Telstra/$VARIANT/" -i /www/docroot/modals/ethernet-modal.lp

if [ -f ipv4-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv4 DNS Servers
  sed -e 's/\r//g' ipv4-DNS-Servers | sort -r | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      sed -e "/127.0.0.1/a \    {\"$ip\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

if [ -f ipv6-DNS-Servers ]
then
  echo 105@$(date +%H:%M:%S): Adding custom IPv6 DNS Servers
  sed -e 's/\r//g' ipv6-DNS-Servers | sort | while read -r host ip
  do 
    if [ ! -z "$ip" ]
    then 
      ipv6=$(echo $ip  | tr ':' '-')
      sed -e "/2001-4860-4860--8888/i \    {\"$ipv6\", T\"$host ($ip)\"}," -i /www/docroot/modals/ethernet-modal.lp
    fi
  done
fi

echo 105@$(date +%H:%M:%S): Adding domain name and switch to enable/disable DHCPv6 Server and SLAAC, removing unused ethernet port processing, and fix some spelling/grammar
sed \
 -e '/^local gVIES/a \local vNES = post_helper.validateNonEmptyString' \
 -e '/^-- Standard/i \local function getDomainNamePath()' \
 -e '/^-- Standard/i \  local dnsmidx, dnsmif' \
 -e '/^-- Standard/i \  for _,dnsmidx in pairs(proxy.getPN("uci.dhcp.dnsmasq.", true)) do' \
 -e '/^-- Standard/i \    for _,dnsmif in pairs(proxy.get(dnsmidx.path.."interface.")) do' \
 -e '/^-- Standard/i \      if dnsmif.value == "lan" then' \
 -e '/^-- Standard/i \        return dnsmidx.path .. "domain"' \
 -e '/^-- Standard/i \      end' \
 -e '/^-- Standard/i \    end' \
 -e '/^-- Standard/i \  end' \
 -e '/^-- Standard/i \end' \
 -e '/"\.dhcpv4"/a \    dhcpv6State = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".dhcpv6",' \
 -e '/"\.dhcpv4"/a \    slaacState = "uci.dhcp.dhcp.@" .. cur_dhcp_intf .. ".ra",' \
 -e '/"\.dhcpv4"/a \    domainName = getDomainNamePath(),' \
 -e 's/dhcpv4Stateselect/dhcpStateselect/' \
 -e 's/DHCP Server/DHCPv4 Server/' \
 -e '/local stdattributes/i \              local switch_class_enable = {' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  class = "monitor-changes",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e '/local stdattributes/i \              local number_attr = {' \
 -e '/local stdattributes/i \                group = {' \
 -e '/local stdattributes/i \                  class = "monitor-localIPv6 monitor-1 monitor-hidden-localIPv6",' \
 -e '/local stdattributes/i \                },' \
 -e '/local stdattributes/i \                input = {' \
 -e '/local stdattributes/i \                  type = "number",' \
 -e '/local stdattributes/i \                  min = "0",' \
 -e '/local stdattributes/i \                  max = "128",' \
 -e '/local stdattributes/i \                  style = "width:100px",' \
 -e '/local stdattributes/i \                }' \
 -e '/local stdattributes/i \              }' \
 -e 's/\(ui_helper.createSwitch(T"IPv6 \)s\(tate", "localIPv6", content\["localIPv6"\]\)/\1S\2, switch_class_enable/' \
 -e '/Lease time/a \                 ,[[<div class="monitor-localIPv6 monitor-1 monitor-hidden-localIPv6">]]' \
 -e '/Lease time/a \                 ,ui_helper.createSwitch(T"DHCPv6 Server", "dhcpv6State", content["dhcpv6State"], switchDHCP)' \
 -e "/Lease time/a \                 ,ui_helper.createSwitch(T\"SLAAC + RA<span class='icon-question-sign' title='IPv6 Stateless Address Auto-Configuration + Router Advertisement'></span>\", \"slaacState\", content[\"slaacState\"], switchDHCP)" \
 -e '/Lease time/a \                 ,[[</div>]]' \
 -e '/gVIES(/a \    dhcpv6State = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    slaacState = gVIES(dhcpStateselect),' \
 -e '/gVIES(/a \    domainName = vNES,' \
 -e '/^local function validateLimit/i \local function DHCPValidationNotRequired()' \
 -e '/^local function validateLimit/i \  local post_data = ngx.req.get_post_args()' \
 -e '/^local function validateLimit/i \  local localdevIP = proxy.get("uci.network.interface.@" .. curintf .. ".ipaddr")' \
 -e '/^local function validateLimit/i \  local dhcpIgnore = proxy.get(mapParams["dhcpIgnore"])' \
 -e '/^local function validateLimit/i \  if (localdevIP and localdevIP[1].value ~= post_data["localdevIP"]) or (dhcpIgnore and dhcpIgnore[1].value == "1") then' \
 -e '/^local function validateLimit/i \    return true' \
 -e '/^local function validateLimit/i \  end' \
 -e '/^local function validateLimit/i \  return false' \
 -e '/^local function validateLimit/i \end' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \    if DHCPValidationNotRequired() then' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \      return true' \
 -e '/^local function \(validateLimit\|validateDHCPStart\)/a \    end' \
 -e '/T"Local Network subnet"/a \              if curintf == "lan" then' \
 -e '/T"Local Network subnet"/a \                ngx.print(ui_helper.createInputText(T"Domain Name", "domainName", content["domainName"], advanced, helpmsg["domainName"]))' \
 -e '/T"Local Network subnet"/a \              end' \
 -e '/eth0 =/d' \
 -e '/ethports = validateEthports/d' \
 -e '/^local ethports/,/^end/d' \
 -e '/^local function validateEthports/,/^end/d' \
 -e '/^local ethports_checked/,/^end/d' \
 -e '/ethport_count do/,/^end/d' \
 -e '/--[[/,/]]/d' \
 -e 's/Network mode/Network Mode/' \
 -e 's/to switch the modem/you want to switch/' \
 -i /www/docroot/modals/ethernet-modal.lp

echo 106@$(date +%H:%M:%S): Fix setting of firewall forwarding rule when NAT enabled/disabled
for r in dhcp pppoa pppoe static
do
  sed -e '/-- 106-BEGIN/,/-- 106-END/d' -i /www/snippets/internet-${r}-routed.lp
done

echo 110@$(date +%H:%M:%S): Enable various things that only the guest role\(!!!\) was allowed to do or see
for f in $(ls /www/docroot/modals/gateway-modal.lp /www/docroot/modals/internet-modal.lp /www/docroot/modals/wireless-modal.lp /www/docroot/modals/wanservices-modal.lp /www/snippets/tabs-diagnostics.lp /www/snippets/tabs-voice.lp)
do
  sed -e 's/\(if [^ ]*role[^=]*==[^"]*"\)\(guest\)\("\)/\1admin\3/g' -i $f
done
sed \
  -e 's/if role ~= "admin"/if role == "admin"/' \
  -e 's/if w\["provisioned"\] == "1"/if role == "admin" or w\["provisioned"\] == "1"/' \
  -i /www/docroot/modals/mmpbx-service-modal.lp

echo 115@$(date +%H:%M:%S): Fix Firewall modals for FW 17.2
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-cone-modal.lp
sed \
  -e 's/@defaults\[0\]/1/' \
  -i /www/docroot/modals/firewall-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-port-forwarding-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-rules-modal.lp
sed \
  -e 's/\.@\././' \
  -i /www/docroot/modals/firewall-zones-modal.lp

echo 115@$(date +%H:%M:%S): Show firewall default incoming policy and rules count on card
sed \
  -e '/^local format/a \local proxy = require("datamodel")' \
  -e '/firewall\.mode/a \    enabledRuleCount = "rpc.gui.firewall.enabledRuleCount",' \
  -e '/firewall\.mode/a \    fwd_ipv4_rules = "uci.firewall.userredirectNumberOfEntries",' \
  -e '/firewall\.mode/a \    fwd_ipv6_rules = "uci.firewall.pinholeruleNumberOfEntries",' \
  -e '/firewall\.mode/a \    lanIpv6Enabled = "uci.network.interface.@lan.ipv6",' \
  -e '/firewall\.mode/a \    pinholeEnabled = "uci.firewall.rulesgroup.@pinholerules.enabled",' \
  -e '/getExactContent/a \local fw_incoming_policy' \
  -e '/getExactContent/a \local zones = content_helper.convertResultToObject("uci.firewall.zone.", proxy.get("uci.firewall.zone."))' \
  -e '/getExactContent/a \for key,zone in ipairs(zones) do' \
  -e '/getExactContent/a \  if zone.wan == "1" then' \
  -e '/getExactContent/a \    fw_incoming_policy = string.untaint(zone.input)' \
  -e '/getExactContent/a \    break' \
  -e '/getExactContent/a \  end' \
  -e '/getExactContent/a \end' \
  -e '/getExactContent/a \local fw_status_light_map = {' \
  -e '/getExactContent/a \  DROP = "1",' \
  -e '/getExactContent/a \  REJECT = "2",' \
  -e '/getExactContent/a \  ACCEPT = "4"' \
  -e '/getExactContent/a \}' \
  -e 's/T"low"/T"Low"/' \
  -e 's/T"normal"/T"Normal"/' \
  -e 's/T"high"/T"High"/' \
  -e 's/T"user"/T"User Defined"/' \
  -e "/subinfos/i \    ');" \
  -e '/subinfos/i \    local fw_status = format("Default Incoming Policy: <strong>%s</strong>", fw_incoming_policy)' \
  -e '/subinfos/i \    ngx.print(ui_helper.createSimpleLight(fw_status_light_map[fw_incoming_policy], fw_status))' \
  -e "/subinfos/i \    ngx.print('\\\\" \
  -e '/Firewall level/a \            local rules_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-rules-modal.lp\\" data-id=\\"firewall-rules-modal\\""' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Firewall rule</strong> active","<strong %1$s>%2$d Firewall rules</strong> active", content.enabledRuleCount), rules_modal_link, content.enabledRuleCount)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local fwd_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/firewall-port-forwarding-modal.lp\\" data-id=\\"firewall-port-forwarding-modal\\""' \
  -e '/Firewall level/a \            local fwd_count = tonumber(content.fwd_ipv4_rules)' \
  -e '/Firewall level/a \            if content.lanIpv6Enabled ~= "0" and content.pinholeEnabled == "1" then' \
  -e '/Firewall level/a \              fwd_count = fwd_count + tonumber(content.fwd_ipv6_rules)' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            html[#html+1] = format(N("<strong %1$s>%2$d Port Forwarding rule</strong> defined","<strong %1$s>%2$d Port Forwarding rules</strong> defined", fwd_count), fwd_modal_link, fwd_count)' \
  -e '/Firewall level/a \            html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            local nat_alg_card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/Firewall level/a \            if nat_alg_card_hidden and nat_alg_card_hidden[1] and nat_alg_card_hidden[1].value == "1" then' \
  -e '/Firewall level/a \              local alg_modal_link = "class=\\"modal-link\\" data-toggle=\\"modal\\" data-remote=\\"/modals/nat-alg-helper-modal.lp\\" data-id=\\"nat-alg-helper-modal\\""' \
  -e '/Firewall level/a \              local helper_uci_path = "uci.firewall.helper."' \
  -e '/Firewall level/a \              local helper_uci_content = proxy.get(helper_uci_path)' \
  -e '/Firewall level/a \              helper_uci_content = content_helper.convertResultToObject(helper_uci_path,helper_uci_content)' \
  -e '/Firewall level/a \              local disabled_count = 0' \
  -e '/Firewall level/a \              local enabled_count = 0' \
  -e '/Firewall level/a \              for _,v in ipairs(helper_uci_content) do' \
  -e '/Firewall level/a \                if v.intf ~= "loopback" then' \
  -e '/Firewall level/a \                  if v.enable ~= "0" then' \
  -e '/Firewall level/a \                    enabled_count = enabled_count + 1' \
  -e '/Firewall level/a \                   else' \
  -e '/Firewall level/a \                    disabled_count = disabled_count + 1' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              if enabled_count > 0 then' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> enabled","<strong %1$s>%2$d NAT Helpers</strong> enabled", enabled_count), alg_modal_link, enabled_count)' \
  -e '/Firewall level/a \              else' \
  -e '/Firewall level/a \                html[#html+1] = format(N("<strong %1$s>%2$d NAT Helper</strong> disabled","<strong %1$s>%2$d NAT Helpers</strong> disabled", disabled_count), alg_modal_link, disabled_count)' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \              html[#html+1] = "<br>"' \
  -e '/Firewall level/a \            end' \
  -e '/Firewall level/a \            local dns_int' \
  -e '/Firewall level/a \            for _, v in ipairs(proxy.getPN("uci.firewall.redirect.", true)) do' \
  -e '/Firewall level/a \              local path = v.path' \
  -e '/Firewall level/a \              local values = proxy.get(path.."name", path.."enabled")' \
  -e '/Firewall level/a \              if values then' \
  -e '/Firewall level/a \                local name = values[1].value' \
  -e '/Firewall level/a \                if name == "Redirect-DNS" or name == "Intercept-DNS" then' \
  -e '/Firewall level/a \                  if values[2] then' \
  -e '/Firewall level/a \                    if values[2].value == "0" then' \
  -e '/Firewall level/a \                      html[#html+1] = ui_helper.createSimpleLight("0", "DNS Intercept disabled")' \
  -e '/Firewall level/a \                    else' \
  -e '/Firewall level/a \                      html[#html+1] = ui_helper.createSimpleLight("1", "DNS Intercept enabled")' \
  -e '/Firewall level/a \                    end' \
  -e '/Firewall level/a \                  end' \
  -e '/Firewall level/a \                  break' \
  -e '/Firewall level/a \                end' \
  -e '/Firewall level/a \              end' \
  -e '/Firewall level/a \            end' \
  -e '/numrules/,/numrules_v6/d' \
  -e '/if content.mode/,/end/d' \
  -i /www/cards/008_firewall.lp

echo 115@$(date +%H:%M:%S): Fix NAT ALG modal errors and include in Firewall tabs if card hidden
sed \
  -e '/^local ui_helper/i \local proxy = require("datamodel")' \
  -e 's/T"Enable"/T"Enabled"/' \
  -e 's/, readonly="true"/ /' \
  -e 's/unique/readonly/' \
  -e 's/string.upper/string.lower/' \
  -e '/attr = { input = { class="span1"/i \    readonly = true,' \
  -e '/^local hlp_attributes/i \table.insert(hlp_columns, table.remove(hlp_columns, 1))' \
  -e '/return true/i \  if object["enable"] == "" then' \
  -e '/return true/i \    object["enable"] = "1"' \
  -e '/return true/i \  end' \
  -e '/return true/i \  object["helper"] = string.lower(object["helper"])' \
  -e '/--Look for the enable set to nothing/,/^end/d' \
  -e '/^local UI_helper/i \local proxy = require("datamodel")' \
  -e "/modal-body/a \  ');" \
  -e '/modal-body/a \  local card_hidden = proxy.get("uci.web.card.@card_natalghelper.hide")' \
  -e '/modal-body/a \  if card_hidden and card_hidden[1] and card_hidden[1].value == "1" then' \
  -e '/modal-body/a \    local lp = require("web.lp")' \
  -e '/modal-body/a \    lp.setpath("/www/snippets/")' \
  -e '/modal-body/a \    lp.include("tabs-firewall.lp")' \
  -e '/modal-body/a \  end' \
  -e "/modal-body/a \  ngx.print('\\\\" \
  -e "/createTable/i \        ngx.print('<legend>');  ngx.print( T'NAT Helpers (ALG\\\\'s)' ); ngx.print('</legend>');" \
  -e "s/\"NAT Helpers (ALG's)\"/\"Firewall\"/" \
  -e 's/Dest Port/Destination Port/' \
  -i /www/docroot/modals/nat-alg-helper-modal.lp

echo 115@$(date +%H:%M:%S): Remove Port Forwarding from WAN Services - Moved to Firewall tab
sed \
  -e '/-- In UCI/,/local pfw_data,/d' \
  -e '/local ipv6Data/,/local pfw_v6_data,/d' \
  -e "/Port forwarding table/,/ngx.print('/d" \
  -e '/if ipv6Data.lanIpv6Enabled/,/end$/d' \
  -e '/local function getConfPath/,/local uri = ngx.var.uri/d' \
  -e 's/\(local help_link =\).*/\1 nil/' \
  -e '/if #alg_sip_paths/,/ end /d' \
  -e '/if zonenum ~= "" /,/ end /d' \
  -i /www/docroot/modals/wanservices-modal.lp

echo 115@$(date +%H:%M:%S): Improving WAN Services card
sed \
  -e 's/class = "span4",//' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  upnp_status = "uci.upnpd.config.enable_upnp",' \
  -e '/sys.upnp.RedirectNumberOfEntries/i \  dnsrule_count = "uci.dhcp.dnsruleNumberOfEntries",' \
  -e '/local n_upnp_rules/a \    local n_dns_rules = tonumber(wan_services_data["dnsrule_count"])' \
  -e '/local n_upnp_rules/a \    local upnpstate' \
  -e '/local n_upnp_rules/a \    if wan_services_data["upnp_status"] == "1" then' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP enabled"' \
  -e '/local n_upnp_rules/a \    else' \
  -e '/local n_upnp_rules/a \      upnpstate = "UPnP disabled"' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/local n_upnp_rules/a \    local wol = io.open("/lib/functions/firewall-wol.sh", "r") and proxy.get("uci.wol.config.")' \
  -e '/local n_upnp_rules/a \    local wolstate = ""' \
  -e '/local n_upnp_rules/a \    if wol then' \
  -e '/local n_upnp_rules/a \      wolenabled = proxy.get("uci.wol.config.enabled")' \
  -e '/local n_upnp_rules/a \      if wolenabled then' \
  -e '/local n_upnp_rules/a \        if wolenabled[1].value == "1" then' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("1", "WoL over Internet enabled")' \
  -e '/local n_upnp_rules/a \        else' \
  -e '/local n_upnp_rules/a \          wolstate = ui_helper.createSimpleLight("0", "WoL over Internet disabled")' \
  -e '/local n_upnp_rules/a \        end' \
  -e '/local n_upnp_rules/a \      end' \
  -e '/local n_upnp_rules/a \    end' \
  -e '/<p>/a \            wolstate,' \
  -e '/<p>/a \            ui_helper.createSimpleLight(ddns_light_map[format("%s", wan_services_data["upnp_status"])] or "0", upnpstate),' \
  -e '/firewall_rules/d' \
  -e '/port forwarding<\/strong> rule /,/subinfos/d' \
  -e "/modal\"', n_upnp_rules/a            '<br>'," \
  -e "/modal\"', n_upnp_rules/a            format( N(\"<strong %s>%d DNS rule</strong> defined\"," \
  -e "/modal\"', n_upnp_rules/a                      \"<strong %s>%d DNS rules</strong> defined\", n_dns_rules)," \
  -e "/modal\"', n_upnp_rules/a                      'class=\"modal-link\" data-toggle=\"modal\" data-remote=\"modals/wanservices-modal.lp\" data-id=\"wanservices-modal\"', n_dns_rules)," \
  -e 's|<p></p>||' \
  -e 's|upnp</strong> rule |UPnP rule</strong> |' \
  -e 's|upnp</strong> rules|UPnP rules</strong>|' \
  -i /www/cards/007_wanservices.lp

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule.
sed \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 115@$(date +%H:%M:%S): Fix missing values on rpc.network.firewall.userrule_v6.
sed \
  -e '/src = {/i \      name = {' \
  -e '/src = {/i \        access = "readWrite",' \
  -e '/src = {/i \        type = "string",' \
  -e '/src = {/i \      },' \
  -e '/src =  function(mapping, paramname, k/i \    name =  function(mapping, paramname, key)' \
  -e '/src =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/src =  function(mapping, paramname, k/i \    end,' \
  -e '/src =  function(mapping, paramname, p/i \    name =  function(mapping, paramname, paramvalue, key)' \
  -e '/src =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/src =  function(mapping, paramname, p/i \    end,' \
  -e '/dest_port = {/i \      dest_mac = {' \
  -e '/dest_port = {/i \        access = "readWrite",' \
  -e '/dest_port = {/i \        type = "string",' \
  -e '/dest_port = {/i \      },' \
  -e '/dest_port =  function(mapping, paramname, k/i \    dest_mac =  function(mapping, paramname, key)' \
  -e '/dest_port =  function(mapping, paramname, k/i \        return getFromUCI(key, paramname)' \
  -e '/dest_port =  function(mapping, paramname, k/i \    end,' \
  -e '/dest_port =  function(mapping, paramname, p/i \    dest_mac =  function(mapping, paramname, paramvalue, key)' \
  -e '/dest_port =  function(mapping, paramname, p/i \        setOnUCI(key, paramname, paramvalue)' \
  -e '/dest_port =  function(mapping, paramname, p/i \    end,' \
  -i /usr/share/transformer/mappings/rpc/network.firewall.userrule_v6.map
SRV_transformer=$(( $SRV_transformer + 1 ))

SRV_firewall=0
# Version 2021.02.22 set an incorrect value for synflood_rate, so have to fix it
synflood_rate="$(uci -q get firewall.@defaults[0].synflood_rate)" 
if [ ! -z "$synflood_rate" ]; then
  echo $synflood_rate | grep -q -E '^[0-9]+/s$'
  if [ $? = 1 ]; then
    synflood_rate="$(echo $synflood_rate | grep -o -E '^[0-9]+')" 
    uci set firewall.@defaults[0].synflood_rate="$synflood_rate/s"
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
fi
# Version 2021.02.22 allowed setting of tcp_syncookies but it is not enabled in kernel, so have to remove it
if [ ! -z "$(uci -q get firewall.@defaults[0].tcp_syncookies)" ]; then
  uci -q delete firewall.@defaults[0].tcp_syncookies
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ $SRV_firewall -gt 0 ]; then
  uci commit firewall
  /etc/init.d/firewall reload 2> /dev/null
fi

echo 115@$(date +%H:%M:%S): Add transformer mapping for uci.firewall.nat.
sed -n '/-- uci.firewall.redirect/,/MultiMap/p' /usr/share/transformer/mappings/uci/firewall.map |  sed -e 's/redirect/nat/g' >> /usr/share/transformer/mappings/uci/firewall.map

echo 120@$(date +%H:%M:%S): Show the hidden Telephony tabs and fix default tab
sed \
 -e 's/--       {"mmpbx-service/       {"mmpbx-service/' \
 -e '/mmpbx-contacts/d' \
 -e '/T"Service"/i \       {"mmpbx-inoutgoingmap-modal.lp", T"In\/Outgoing Map"},' \
 -e '/T"Service"/a \       {"mmpbx-codec-modal.lp", T"Codecs"},' \
 -e '/T"Service"/a \       {"mmpbx-dial-plan-modal.lp", T"Dial Plans"},' \
 -e '/T"DECT"/a    \       {"mmpbx-contacts-modal.lp", T"Phone Book"},' \
 -i /www/snippets/tabs-voice.lp
echo 120@$(date +%H:%M:%S): Fix default Telephony tab
# Default telephony tab is DECT!!! 
sed \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    if mmpbx_state == "1" then' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \        modalPath = "\/modals\/mmpbx-info-modal.lp"' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    else' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \        modalPath = "\/modals\/mmpbx-global-modal.lp"' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/a \    end' \
 -e '/modalPath = "\/modals\/mmpbx-dect-modal.lp"/d' \
 -i /www/cards/008_telephony.lp

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  # only 1 FXS device
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 120@$(date +%H:%M:%S): Handle the Telephony card switch
sed \
  -e '/^local format/a \if ngx.var.request_method == "POST" then' \
  -e '/^local format/a \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/^local format/a \  if mmpbx_enable then' \
  -e '/^local format/a \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/^local format/a \    proxy.apply()' \
  -e '/^local format/a \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/^local format/a \  end' \
  -e '/^local format/a \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 125@$(date +%H:%M:%S): Display Telephony tabs even when mmpbx disabled
sed \
 -e '/if mmpbx_state == "1" then/d' \
 -e '/elseif session:hasAccess/,/end/d' \
 -i /www/snippets/tabs-voice.lp

if [ $SIP_PWDS = y ]; then
  echo 125@$(date +%H:%M:%S): Always display decrypted SIP passwords
  sed \
  -e '/local mask_password/d' \
  -e '/if password == mask_password then/,/end/d' \
  -e '/v\[scns\["password"\]\] = mask_password/d' \
  -e '/ipairs(v)/a if sip_columns[j].name == "password" then' \
  -e '/ipairs(v)/a   w = proxy.get("rpc.gui.pwd.@" .. v[scns["profile"]] .. ".password")[1].value' \
  -e '/ipairs(v)/a   sip_columns[j].type = "text"' \
  -e '/ipairs(v)/a end' \
  -i /www/docroot/modals/mmpbx-profile-modal.lp
fi

if [ "$(uci -q get mmpbxbrcmfxsdev.@device[1])" != "device" ]
then
  echo 125@$(date +%H:%M:%S): Remove non-existing FXS2 device CODEC config
  sed -e '/fxs2/d' -e '/FXS2/d' -i /www/docroot/modals/mmpbx-codec-modal.lp
fi

echo 125@$(date +%H:%M:%S): Add missing insert option on dial plan entries
sed \
  -e 's/registerMultiMap/registerNamedMultiMap/' \
  -e 's/modify", "remove/modify", "insert", "remove/' \
  -i /usr/share/transformer/mappings/uci/mmpbx.map
SRV_transformer=$(( $SRV_transformer + 1 ))

echo 130@$(date +%H:%M:%S): Add missing icons on Diagnostics card and change default tab to Traffic Monitor
sed \
 -e 's^"Diagnostics", "modals/diagnostics-xdsl-modal.lp"^"Diagnostics", "modals/diagnostics-traffic-modal.lp"^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-xdsl\)^<td><div data-toggle="modal" data-remote="modals/diagnostics-traffic-modal.lp" data-id="diagnostics-traffic-modal"><img href="#" rel="tooltip" data-original-title="TRAFFIC" src="/img/light/Profit-01-WF.png" alt="traffic"></div></td>\\\n\1^' \
 -e 's^\(alt="ping/trace"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/logviewer-modal.lp" data-id="logviewer-modal"><img href="#" rel="tooltip" data-original-title="LOGVIEWER" src="/img/light/log-viewer.png" alt="logviewer"></div></td>\2^' \
 -e 's^\(<td><div data-toggle="modal" data-remote="modals/diagnostics-connection\)^<td><div data-toggle="modal" data-remote="modals/log-connections-modal.lp" data-id="log-connections-modal"><img href="#" rel="tooltip" data-original-title="CONNECTIONS" src="/img/light/Data-Sync-WF.png" alt="connections"></div></td>\\\n\1^' \
 -e 's^\(alt="network"></div></td>\)\(</tr>\\\)^\1\\\n <td><div data-toggle="modal" data-remote="modals/diagnostics-tcpdump-modal.lp" data-id="diagnostics-tcpdump-modal"><img href="#" rel="tooltip" data-original-title="TCPDUMP" src="/img/light/tcp-dump.png" alt="tcpdump"></div></td>\2^' \
 -e 's|\(alt="\)\([^/"]*\)|class="diag-\2" \1\2|g' \
 -i /www/cards/009_diagnostics.lp

echo 130@$(date +%H:%M:%S): Rename Diagnostics tabs and add Connections and Traffic Monitor tabs
sed \
 -e 's/"Connection"/"Connection Check"/' \
 -e 's/Log viewer/Log Viewer/' \
 -e 's/"Network"/"Ports"/' \
 -e 's/Tcpdump/TCP Dump/' \
 -e '/xdsl-modal/i       \    {"diagnostics-traffic-modal.lp", T"Traffic Monitor"},'  \
 -e '/connection-modal/a \    {"log-connections-modal.lp", T"Network Connections"},'  \
 -e '/string.len(ngx.var.args)/,/^end/d' \
 -e '/airiq/,/^[ ]*$/d' \
 -i /www/snippets/tabs-diagnostics.lp
sed \
 -e 's/tabs-management/tabs-diagnostics/' \
 -e 's/"Management"/"Diagnostics"/' \
 -i /www/docroot/modals/log-connections-modal.lp

echo 130@$(date +%H:%M:%S): Fix headings on Diagnostics tabs
for m in $(grep -L 'createHeader(T"Diagnostics"' /www/docroot/modals/diagnostics-*)
do 
    sed -e 's/\(createHeader(\)\([T]*\)\("Diagnostics\)\([^"]*\)\("\)/\1T\3\5/' -i $m
done

echo 135@$(date +%H:%M:%S): Add missing DHCP Relay configuration
sed \
 -e '/local format/a \local exists = proxy.get("uci.dhcp.relay.@relay.server_addr")' \
 -e '/local format/a \if not exists then' \
 -e '/local format/a \  proxy.add("uci.dhcp.relay.","relay")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.server_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.local_addr","")' \
 -e '/local format/a \  proxy.set("uci.dhcp.relay.@relay.interface","")' \
 -e '/local format/a \  proxy.apply();' \
 -e '/local format/a \end' \
 -i /www/docroot/modals/relay-modal.lp


echo 135@$(date +%H:%M:%S): Add TCP Dump to Diagnostics
sed -e 's/    {"logviewer-modal.lp", T"Log Viewer"},/    {"logviewer-modal.lp", T"Log Viewer"},\n    {"diagnostics-tcpdump-modal.lp", T"TCP Dump"},/' -i /www/snippets/tabs-diagnostics.lp

echo 140@$(date +%H:%M:%S): Sort the device map hosts by name
sed \
 -e 's/loadTableData("rpc.hosts.host.", dcols)/loadTableData("rpc.hosts.host.", dcols, nil, "FriendlyName")/' \
 -i /www/snippets/networkmap.lp

echo 145@$(date +%H:%M:%S): Allow increase in WiFi output power to +6dBm
sed \
 -e '/{"-6", T"25%"}/a \    {"-5", T"&nbsp;-5 dBm"},' \
 -e '/{"-6", T"25%"}/a \    {"-4", T"&nbsp;-4 dBm"},' \
 -e '/{"-2", T"75%"}/a \    {"-1", T"&nbsp;-1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+1", T"&nbsp;+1 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+2", T"&nbsp;+2 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+3", T"&nbsp;+3 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+4", T"&nbsp;+4 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+5", T"&nbsp;+5 dBm"},' \
 -e '/{"0", T"100%"}/a \    {"+6", T"&nbsp;+6 dBm"},' \
 -e 's/-6", T"25%/-6", T"\&nbsp;-6 dBm/' \
 -e 's/-3", T"50%/-3", T"\&nbsp;-3 dBm/' \
 -e 's/-2", T"75%/-2", T"\&nbsp;-2 dBm/' \
 -e 's/0", T"100%/0", T"\&nbsp;0 dBm/' \
 -e 's/T"Output Power"/T"Output Power Adjustment"/' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Add cogs to card headers
for f in $(grep -l createCardHeaderNoIcon /www/cards/*)
do
  sed -e 's/createCardHeaderNoIcon/createCardHeader/' -i $f
done
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/switchName, content\["cwmp_state"\], {input = {id = "cwmp_card_state"}}/nil, nil, nil/' -i /www/cards/090_cwmpconf.lp

echo 150@$(date +%H:%M:%S): Fix mobile signal placement
sed \
 -e '/^<\/script>/i var div = document.querySelector("#mobiletab").querySelector(".header-title");\\' \
 -e '/^<\/script>/i var signal = document.querySelector("#signal-strength-indicator-small");\\' \
 -e '/^<\/script>/i div.parentNode.insertBefore(signal, div.nextSibling);\\' \
 -i $(find /www/cards -type f -name '*lte.lp')
sed \
 -e '$ a #signal-strength-indicator-small .absolute{float:right;margin-top:unset;margin-left:unset;height:unset;padding-left:10px;width:unset;position:relative;}' \
 -i /www/docroot/css/mobiled.css

echo 150@$(date +%H:%M:%S): Handle Wi-Fi switch
sed \
 -e '/Take the input/i \if ngx.var.request_method == "POST" then' \
 -e '/Take the input/i \  local radio_state = ngx.req.get_post_args().set_wifi_radio_state' \
 -e '/Take the input/i \  if radio_state then' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_2G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.set("uci.wireless.wifi-device.@radio_5G.state", radio_state:untaint())' \
 -e '/Take the input/i \     proxy.apply()' \
 -e '/Take the input/i \     ngx.exit(ngx.HTTP_NO_CONTENT)' \
 -e '/Take the input/i \  end' \
 -e '/Take the input/i \end' \
 -i /www/docroot/modals/wireless-modal.lp

echo 150@$(date +%H:%M:%S): Handle Telephony switch
 sed \
  -e '/local sipnet_options/i \if ngx.var.request_method == "POST" then' \
  -e '/local sipnet_options/i \  local mmpbx_enable = ngx.req.get_post_args().mmpbx_enable' \
  -e '/local sipnet_options/i \  if mmpbx_enable then' \
  -e '/local sipnet_options/i \    proxy.set("uci.mmpbx.mmpbx.@global.enabled", mmpbx_enable:untaint())' \
  -e '/local sipnet_options/i \    proxy.apply()' \
  -e '/local sipnet_options/i \    ngx.sleep(20)' \
  -e '/local sipnet_options/i \    ngx.exit(ngx.HTTP_NO_CONTENT)' \
  -e '/local sipnet_options/i \  end' \
  -e '/local sipnet_options/i \end' \
  -i /www/docroot/modals/mmpbx-info-modal.lp

echo 155@$(date +%H:%M:%S): Make Content Sharing Screen nicer
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/<form class/<form id="content-sharing-modal" class/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/T"General status"/d' \
  -e '/"File Server Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"File Server Status" .. "<\/legend>")' \
  -e '/"File Server descript/a\                tinsert(html, "<\/fieldset>")' \
  -e '/DLNA Enabled"/i\                tinsert(html, "<fieldset><legend>" .. T"DLNA Server Status" .. "<\/legend>")' \
  -i /www/docroot/modals/contentsharing-modal.lp

else # THEME_ONLY = y
  echo 160@$(date +%H:%M:%S): Restoring CSS files to apply theme change
  cp -p /rom/www/docroot/css/gw.css /rom/www/docroot/css/gw-telstra.css /rom/www/docroot/css/responsive.css /www/docroot/css/
fi # End of if [ THEME_ONLY = n ]   

echo 160@$(date +%H:%M:%S): Adding or updating card background icons
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf012;"/' -i $(ls /www/cards/*_lte.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf129;"/' -i $(ls /www/cards/*_gateway.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0c1;"/' -i $(ls /www/cards/*_broadband.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0ac;"/' -i $(ls /www/cards/*_internet.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf09e;"/' -i $(ls /www/cards/*_wireless.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf015;"/' -i $(ls /www/cards/*_LAN.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf109;"/' -i $(ls /www/cards/*_Devices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c2;"/' -i $(ls /www/cards/*_wanservices.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf132;"/' -i $(ls /www/cards/*_firewall.lp)
sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf095;"/' -i $(ls /www/cards/*_telephony.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf188;"/' -i $(ls /www/cards/*_diagnostics.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf0c0;"/' -i $(ls /www/cards/*_usermgr.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf115;"/' -i $(ls /www/cards/*_contentsharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf02f;"/' -i $(ls /www/cards/*_printersharing.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf023;"/' -i $(ls /www/cards/*_parental.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf074;"/' -i $(ls /www/cards/*_iproutes.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf017;"/' -i $(ls /www/cards/*_tod.lp)
sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf079;"/' -i $(ls /www/cards/*_relaysetup.lp)
[ -f /www/cards/*_cwmpconf.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf019;"/' -i $(ls /www/cards/*_cwmpconf.lp)
sed -e 's/xf0ad/xf0ec;"/' -i $(ls /www/cards/*_natalghelper.lp)
sed -e 's/xf0ad/xf0b1;"/' -i $(ls /www/cards/*_xdsl.lp)
[ -f /www/cards/*_nfc.lp ] && sed -e 's/class="content"/class="content card_bg mirror" data-bg-text="\&#xf0b2;"/' -i $(ls /www/cards/*_nfc.lp)
[ -f /www/cards/*_fon.lp ] && sed -e 's/class="content"/class="content card_bg" data-bg-text="\&#xf143;"/' -i $(ls /www/cards/*_fon.lp)

sed \
  -e 's/:56px/:80px/' \
  -e 's/:170px/:150px/' \
  -i /www/docroot/css/responsive.css

for f in $(grep -l -r '</head>\\' /www 2>/dev/null | grep -v '\(airiq\|help\|landingpage\)')
do
  grep -q 'lp.include("../snippets/theme' $f
  if [ $? -eq 1 ]; then
    grep -q "/css/gw.css" $f
    if [ $? -eq 0 ]; then
      LP="advanced"
    else
      LP="basic"
    fi
    req=$(grep -n 'local lp = require("web.lp")' $f | cut -d: -f1)
    if [ -z "$req" ]; then
      sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
    else
      head=$(grep -n '</head>\\' $f | cut -d: -f1)
      if [ $head -lt $req ]; then
        sed -e "/<\/head>\\\/i '); local lp = require(\"web.lp\"); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -e "${req}d" -i $f
      else
        sed -e "/<\/head>\\\/i '); lp.include(\"../snippets/theme-$LP.lp\"); ngx.print('\\\\" -i $f
      fi
    fi
  fi
done

echo 165@$(date +%H:%M:%S): Deploy theme files
echo  | base64 -d | tar -xzf - -C /

# Fix directory permissions after tar extracts
chmod +x /www /www/docroot /www/docroot/css /www/docroot/css/telstra /www/docroot/css/light /www/docroot/css/night /www/docroot/img /www/docroot/img/telstra /www/docroot/img/light /www/docroot/img/night /www/snippets

echo 165@$(date +%H:%M:%S): Persisting theme settings
echo -n "THEME=$THEME COLOR=$COLOR ICONS=$ICONS KEEPLP=$KEEPLP" > /etc/tch-gui-unhide.theme

sed \
  -e '$ a .card_bg{position:relative;z-index:1;}' \
  -e '$ a .card_bg:after{color:#EAEAEA;font-family:FontAwesome;content:attr(data-bg-text);display:block;font-size:110px;line-height:1;position:absolute;bottom:-5px;right:5px;}' \
  -i /www/docroot/css/gw.css
for f in /www/docroot/modals/assistance-modal.lp /www/docroot/modals/usermgr-modal.lp
do
  sed \
    -e '/^if not bridged.isBridgedMode/i \  local lp = require("web.lp")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.setpath("/www/snippets/")' \
    -e '/^if not bridged.isBridgedMode/i \  lp.include("tabs-management.lp")' \
    -e '/^if not bridged.isBridgedMode/,/^end/d' \
    -i $f
done

SRV_transformer=$(( $SRV_transformer + 2 ))

echo 175@$(date +%H:%M:%S): Fix Time of Day tabs
sed \
  -e 's/T"Time of day access control"/T"Device Access Control"/' \
  -e "/update\">\\\/a ');" \
  -e '/update">\\/a local lp = require("web.lp")' \
  -e '/update">\\/a lp.setpath("/www/snippets/")' \
  -e '/update">\\/a lp.include("tabs-tod.lp")' \
  -e "/update\">\\\/a ngx.print('\\\\" \
  -i /www/docroot/modals/tod-modal.lp

echo 175@$(date +%H:%M:%S): Restart Time of Day processing after updates applied 
sed -e 's|reload$|reload; /etc/init.d/tod restart;|' -i /usr/share/transformer/commitapply/uci_tod.ca
SRV_transformer=$(( $SRV_transformer + 1 ))

# Initial invocation of transformer code will fail if history directory does not exist
if [ ! -d /root/trafficmon/history ]; then
  echo 180@$(date +%H:%M:%S): Create directory to retain traffic monitor daily history
  mkdir -p /root/trafficmon/history
fi
if [ ! -f /root/trafficmon/history/.wan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wan_rollover
fi
if [ ! -f /root/trafficmon/history/.wwan_rollover ]; then
  echo 180@$(date +%H:%M:%S): Create WWAN traffic monitor history configuration file
  echo "1" > /root/trafficmon/history/.wwan_rollover
fi

grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
if [ $? -eq 1 ]; then
  echo 180@$(date +%H:%M:%S): Create cron job to retain traffic monitor daily history
  echo "9,19,29,39,49,59 * * * * /usr/sbin/traffichistory.lua" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi

if [ $THEME_ONLY = n ]; then
  # Run any extra feature scripts
  for s in $(ls tch-gui-unhide-xtra.* 2>/dev/null)
  do
    echo -n 190@$(date +%H:%M:%S): Executing extra feature script for $(echo $s | cut -d. -f2-):
    . $s
  done
fi

echo 195@$(date +%H:%M:%S): Sequencing cards
for RULE in $(uci show web | grep '=card' | cut -d= -f1)
do
  CARD=$(uci -q get ${RULE}.card)
  FILE=$(ls /www/cards/ | grep "..._${CARD#*_}")
  if [ "$CARD" != "$FILE" ]
  then
    echo "195@$(date +%H:%M:%S):  - Renaming $FILE to $CARD"
    mv /www/cards/$FILE /www/cards/$CARD
  fi
done

if [ -z "$ALLCARDRULES" -a -f tch-gui-unhide-cards ]
then
  ./tch-gui-unhide-cards -s -a -q
fi

if [ $THEME_ONLY = n ]; then
  for l in $(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)
  do
    echo 200@$(date +%H:%M:%S): Adding tch-gui-unhide version to copyright in $l
    sed -e "s/\(current_year); ngx.print('\)/\1 \[tch-gui-unhide 2021.05.09 for FW Version 17.2.0468\]/" -i $l
  done
fi

echo 200@$(date +%H:%M:%S): Applying service changes if required...
apply_service_changes

chmod 644 /usr/share/transformer/mappings/rpc/gui.*
echo "************************************************************"
echo "* Done!! You should clear your browser cache of images and *"
echo "* files, otherwise you won't see the theme changes.        *"
echo "************************************************************"
echo
echo "++ TIP #1: Bookmark http://$(uci get network.lan.ipaddr)/gateway.lp"
echo "++         to bypass the Telstra Basic web GUI..."
echo
echo "++ TIP #2: Use the tch-gui-unhide-cards script to"
echo "++         change card order and visibility"
echo
if [ "$UPDATE_BTN" = n ]; then
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "++ WARNING! The Update Available notification is DISABLED! +"
  echo "++          You must check for updates manually.           +"
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo
fi
