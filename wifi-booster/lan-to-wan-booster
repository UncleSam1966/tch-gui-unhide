#!/bin/sh

# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi
if [ ! -f /etc/config/multiap ]
then
  echo "ERROR! This script is intended for devices with MultiAP installed. Exiting"
  exit 1
fi

FORCE='n'
WAN_DHCP='n'
WAN_IP_ADDR="$(ip address show dev br-lan | grep "inet " | tr -s " " | cut -d" " -f3 | cut -d/ -f1)"
WAN_GATEWAY="$(echo $WAN_IP_ADDR | cut -d. -f1-3).1"
WAN_MASK='255.255.255.0'
LAN_DNS=''
LAN_IP_ADDR='172.17.2.1'
MULTIAP_LOGGING_LEVEL=2
SSID="AP-$(uci get env.var.ssid_mac_postfix_r0)"
PWD="$(uci get env.var.default_key_r0_s0)"
YES='n'
REBOOT='y'

IPv4PATTERN="([^.]|^)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])([^.]|$)"

while getopts dfg:i:l:m:n:p:rs:w:y option
do
  case "${option}" in
    d)  WAN_DHCP='y';;
    f)  FORCE='y';;
    g)  WAN_GATEWAY="$OPTARG";;
    i)  LAN_IP_ADDR="$OPTARG";;
    l)  if [ "$OPTARG" -ge 0 -a "$OPTARG" -le 9 ]; then
          MULTIAP_LOGGING_LEVEL="$OPTARG"
        else
          echo Ignored invalid logging level $OPTARG
        fi;;
    n)  if [ -z "$LAN_DNS" ]; then
          LAN_DNS="$OPTARG"
        else
          LAN_DNS="$LAN_DNS$IFS$OPTARG"
        fi;;
    p)  PWD="$OPTARG";;
    r)  REBOOT='n';;
    s)  SSID="$OPTARG";;
    w)  WAN_IP_ADDR="$OPTARG";;
    y)  YES='y';;
    *)  echo "Syntax: $0 <options>"
        echo "Optional parameters:"
        echo " -i n.n.n.n  Set LAN IP address to n.n.n.n (default is -i$LAN_IP_ADDR)"
        echo " -n n.n.n.n  Set LAN DNS Server IP address to n.n.n.n (specify multiple times for multiple DNS servers. Default is -n1.1.1.1 -n1.0.0.1)"
        echo " -d          Use DHCP to set WAN IP address and WAN Gateway (default is NOT to use DHCP and you must specify -w and -g)"
        echo " -w n.n.n.n  Set WAN IP address to n.n.n.n (default is -w$WAN_IP_ADDR, but IGNORED if you specify -d)"
        echo " -g n.n.n.n  Set WAN Gateway IP address to n.n.n.n (default is -g$WAN_GATEWAY, but IGNORED if you specify -d)"
        echo " -m n.n.n.n  Set WAN Subnet Mask to n.n.n.n (default is -m$WAN_MASK, but IGNORED if you specify -d)"
        echo " -s <SSID>   Set new LAN management wireless SSID to <SSID> (default is -s$SSID)"
        echo " -p <PWD>    Set new LAN management wireless password to <PWD> (default is -p$PWD)"
        echo " -l 0-9      Set MultiAP logging level (0=off 2=Default 9=very verbose)"
        echo " -f          Force settings to be reapplied"
        echo " -r          Skip reboot"
        echo " -y          Skip the confirmation prompt"
        exit;;
  esac
done

echo "$LAN_IP_ADDR" | grep -q -E $IPv4PATTERN
if [ $? -eq 1 ]; then 
  echo ERROR! Invalid LAN IP address: $WAN_IP_ADDR
  exit
fi
if [ -z "$LAN_DNS" ]
then
  LAN_DNS="1.1.1.1${IFS}1.0.0.1"
else
  for DNS in $LAN_DNS
  do
    echo "$DNS" | grep -q -E $IPv4PATTERN
    if [ $? -eq 1 ]; then 
      echo ERROR! Invalid DNS Server IP address: $DNS
      exit
    fi
  done
fi
if [ $WAN_DHCP = 'n' ]; then
  echo "$WAN_IP_ADDR" | grep -q -E $IPv4PATTERN
  if [ $? -eq 1 ]; then 
    echo ERROR! Invalid WAN IP address: $WAN_IP_ADDR
    exit
  fi
  echo "$WAN_GATEWAY" | grep -q -E $IPv4PATTERN
  if [ $? -eq 1 ]; then 
    echo ERROR! Invalid Gateway IP address: $WAN_GATEWAY
    exit
  fi
  echo "$WAN_MASK" | grep -q -E $IPv4PATTERN
  if [ $? -eq 1 ]; then 
    echo ERROR! Invalid WAN Subnet Mask: $WAN_MASK
    exit
  fi
  if [ "$(echo $WAN_IP_ADDR | cut -d. -f1-3)" != "$(echo $WAN_GATEWAY | cut -d. -f1-3)" ]; then
    echo ERROR! WAN IP address $WAN_IP_ADDR must be in the same subnet as the WAN Gateway: $WAN_GATEWAY
    exit
  fi
  if [ "$(echo $LAN_IP_ADDR | cut -d. -f1-3)" == "$(echo $WAN_GATEWAY | cut -d. -f1-3)" ]; then
    echo ERROR! LAN IP address $LAN_IP_ADDR must NOT be in the same subnet as the WAN Gateway: $WAN_GATEWAY
    exit
  fi
  if [ "$MULTIAP_LOGGING_LEVEL" -lt 0 -o "$MULTIAP_LOGGING_LEVEL" -gt 9 ]; then
    echo ERROR! MultiAP logging level must be between 0 and 9
    exit
  fi
fi

echo About to:
echo " - Disable MultiAP Controller"
echo " - Reconfigure the MultiAP interfaces to include eth4"
echo " - Set MultiAP logging level to $MULTIAP_LOGGING_LEVEL"
echo " - Disable WAN Sensing"
echo " - Disable WAN Supervision"
echo " - Disable 4G Mobile Backup"
echo " - Disable the intercept daemon"
echo " - Disable the firewall to accept incoming packets on the WAN interface"
echo " - Enable WAN SSH access"
echo " - Disable the Backhaul SSID"
echo " - Set LAN IP address to $LAN_IP_ADDR"
echo " - Set LAN DNS to $(echo $LAN_DNS | tr \"$IFS\" ' ')"
if [ $WAN_DHCP = 'n' ]; then
echo " - Set WAN IP address to $WAN_IP_ADDR"
echo " - Set WAN Gateway IP address to $WAN_GATEWAY"
else
echo " - Set WAN IP and Gateway addresses using DHCP"
fi
echo " - Move all LAN ports and wireless devices from the LAN bridge onto the WAN bridge"
echo " - Enable multicast snooping on the WAN bridge"
echo " - Create a management wireless device on the LAN bridge with an SSID of $SSID and a password of $PWD"
echo 
if [ $FORCE = y ]; then
  echo "The above settings will be re-applied, even if already set"
else
  echo "The above settings will only be applied if they have not already been applied"
fi
echo 
if [ $REBOOT = y ]; then
  echo "After the above settings have been applied, the device will be REBOOTED"
else
  echo "The device will NOT be automtically rebooted after settings are applied. You should do it, though..."
fi
echo 
echo If you wish to proceed, enter y otherwise just press [Enter] to stop.
if [ $YES = y ]; then
  REPLY=y
else
  read
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

echo Stop EasyMesh agent whilst we reconfigure
/etc/init.d/multiap_agent stop

uci -q get multiap.al_entity.interfaces | grep -q eth4
if [ $? -eq 1 -o "$(uci -q get multiap.controller.enabled)" != 0 -o $FORCE = y ]
then
  echo Disabling the EasyMesh controller
  uci set multiap.controller.enabled="0"
  echo Set MultiAP logging level to $MULTIAP_LOGGING_LEVEL
  uci set multiap.logging.library="$MULTIAP_LOGGING_LEVEL"
  uci set multiap.logging.ieee1905="$MULTIAP_LOGGING_LEVEL"
  uci set multiap.logging.agent="$MULTIAP_LOGGING_LEVEL"
  uci set multiap.logging.vendor_ipc="$MULTIAP_LOGGING_LEVEL"
  echo Reconfiguring MultiAP interfaces
  uci set multiap.al_entity.interfaces='eth0,eth1,eth2,eth3,eth4,wl0,wl1,wl1_2,wds*'
  uci commit multiap
  /etc/init.d/multiap_controller restart
else
  echo The EasyMesh controller is already disabled
fi

if [ "$(uci -q get wansensing.global.enable)" != 0 -o $FORCE = y ]
then
  echo Disabling WAN Sensing
  uci set wansensing.global.autofailover="0"
  uci set wansensing.global.enable="0"
  uci commit wansensing
  /etc/init.d/wansensing restart
else 
  echo WAN Sensing is already disabled
fi

if [ "$(uci -q get supervision.global.enabled)" != 0 -o $FORCE = y ]
then
  echo Disabling WAN Supervision
  uci set supervision.global.enabled="0"
  uci commit supervision
  /etc/init.d/supervision reload
else 
  echo WAN Supervision is already disabled
fi

if [ "$(uci -q get mobiled.@device[0].enabled)" != 0 -o $FORCE = y ]
then
  echo Disabling 4G Mobile Backup
  uci set mobiled.device_defaults.enabled="0"
  uci set mobiled.@device[0].enabled="0"
  uci commit mobiled
  /etc/init.d/mobiled reload
  uci set ltedoctor.config.enabled="0"
  /etc/init.d/lte-doctor-logger restart
else 
  echo 4G Mobile Backup is already disabled
fi

if [ "$(uci -q get intercept.config.enabled)" != 0 -o $FORCE = y ]
then
  echo Disabling the intercept daemon
  uci set intercept.config.enabled="0"
  uci commit intercept
  /etc/init.d/intercept reload
else 
  echo The intercept daemon is already disabled
fi

if [ "$(transformer-cli get rpc.network.firewall.enable | cut -d= -f2 | tr -d ' ')" != 0 -o "$(uci -q get firewall.@zone[3].masq)" != '0' -o $FORCE = y ]
then
  echo Disabling the firewall
  transformer-cli set rpc.network.firewall.enable 0
  transformer-cli apply
  uci set firewall.@zone[3].masq='0'
  uci commit firewall
  /etc/init.d/firewall reload
else
  echo The firewall is already disabled
fi

if [ "$(uci -q get dropbear.wan.enable)" != 1 -o $FORCE = y ]
then
  echo Enabling SSH WAN access
  uci set dropbear.wan.enable='1'
  uci set dropbear.wan.PasswordAuth='on'
  uci set dropbear.wan.RootPasswordAuth='on'
  uci set dropbear.wan.RootLogin='1'
  uci commit dropbear
  /etc/init.d/dropbear reload
else
  echo SSH WAN access already enabled
fi

if [ "$(uci -q get network.lan.ipaddr)" != "$LAN_IP_ADDR" -o "$(uci -q get network.lan.proto)" != "static" -o $FORCE = y ]
then
  if [ "$(uci -q get network.lan.proto)" != "static" ]
  then
    uci set network.lan.proto='static'
  fi
  echo Set LAN IP address to $LAN_IP_ADDR
  uci set network.lan.ipaddr="$LAN_IP_ADDR"
  uci -q delete network.lan.gateway
  echo Setting LAN DNS...
  uci -q delete network.lan.dns
  for DNS in $LAN_DNS
  do
    echo " -> Adding $DNS"
    uci add_list network.lan.dns="$DNS"
  done
else
  echo LAN IP address is already set to $LAN_IP_ADDR
fi

if [ "$WAN_DHCP" = 'y' -a "$(uci -q get network.wan.proto)" != "dhcp" -o $FORCE = y ]
then
  echo Setting WAN IP connection type to DHCP
  uci set network.config.wan_mode='dhcp'
  uci set network.wan.proto='dhcp'
  uci -q delete network.wan.ipaddr
  uci -q delete network.wan.gateway
  uci -q delete network.wan.netmask
else
  echo Setting WAN IP address to $WAN_IP_ADDR
  uci set network.config.wan_mode='static'
  uci set network.wan.proto='static'
  uci set network.wan.ipaddr="$WAN_IP_ADDR"
  echo Setting WAN Gateway IP address to $WAN_GATEWAY
  uci set network.wan.gateway="$WAN_GATEWAY"
  echo Setting WAN Subnet Mask to $WAN_MASK
  uci set network.wan.netmask="$WAN_MASK"
fi
uci set network.wan.auto='1'
uci set network.wan.reqopts='1 3 6 43 51 58 59'
uci set network.wan.iface6rd='0'
uci set network.wan.vendorid='technicolor'
uci set network.wan.metric='1'
uci set network.wan.release='1'

if [ "$(uci -q get network.wan.type)" != "bridge" -o ! -z "$(uci -q get network.lan.ifname)" -o $FORCE = y ]
then
  echo Moving LAN ports and wireless devices to WAN bridge
  uci set network.wan.type='bridge'
  uci set network.wan.ifname='eth0 eth1 eth2 eth3 eth4'
  uci set network.lan.ifname='lo'
  uci set wireless.wl0.network='wan'
  uci set wireless.wl1.network='wan'
  uci set wireless.wl1_2.network='wan'
else
  echo LAN ports and wireless devices already moved to WAN bridge
fi

if [ "$(uci -q get mcastsnooping.wan.igmp_snooping)" != "1" -o $FORCE = y ]
then
  echo Enabling multicast snooping on the WAN bridge
  uci set mcastsnooping.wan=interface
  uci set mcastsnooping.wan.igmp_snooping='1'
  uci set mcastsnooping.wan.mcast_flooding='0'
  uci set mcastsnooping.wan.mld_snooping='0'
  uci commit mcastsnooping
  /etc/init.d/mcsnooper restart
else
  echo Multicast snooping on the WAN bridge is already enabled
fi

if [ "$(uci -q get wireless.ap6.state)" != 0 -o $FORCE = y ]
then
  echo Disabling the Backhaul SSID
  uci set wireless.ap6.state="0"
  uci commit wireless
else
  echo The Backhaul SSID is already disabled
fi

if [ "$(uci -q get wireless.wl0_2.ssid)" != "$SSID" -o "$(uci -q get wireless.ap4.wpa_psk_key)" != "$PWD" -o $FORCE = y ]
then
  echo Creating LAN management SSID $SSID
  uci -q delete wireless.ap4
  uci -q delete wireless.wl0_2
  uci set wireless.wl0_2=wifi-iface
  uci set wireless.wl0_2.device='radio_2G'
  uci set wireless.wl0_2.mode='ap'
  uci set wireless.wl0_2.state='1'
  uci set wireless.wl0_2.network='lan'
  uci set wireless.wl0_2.reliable_multicast='0'
  uci set wireless.wl0_2.ssid="$SSID"
  uci set wireless.ap4=wifi-ap
  uci set wireless.ap4.iface='wl0_2'
  uci set wireless.ap4.state='1'
  uci set wireless.ap4.public='1'
  uci set wireless.ap4.ap_isolation='0'
  uci set wireless.ap4.station_history='1'
  uci set wireless.ap4.max_assoc='0'
  uci set wireless.ap4.pmksa_cache='1'
  uci set wireless.ap4.wps_state='1'
  uci set wireless.ap4.wps_w7pbc='1'
  uci set wireless.ap4.wsc_state='configured'
  uci set wireless.ap4.wps_ap_setup_locked='1'
  uci set wireless.ap4.wps_credentialformat='passphrase'
  uci set wireless.ap4.acl_mode='unlock'
  uci set wireless.ap4.acl_registration_time='60'
  uci set wireless.ap4.trace_modules=' '
  uci set wireless.ap4.trace_level='some'
  uci set wireless.ap4.security_mode='wpa2-psk'
  uci set wireless.ap4.pmf='enabled'
  uci set wireless.ap4.bandsteer_id='off'
  uci set wireless.ap4.wep_key="$(uci get env.var.default_wep_key_r0_s0)"
  uci set wireless.ap4.wpa_psk_key="$PWD"
  uci set wireless.ap4.wps_ap_pin="$(uci get env.var.default_wps_ap_pin_r0_s0)"
  uci set wireless.ap4.supported_security_modes='none wpa2 wpa2-psk wpa-wpa2 wpa-wpa2-psk'
else
  echo LAN management SSID $SSID already created
fi

echo Commiting and applying network changes
uci commit wireless
uci commit network
/etc/init.d/hostapd reload && ubus send config "{'reload':'wireless'}"
/etc/init.d/network reload

if [ "$(uci -q get dhcp.lan.dhcpv4)" != "server" -o "$(uci -q get dhcp.lan.dhcpv6)" != "disabled" -o "$(uci -q get dhcp.lan.ra)" != "disabled" ]
then
  echo Enabling IPv4 DHCP server
  uci set dhcp.lan.dhcpv4="server"
  uci set dhcp.lan.dhcpv6="disabled"
  uci set dhcp.lan.ra="disabled"
  uci commit dhcp
  /etc/init.d/dnsmasq restart
  /etc/init.d/odhcpd reload
else
  echo IPv4 DHCP server already enabled
fi

echo Restart EasyMesh agent
/etc/init.d/multiap_agent start

if [ "$REBOOT" = "y" ]
then
  echo Please wait for device to reboot...
  reboot
fi

echo Done
