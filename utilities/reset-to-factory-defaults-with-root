#!/bin/sh

SCRIPT="$(basename $0)"

GREEN='\033[1;32m'
GREY='\033[90m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

usage() {
cat <<EOH
Resets the device to factory defaults, and prepares a run-once root access
setup script to be executed on the next boot.

It is basically the same as the procedure as described in
http://hack-technicolor.rtfd.io/en/stable/Upgrade/#preserving-root-access,
but with some additional options.

Usage: $0 [options]

Options:
 -b               Make a full backup of your booted bank configuration
                    (requires attached USB device).
 -c               Disable CWMP configuration during first boot after reset
 -e               Disable any 'noexec' flags on USB mounted filesystems
 -f filename      Flash 'filename' into the mounted bank ($BOOTED) after reset
                    and before reboot. If 'filename' ends with .rbi, it will be
                    unpacked first, either to an attached USB device, or /tmp if
                    no USB detected.
 -i               Keep the existing LAN IP address after reset and reboot. If 
                    specified with --restore-config, it will be passed to the 
                    restore script and NOT applied during the initial RTFD.
 -I n.n.n.n       Use IP address n.n.n.n after reset and reboot.
                    If specified with --restore-config, it will be passed to the 
                    restore script and NOT applied during the initial RTFD.
 -k               Keep existing SSH keys after reset and reboot.
 -p password      Set the password after reset and reboot. If not specified,
                    it defaults to root.
 -v               Show the reset script after it has been written.
 -y               Bypass confirmation prompt (answers 'y').
 -n               Do NOT reboot.
 -U               Download the latest version of $SCRIPT from GitHub.
 --save-defaults  Saves the command line options (except -f and -y) as defaults
                    When specified, NO changes are applied to the device
 --no-defaults    Ignores any saved defaults for this execution
 --restore-config Runs the restore-config.sh script after reboot if it is found
                    in the USB backups directory. Output will be written to the 
                    system log. --restore-config should be the LAST option
                    specified, and may optionally be followed by the name of
                    the overlay backup file to be restored. Saved defaults are
                    IGNORED when --restore-config is specified.

EOH
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]; then
      chmod +x $SCRIPT
      echo -e "${GREEN}Successfully downloaded $SCRIPT.${NC}"
    else
      echo -e "${RED}Failed to download $SCRIPT.${NC}"
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    echo -e "${RED}ERROR! Not found on GitHub???${NC}"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    echo -e "${RED}ERROR! No Internet connection???${NC}"
  else
    echo -e "${RED}ERROR! Unknown response code $RESPONSE_CODE${NC}"
  fi
  exit
}

set_defaults() {
  __BKUP=""
  __CWMP=""
  __IPADDR=""
  __KEYS=""
  __NOEXEC=""
  __ROOTPWD="root"
  __REBOOT="Y"
  __VERBOSE=N
}

set_defaults
if [ -f .defaults.reset-to-factory-defaults-with-root -a "$(echo "$*" | grep -o '\brestore-config\b')" != "restore-config" ]; then
  . ./.defaults.reset-to-factory-defaults-with-root
fi

FIRMWARE=""
YES="N"
SAVE_DEFAULTS=n
RESTORE_CONFIG=n
RESTORE_OPTIONS=""

while getopts :bcef:iI:knp:vyU-: option
do
 case "${option}" in
  -)  case "${OPTARG}" in
        restore-config) RESTORE_CONFIG="y"; __CWMP="Y"; __NOEXEC="Y"; __KEYS="Y"; __VERBOSE="Y";;
        no-defaults)    set_defaults;;
        save-defaults)  SAVE_DEFAULTS="y";;
        *)              usage;;
      esac;;
  b)  __BKUP="Y";;
  c)  __CWMP="Y";;
  e)  __NOEXEC="Y";;
  f)  FIRMWARE="${OPTARG}";;
  i)  __IPADDR="$(uci get network.lan.ipaddr)"; [ $? -ne 0 ] && exit;;
  I)  if  echo "${OPTARG}" | grep -q -E "([^.]|^)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])([^.]|$)"; then
        __IPADDR="${OPTARG}"
      else
        echo -e "${RED}ERROR! Invalid IP address: $OPTARG${NC}"
        exit
      fi;;
  k)  __KEYS="Y";;
  n)  __REBOOT="N";;
  p)  __ROOTPWD="${OPTARG}";;
  v)  __VERBOSE="Y";;
  y)  YES="Y";;
  U)  upgrade;;
  *)  usage;;
 esac
done
shift $((OPTIND-1))

if [ $SAVE_DEFAULTS = y ]; then
  set | grep '^__' > .defaults.reset-to-factory-defaults-with-root
  echo -e "\e[1;32mDefaults saved\e[0m"
  exit
fi

ACTIVE="$(cat /proc/banktable/active)"
BOOTED="$(cat /proc/banktable/booted)"
MOUNT_PATH=$(uci get mountd.mountd.path)
USB="$(ls $MOUNT_PATH | head -n1)"

if [ $RESTORE_CONFIG = y ]; then
  if [ -n "$USB" -a ! -e ${MOUNT_PATH}${USB}/backups/restore-config.sh ]; then
    echo -e "${RED}ABORTING: Configuration restore requested, but ${MOUNT_PATH}${USB}/backups/restore-config.sh not found${NC}"
    exit
  else
    if [ -z "$1" ]; then
      DEVICE_SERIAL=$(uci get env.var.serial)
      RESTORE_OPTIONS=$(ls ${MOUNT_PATH}${USB}/backups/$(uci -q get env.var.variant_friendly_name)-$DEVICE_SERIAL-*-overlay-files-backup.tgz 2>/dev/null | sort -r | head -n 1)
      if [ -z "$RESTORE_OPTIONS" ]; then
        echo -e "${RED}ABORTING: Configuration restore requested, but no overlay backups for serial number $DEVICE_SERIAL found!${NC}"
        exit
      fi
    elif [ ! -e "$1" ]; then
      echo -e "${RED}ABORTING: Configuration restore requested, but $1 does not exist!${NC}"
    else
      RESTORE_OPTIONS="$(cd $(dirname $1);pwd)/$(basename $1)"
    fi
    if ! echo "$RESTORE_OPTIONS" | grep -q 'overlay-files-backup.tgz$'; then
      echo -e "${RED}ABORTING: Configuration restore requested, but $1 is not an overlay files backup!${NC}"
      exit
    fi
    if [ ! -e "${RESTORE_OPTIONS%-overlay-files-backup.tgz}-config.gz" ]; then
      echo -e "${RED}ABORTING: $RESTORE_OPTIONS found, but ${RESTORE_OPTIONS%-overlay-files-backup.tgz}-config.gz does not exist!${NC}"
    fi
    OVERLAY_BACKUP=$(basename $RESTORE_OPTIONS | cut -d- -f1-3)
    if [ -n "$__IPADDR" ]; then
      RESTORE_OPTIONS="-i $__IPADDR $RESTORE_OPTIONS"
      __IPADDR=""
    fi
  fi
fi

if [ -n "$__BKUP" ]; then
  if [ -z "$USB" ]; then
    echo -e "${ORANGE}WARNING: Backup requested, but no attached USB device found!${NC}"
    echo "         Are you REALLY sure you wish to proceed?"
  else
    SOURCE="$(cat /proc/banktable/booted)"
    TARGET="${MOUNT_PATH}${USB}/${SOURCE}_Backup-$(date +%Y-%m-%d@%H%M).tar.gz"
    echo "NOTE:    $SOURCE will be backed up to $TARGET"
  fi
else
  echo -e "NOTE:    ${ORANGE}NO backup requested${NC}"
fi

RBI=n
if [ -n "$FIRMWARE" ]; then
  if [ -f "$FIRMWARE" ]; then
    if [ "$ACTIVE" = "bank_1" -a "$BOOTED" = "bank_2" ]; then
      echo "$FIRMWARE" | grep -q -E '\.rbi$'
      if [ $? -eq 0 ]; then
        RBI=y
        if [ -z "$USB" ]; then
          echo "NOTE:    $FIRMWARE will be unpacked to /tmp before flashing. Do you have enough space?"
        else
          echo "NOTE:    $FIRMWARE will be unpacked to ${MOUNT_PATH}${USB} before flashing. Do you have enough space?"
        fi
        echo "NOTE:    $(basename $FIRMWARE .rbi).bin will be flashed into $BOOTED after reset"
      else
        echo "$FIRMWARE" | grep -q -E '\.bin$'
        if [ $? -eq 1 ]; then
          echo -e "${ORANGE}WARNING: Flash image files normally end with '.bin'.${NC}"
          echo "         Are you REALLY sure you wish to proceed?"
        fi
        echo "NOTE:    $FIRMWARE will be flashed into $BOOTED after reset"
      fi
    else
      echo -e "${RED}WARNING: Bank plan is NOT optimal! Active bank is $ACTIVE and booted bank is $BOOTED!${NC}"
      echo "         Are you REALLY sure you wish to proceed?"
    fi
  else
    echo "ABORTING: $FIRMWARE does not exist!"
    exit
  fi
fi

echo -e "NOTE:    Root access will be preserved. The root password will be reset to '${GREEN}${__ROOTPWD}${NC}'"
LAN_CFG="echo 'Configuring root SSH access'"
if [ -n "$__IPADDR" ]; then
  IPPREFIX="$(echo $__IPADDR | cut -d. -f1-3)"
  for GUESTIP in $(uci show network | grep "network\.Guest.*ipaddr=" | cut -d"'" -f2 | cut -d. -f1-3 | sort -u)
  do
    if [ "$IPPREFIX" = "$GUESTIP" ]; then
      echo -e "${RED}ABORTING: $__IPADDR conflicts with the Guest IP address range!${NC}"
      exit
    fi
  done
  echo -e "NOTE:    IP address will be set to '${GREEN}$__IPADDR${NC}'"
  LAN_CFG="echo 'Setting LAN IP address to $__IPADDR';uci set network.lan.ipaddr='$__IPADDR';uci commit network;/etc/init.d/network reload;"
fi
if [ -n "$__CWMP" ]; then
  echo -e "NOTE:    CWMP will be ${ORANGE}stopped${NC} during the reboot"
  CWMP_CFG="echo 'Disabling CWMP';uci set cwmpd.cwmpd_config.state='0';uci commit cwmpd;/etc/init.d/cwmpd stop &"
fi
if [ -n "$__NOEXEC" ]; then
  echo -e "NOTE:    Any 'noexec' flags will be ${ORANGE}removed${NC} from USB filesystem mounts after reset"
  NOEXEC_CFG="echo 'Removing noexec mount flags';sed -e 's/noexec,//' -e 's/,noexec//' -i /etc/config/mountd"
fi
if [ -n "$__KEYS" ]; then
  echo -e "NOTE:    SSH keys will be ${GREEN}restored${NC} after reset: ${GREEN}$(ls /etc/dropbear | xargs)${NC}"
  KEYS_CFG="echo 'Restoring SSH keys';echo '$(tar -czf - -C / etc/dropbear | base64 | tr -d "$IFS")' | base64 -d | tar -xzvf - -C /"
fi
if [ $RESTORE_CONFIG = y ]; then
  echo -e "NOTE:    Configuration backup ${GREEN}${OVERLAY_BACKUP}${NC} will be restored to the device!"
  echo -e "${ORANGE}WARNING: The device MUST have internet access after factory reset or the configuration restore will ${RED}FAIL!${NC}"
  echo "COMMAND: ${MOUNT_PATH}${USB}/backups/restore-config ${RESTORE_OPTIONS}"
  RESTORE_CFG="(while [ -e /etc/rc.local -a ! -e ${MOUNT_PATH}${USB}/backups/restore-config.sh ]; do sleep 2; done; sh ${MOUNT_PATH}${USB}/backups/restore-config.sh -vvy $RESTORE_OPTIONS 2>&1 | logger -t restore-config) &"
else
  echo -e "${ORANGE}WARNING: You are resetting to factory defaults!${NC}"
  echo -e "${ORANGE}         Any customisation or settings you have changed will be lost!${NC}"
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp && echo "NOTE:    You will also need to re-run tch-gui-unhide after rebooting!"
fi
if [ "$__REBOOT" = "Y" ]; then
  if [ $RESTORE_CONFIG = y ]; then
    echo -e "${ORANGE}WARNING: The device will reboot ${GREEN}TWICE${ORANGE} to apply the restored configuration!${NC}"
  else
    echo -e "${ORANGE}WARNING: The device will be rebooted using SysRQ trigger!${NC}"
  fi
fi
echo
echo -n -e "${GREEN}ACTION:  Enter y to continue, or anything else to exit now${NC} "
if [ $YES = N ]; then
  read
  if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
    exit
  fi
else
  echo
fi

if [ $RBI = y ]
then
  if [ -z "$USB" ]; then
    target="/tmp/$(basename $FIRMWARE .rbi).bin"
  else
    target="${MOUNT_PATH}${USB}/$(basename $FIRMWARE .rbi).bin"
  fi
  echo "About to unpack $FIRMWARE to $target"
  echo -n -e "${GREEN}ACTION:  Enter y to continue, or anything else to abort: ${NC}"
  read CONFIRM

  if [ "$CONFIRM" = "y" ]; then
    if [ -f "$target" ]; then
      echo "Removing existing $target before extracting $FIRMWARE"
      rm $target
    fi
    cat "$FIRMWARE" | (bli_parser && echo "Unpacking $FIRMWARE. Please wait... (This will take a while)" && (bli_unseal | dd bs=4 skip=1 seek=1 of="$target"))
    srce_size=$(du "$FIRMWARE" | cut -f1)
    dest_size=$(du "$target" | cut -f1)
    if [ $dest_size -le $srce_size ]; then
      echo -e "${RED}ERROR: Unpack failed? $FIRMWARE is ${srce_size}Kb. $target should be larger but is ${dest_size}Kb!${NC}"
      rm "$target"
      exit 1
    fi
    FIRMWARE="$target"
  else
    exit
  fi
fi

if [ -n "$USB" -a -n "$SOURCE" -a -n "$TARGET" ]
then
  echo "Backing up $SOURCE to $TARGET ..."
  tar -C /overlay -czf $TARGET $SOURCE
fi

echo -e "${GREEN}Resetting...${NC}"
# https://hack-technicolor.readthedocs.io/en/stable/Upgrade/#clean-up
rm -rf /overlay/$(cat /proc/banktable/booted)
# https://hack-technicolor.readthedocs.io/en/stable/Upgrade/#preserving-root-access
mkdir -p /overlay/$(cat /proc/banktable/booted)/etc
chmod 755 /overlay/$(cat /proc/banktable/booted) /overlay/$(cat /proc/banktable/booted)/etc
echo -e "logger '/etc/rc.local'
logread | grep -q '/etc/rc.local' || /etc/init.d/log restart
echo root:$__ROOTPWD | chpasswd
sed -i 's#/root:.*\$#/root:/bin/ash#' /etc/passwd
sed -i -e 's/#//' -e 's#askconsole:.*\$#askconsole:/bin/ash#' /etc/inittab
$LAN_CFG
uci -q set \$(uci show firewall | grep -m 1 \$(fw3 -q print | \
egrep 'iptables -t filter -A zone_lan_input -p tcp -m tcp --dport 22 -m comment --comment \"!fw3: .+\" -j DROP' 2>/dev/null | \
sed -n -e 's/^iptables.\+fw3: \(.\+\)\".\+/\1/p') 2>/dev/null | \
sed -n -e \"s/\(.\+\).name='.\+'$/\1/p\").target='ACCEPT'
uci add dropbear dropbear
uci rename dropbear.@dropbear[-1]=afg
uci set dropbear.afg.enable='1'
uci set dropbear.afg.Interface='lan'
uci set dropbear.afg.Port='22'
uci set dropbear.afg.IdleTimeout='600'
uci set dropbear.afg.PasswordAuth='on'
uci set dropbear.afg.RootPasswordAuth='on'
uci set dropbear.afg.RootLogin='1'
uci set dropbear.lan.enable='0'
uci commit dropbear
$KEYS_CFG
/etc/init.d/dropbear enable
/etc/init.d/dropbear restart
$NOEXEC_CFG
$CWMP_CFG
$RESTORE_CFG
rm /overlay/\$(cat /proc/banktable/booted)/etc/rc.local
source /rom/etc/rc.local
" > /overlay/$(cat /proc/banktable/booted)/etc/rc.local
chmod +x /overlay/$(cat /proc/banktable/booted)/etc/rc.local
sync

if [ $__VERBOSE = Y ]; then
  echo -e "${GREY}"
  cat /overlay/$(cat /proc/banktable/booted)/etc/rc.local
  echo -e "${NC}"
fi

if [ -n "$FIRMWARE" ]; then
  echo -e "${GREEN}Erasing and writing $FIRMWARE into $(cat /proc/banktable/booted)...${NC}"
  mtd -e $(cat /proc/banktable/booted) write "$FIRMWARE" $(cat /proc/banktable/booted)
fi

if [ "$__REBOOT" = "Y" ]; then
  echo -e "${ORANGE}Rebooting...${NC}"
  sleep 1
  echo 1 > /proc/sys/kernel/sysrq
  echo b > /proc/sysrq-trigger
fi
