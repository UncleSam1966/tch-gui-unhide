#!/bin/sh

GREEN='\033[1;32m'
GREY='\033[90m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

usage() {
cat <<EOH
Resets the device to factory defaults, and prepares a run-once root access
setup script to be executed on the next boot.

It is basically the same as the procedure as described in
http://hack-technicolor.rtfd.io/en/stable/Upgrade/#preserving-root-access,
but with some additional options.

Usage: $0 [options]

Options:
 -b           Make a full backup of your booted bank configuration (requires 
                attached USB device).
 -c           Disable CWMP configuration during first boot after reset.
 -e           Disable any 'noexec' flags on USB mounted filesystems.
 -f filename  Flash 'filename' into the mounted bank ($BOOTED) after reset and 
                before reboot. If 'filename' ends with .rbi, it will be 
                unpacked first, either to an attached USB device, or /tmp if 
                no USB detected.
 -i           Keep existing IP address [$(ip address show dev br-lan | grep "inet " | tr -s " " | cut -d" " -f3 | cut -d/ -f1)] after reset and
                reboot.
 -I n.n.n.n   Use IP address n.n.n.n after reset and reboot.
 -k           Keep existing SSH keys after reset and reboot.
 -v           Show the reset script after it has been written.
 -y           Bypass confirmation prompt (answers 'y').
 -n           Do NOT reboot.
 -U           Download the latest version of $SCRIPT from GitHub.

EOH
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]; then
      chmod +x $SCRIPT
      echo -e "${GREEN}Successfully downloaded $SCRIPT.${NC}"
    else
      echo -e "${RED}Failed to download $SCRIPT.${NC}"
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    echo -e "${RED}ERROR! Not found on GitHub???${NC}"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    echo -e "${RED}ERROR! No Internet connection???${NC}"
  else
    echo -e "${RED}ERROR! Unknown response code $RESPONSE_CODE${NC}"
  fi
  exit
}

ACTIVE="$(cat /proc/banktable/active)"
BOOTED="$(cat /proc/banktable/booted)"
BKUP=""
CWMP=""
FIRMWARE=""
IPADDR=""
KEYS=""
NOEXEC=""
REBOOT="Y"
VERBOSE=N
YES=N

while getopts :bcef:iI:knvyU option
do
 case "${option}" in
  b)  BKUP="Y";;
  c)  CWMP="Y";;
  e)  NOEXEC="Y";;
  f)  FIRMWARE="${OPTARG}";;
  i)  IPADDR="$(ip address show dev br-lan | grep "inet " | tr -s " " | cut -d" " -f3 | cut -d/ -f1)";;
  I)  echo "${OPTARG}" | grep -q -E "([^.]|^)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])([^.]|$)"
      if [ $? -eq 1 ]; then
        echo -e "${RED}ERROR! Invalid IP address: $OPTARG${NC}"
        exit
      else
        IPADDR="${OPTARG}"
      fi;;
  k)  KEYS="Y";;
  n)  REBOOT="N";;
  v)  VERBOSE=Y;;
  y)  YES=Y;;
  U)  upgrade;;
  *)  usage;;
 esac
done

MOUNT_PATH=$(uci get mountd.mountd.path)
USB="$(ls $MOUNT_PATH | head -n1)"

if [ ! -z "$BKUP" ]; then
  if [ -z "$USB" ]; then
    echo -e "${ORANGE}WARNING: Backup requested, but no attached USB device found!${NC}"
    echo "         Are you REALLY sure you wish to proceed?"
  else
    SOURCE="$(cat /proc/banktable/booted)"
    TARGET="${MOUNT_PATH}${USB}/${SOURCE}_Backup-$(date +%Y-%m-%d@%H%M).tar.gz"
    echo "NOTE:    $SOURCE will be backed up to $TARGET"
  fi
else
  echo -e "NOTE:    ${ORANGE}NO backup requested${NC}"
fi

RBI=n
if [ ! -z "$FIRMWARE" ]; then
  if [ -f "$FIRMWARE" ]; then
    if [ "$ACTIVE" = "bank_1" -a "$BOOTED" = "bank_2" ]; then
      echo "$FIRMWARE" | grep -q -E '\.rbi$'
      if [ $? -eq 0 ]; then
        RBI=y
        if [ -z "$USB" ]; then
          echo "NOTE:    $FIRMWARE will be unpacked to /tmp before flashing. Do you have enough space?"
        else
          echo "NOTE:    $FIRMWARE will be unpacked to ${MOUNT_PATH}${USB} before flashing. Do you have enough space?"
        fi
        echo "NOTE:    $(basename $FIRMWARE .rbi).bin will be flashed into $BOOTED after reset"
      else
        echo "$FIRMWARE" | grep -q -E '\.bin$'
        if [ $? -eq 1 ]; then
          echo -e "${ORANGE}WARNING: Flash image files normally end with '.bin'.${NC}"
          echo "         Are you REALLY sure you wish to proceed?"
        fi
        echo "NOTE:    $FIRMWARE will be flashed into $BOOTED after reset"
      fi
    else
      echo -e "${RED}WARNING: Bank plan is NOT optimal! Active bank is $ACTIVE and booted bank is $BOOTED!${NC}"
      echo "         Are you REALLY sure you wish to proceed?"
    fi
  else
    echo "ABORTING: $FIRMWARE does not exist!"
    exit
  fi
fi

echo -e "NOTE:    root access will be preserved. root password will be reset to '${GREEN}root${NC}'"
LAN_CFG="echo 'Configuring root SSH access'"
if [ ! -z "$IPADDR" ]; then
  IPPREFIX="$(echo $IPADDR | cut -d. -f1-3)"
  for GUESTIP in $(uci show network | grep "network\.Guest.*ipaddr=" | cut -d"'" -f2 | cut -d. -f1-3 | sort -u)
  do
    if [ "$IPPREFIX" = "$GUESTIP" ]; then
      echo -e "${RED}ABORTING: $IPADDR conflicts with the Guest IP address range!${NC}"
      exit
    fi
  done
  echo -e "NOTE:    IP address will be set to '${GREEN}$IPADDR${NC}'"
  LAN_CFG="echo 'Setting LAN IP address to $IPADDR';uci set network.lan.ipaddr='$IPADDR';uci commit network;/etc/init.d/network reload;"
fi
if [ ! -z "$CWMP" ]; then
  echo -e "NOTE:    CWMP will be ${ORANGE}stopped${NC} during the reboot"
  CWMP_CFG="echo 'Disabling CWMP';uci delete cwmpd.cwmpd_config.acs_url;uci set cwmpd.cwmpd_config.state='0';uci commit cwmpd;/etc/init.d/cwmpd stop;"
fi
if [ ! -z "$NOEXEC" ]; then
  echo -e "NOTE:    Any 'noexec' flags will be ${GREEN}removed${NC} from USB filesystem mounts after reset"
  NOEXEC_CFG="echo 'Removing noexec mount flags';sed -e 's/noexec,//' -e 's/,noexec//' -i /etc/config/mountd"
fi
if [ ! -z "$KEYS" ]; then
  echo -e "NOTE:    SSH keys will be ${GREEN}restored${NC} after reset:"
  KEYS_CFG="echo 'Restoring SSH keys';echo '$(tar -czvf - -C / etc/dropbear | base64 | tr -d "$IFS")' | base64 -d | tar -xzvf - -C /"
  echo
fi
if [ "$REBOOT" = "Y" ]; then
  echo -e "${ORANGE}WARNING: Device will attempt to reboot!${NC}"
fi
echo
echo -e "${ORANGE}WARNING: You are resetting to factory defaults!${NC}"
echo -e "${ORANGE}         Any customisation or settings you have changed will be lost!${NC}"
echo
grep -q 'tch-gui-unhide' /www/docroot/gateway.lp
if [ $? -eq 0 ]; then
  echo "NOTE:    You will also need to re-run tch-gui-unhide after rebooting!"
  echo
fi
echo -n -e "${GREEN}ACTION:  Enter y to continue, or anything else to exit now${NC} "
if [ $YES = N ]; then
  read
  if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
    exit
  fi
else
  echo
fi

if [ $RBI = y ]
then
  if [ -z "$USB" ]; then
    target="/tmp/$(basename $FIRMWARE .rbi).bin"
  else
    target="${MOUNT_PATH}${USB}/$(basename $FIRMWARE .rbi).bin"
  fi
  echo "About to unpack $FIRMWARE to $target"
  echo -n -e "${GREEN}ACTION:  Enter y to continue, or anything else to abort: ${NC}"
  read CONFIRM

  if [ "$CONFIRM" = "y" ]; then
    if [ -f "$target" ]; then
      echo "Removing existing $target before extracting $FIRMWARE"
      rm $target
    fi
    cat "$FIRMWARE" | (bli_parser && echo "Unpacking $FIRMWARE. Please wait... (This will take a while)" && (bli_unseal | dd bs=4 skip=1 seek=1 of="$target"))
    FIRMWARE="$target"
  else
    exit
  fi
fi

if [ ! -z "$USB" -a ! -z "$SOURCE" -a ! -z "$TARGET" ]
then
  echo "Backing up $SOURCE to $TARGET ..."
  tar -C /overlay -czf $TARGET $SOURCE
fi

echo -e "${GREEN}Resetting...${NC}"
# https://hack-technicolor.readthedocs.io/en/stable/Upgrade/#clean-up
rm -rf /overlay/`cat /proc/banktable/booted`
# https://hack-technicolor.readthedocs.io/en/stable/Upgrade/#preserving-root-access
mkdir -p /overlay/$(cat /proc/banktable/booted)/etc
chmod 755 /overlay/$(cat /proc/banktable/booted) /overlay/$(cat /proc/banktable/booted)/etc
echo -e "echo root:root | chpasswd
sed -i 's#/root:.*\$#/root:/bin/ash#' /etc/passwd
sed -i -e 's/#//' -e 's#askconsole:.*\$#askconsole:/bin/ash#' /etc/inittab
uci -q set \$(uci show firewall | grep -m 1 \$(fw3 -q print | \
egrep 'iptables -t filter -A zone_lan_input -p tcp -m tcp --dport 22 -m comment --comment \"!fw3: .+\" -j DROP' 2>/dev/null | \
sed -n -e 's/^iptables.\+fw3: \(.\+\)\".\+/\1/p') 2>/dev/null | \
sed -n -e \"s/\(.\+\).name='.\+'$/\1/p\").target='ACCEPT'
uci add dropbear dropbear
uci rename dropbear.@dropbear[-1]=afg
uci set dropbear.afg.enable='1'
uci set dropbear.afg.Interface='lan'
uci set dropbear.afg.Port='22'
uci set dropbear.afg.IdleTimeout='600'
uci set dropbear.afg.PasswordAuth='on'
uci set dropbear.afg.RootPasswordAuth='on'
uci set dropbear.afg.RootLogin='1'
uci set dropbear.lan.enable='0'
uci commit dropbear
$KEYS_CFG
/etc/init.d/dropbear enable
/etc/init.d/dropbear restart
$CWMP_CFG
$LAN_CFG
$NOEXEC_CFG
rm /overlay/\$(cat /proc/banktable/booted)/etc/rc.local
source /rom/etc/rc.local
" > /overlay/$(cat /proc/banktable/booted)/etc/rc.local
chmod +x /overlay/$(cat /proc/banktable/booted)/etc/rc.local
sync

if [ $VERBOSE = Y ]; then
  echo -e "${GREY}"
  cat /overlay/$(cat /proc/banktable/booted)/etc/rc.local
  echo -e "${NC}"
fi

if [ ! -z "$FIRMWARE" ]; then
  echo -e "${GREEN}Writing $FIRMWARE into $(cat /proc/banktable/booted)...${NC}"
  mtd write "$FIRMWARE" $(cat /proc/banktable/booted)
fi

if [ "$REBOOT" = "Y" ]; then
  echo -e "${GREEN}Attempting to reboot...${NC}"
  echo "######################################################"
  echo "# NOTE: If the reboot fails with an error message,   #"
  echo "#       you can just manually power cycle the device #"
  echo "######################################################"
  reboot
fi
