#!/bin/sh
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]
then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on https://hack-technicolor.readthedocs.io/en/stable/Hardening/

SCRIPT="$(basename $0)"

usage() {
cat <<EOH
Hardens root access and applies optional service configuration changes.

Usage: $0 [options]

Options:
 -k a|c|e|k|m|n        Override default hardening configuration:
    where a            - Keep Telstra AIR enabled
          c            - Keep CWMP installed
          k            - Keep default public authorized keys
          m            - Keep Telstra monitoring and data collection enabled
          n            - Keep Telstra NTP servers
          x            - Keep noexec on ext2/3/4, fat, hfsplus, hfsplusjournal and ntfs filesystems
                           (i.e. prevent execution of scripts/programs on USB devices)
          T            - Keep all default Telstra configuration (Equivalent to: -ka -kc -kk -km -kn -kx) 
 -h u|d|s|<hostname>
    where u            Leave hostname unchanged
          d            Set the hostname to $VARIANT
          s            Set the hostname to $VARIANT-$MAC_HEX
          <hostname>   Use the specified hostname
 -d u|g|<domainname>
    where u            Leave domain name unchanged
          g            Set the domain name to gateway
          <domainname> Set the domain name to <domainname>
 -n u|a|c|g|f|o|<n.n.n.n>
    where u            Leave DNS servers unchanged
          a            Automatically use the DNS servers from the ISP
          c            Set the DNS servers to Cloudflare
          g            Set the DNS servers to Google
          f            Set the DNS servers to OpenDNS Family Shield
          o            Set the DNS servers to OpenDNS
          <n.n.n.n>    Set the DNS servers to 1 or 2 comma-separated IPv4 addresses (e.g. 8.8.8.8,1.1.1.1)
 -a u|y|n              WAN ALG NAT Helpers:     u=Unchanged y=Enable n=Disable
 -c u|y|n              Content Sharing:         u=unchanged y=Enable n=Disable
 -f u|y|n              File Sharing:            u=unchanged y=Enable n=Disable
 -p u|y|n              Power Saving:            u=unchanged y=Enable n=Disable
 -r u|y|n              Printer Sharing:         u=unchanged y=Enable n=Disable
 -t u|y|n              Telephony:               u=unchanged y=Enable n=Disable
 -e u|y|n              DECT Emission Mode:      u=unchanged y=Enable n=Disable
 -u u|y|n              UPnP Service:            u=unchanged y=Enable n=Disable
 -m u|y|n            * MultiAP (EasyMesh):      u=unchanged y=Enable n=Disable
 -g u|y|n            * DumaOS (Game Optimiser): u=unchanged y=Enable n=Disable
 -w u|y|n              WPS on non-Guest and non-Backhaul SSIDs: u=unchanged y=Enable n=Disable
 -F u|y|n              Factory reset root protection: u=unchanged y=Enable n=Disable
                          NOTE: Installation of tch-gui-unhide will ALWAYS enable RTFD protection!
 -A                    Equivalent to: -hd -dg -an -cn -fn -rn -un -wn -Fy
 -S                    Equivalent to: -hs -dg -an -cn -fn -rn -un -wn -Fy
 -M                    Minimum memory mode: Equivalent to: -an -cn -fn -rn -tn -en -un -mn -gn -Fy
                        PLUS stops and disables the associated services
 -R                    Reset to device defaults
                        (equivalent to: -hmymodem -dmodem -na -ay -cy -fy -py -ry -ty -ey -uy -my -gy -wy -Fn)
 -o                    Configures opkg
 -U                    Download the latest version of $SCRIPT from GitHub

NOTE #1: Default for all optional parameters is u (unchanged)
NOTE #2: Options marked with * are only applicable if the service is installed

EOH
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]
  then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]
    then
      chmod +x $SCRIPT
      echo "[$SCRIPT] Successfully downloaded $SCRIPT."
    else
      echo "[$SCRIPT] Failed to download $SCRIPT."
    fi
  elif [ "$RESPONSE_CODE" = 404 ]
  then
    echo "[$SCRIPT] ERROR! Not found on GitHub???"
  elif [ "$RESPONSE_CODE" = 000 ]
  then
    echo "ERROR! No Internet connection???"
  else
    echo "[$SCRIPT] ERROR! Unknown response code $RESPONSE_CODE"
  fi
  exit
}

VERSION=$(uci get version.@version[0].marketing_version)

# Keep count of changes so we know whether to restart services
SRV_bulkdata=0
SRV_cups=0
SRV_cwmp=0
SRV_dhcp=0
SRV_dlna=0
SRV_dropbear=0
SRV_dumaos=0
SRV_fw=0
SRV_hostapd=0
SRV_hotspot=0
SRV_mmpbxd=0
SRV_mobiled=0
SRV_monitor=0
SRV_mountd=0
SRV_network=0
SRV_ntp=0
SRV_qos=0
SRV_samba=0
SRV_system=0
SRV_watchdog=0
SRV_web=0
SRV_upnp=0

if [ -f /etc/init.d/dumaos ]
then
  SRV_dumaos=0
else
  SRV_dumaos=-1
fi

if [ -f /etc/config/multiap ]
then
  SRV_multiap=0
else
  SRV_multiap=-1
fi

PACKAGES_TO_REMOVE=""

# Options
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC_HEX=$(uci -q get env.var.ssid_mac_postfix_r0)
ALG='u'
DECT='u'
DLNAD='u'
DOMAIN='u'
DUMAOS='u'
HOST='u'
LITE='n'
MMPBX='u'
MULTIAP='u'
NS='u'
OPKG='n'
POWER='u' 
PRNTR='u'
ROOT_PROTECT='u'
SAMBA='u'
UPNP='u'
WPS='u'
# Overrides
AIR='n'
CWMP='n'
KEYS='n'
MONITORING='n'
NTP='n'
NOEXEC='n'

while getopts :a:c:d:e:f:g:h:k:m:n:op:r:t:u:w:AF:MRSU option
do
 case "${option}" in
  a)  case "${OPTARG}" in y) ALG='1';; n) ALG='0';; u) ALG='u';; *) ALG='u'; echo 'ERROR: -a valid options are y, n, or u'; exit 1;; esac;;
  c)  case "${OPTARG}" in y) DLNAD='1';; n) DLNAD='0';; u) DLNAD='u';; *) DLNAD='u'; echo 'ERROR: -c valid options are y, n, or u'; exit 1;; esac;;
  d)  case "${OPTARG}" in g|G) DOMAIN='gateway';; u) DOMAIN='u';; *) DOMAIN="${OPTARG}";; esac;;
  e)  case "${OPTARG}" in y) DECT='1';; n) DECT='0';; u) DECT='u';; *) DECT='u'; echo 'ERROR: -e valid options are y, n, or u'; exit 1;; esac;;
  f)  case "${OPTARG}" in y) SAMBA='1';; n) SAMBA='0';; u) SAMBA='u';; *) SAMBA='u'; echo 'ERROR: -f valid options are y, n, or u'; exit 1;; esac;;
  g)  case "${OPTARG}" in y) DUMAOS='1';; n) DUMAOS='0';; u) DUMAOS='u';; *) DUMAOS='u'; echo 'ERROR: -g valid options are y, n, or u'; exit 1;; esac;;
  h)  HOST=${OPTARG};;
  k)  case "${OPTARG}" in k) KEYS='y';; c) CWMP='y';; m) MONITORING='y';; a) AIR='y';; n) NTP='y';; x) NOEXEC='y';; T) KEYS='y'; CWMP='y'; MONITORING='y'; AIR='y'; NTP='y'; NOEXEC='y';; *) echo "ERROR: Unknown override option $OPTARG"; exit 1;; esac;;
  m)  case "${OPTARG}" in y) MULTIAP='1';; n) MULTIAP='0';; u) MULTIAP='u';; *) MULTIAP='u'; echo 'ERROR: -m valid options are y, n, or u'; exit 1;; esac;;
  n)  NS=${OPTARG};;
  o)  OPKG='y';;
  p)  case "${OPTARG}" in y) POWER='y';; n) POWER='n';; u) POWER='u';; *) POWER='u'; echo 'ERROR: -p valid options are y, n, or u'; exit 1;; esac;;
  r)  case "${OPTARG}" in y) PRNTR='1';; n) PRNTR='0';; u) PRNTR='u';; *) PRNTR='u'; echo 'ERROR: -r valid options are y, n, or u'; exit 1;; esac;;
  t)  case "${OPTARG}" in y) MMPBX='1';; n) MMPBX='0';; u) MMPBX='u';; *) MMPBX='u'; echo 'ERROR: -t valid options are y, n, or u'; exit 1;; esac;;
  u)  case "${OPTARG}" in y) UPNP='1';; n) UPNP='0';; u) UPNP='u';; *) UPNP='u'; echo 'ERROR: -u valid options are y, n, or u'; exit 1;; esac;;
  w)  case "${OPTARG}" in y) WPS='1';; n) WPS='0';; u) WPS='u';; *) WPS='u'; echo 'ERROR: -w valid options are y, n, or u'; exit 1;; esac;;
  A)  HOST='d'; DOMAIN='gateway'; ALG='0'; DLNAD='0'; SAMBA='0'; PRNTR='0'; UPNP='0'; WPS='0'; ROOT_PROTECT='1';;
  F)  case "${OPTARG}" in y) ROOT_PROTECT='1';; n) ROOT_PROTECT='0';; u) ROOT_PROTECT='u';; *) ROOT_PROTECT='u'; echo 'ERROR: -F valid options are y, n, or u'; exit 1;; esac;;
  M)  LITE='y'; ALG='0'; DECT='0'; DLNAD='0'; DUMAOS='0'; MMPBX='0'; MULTIAP='0'; PRNTR='0'; SAMBA='0'; UPNP='0'; WPS='0'; ROOT_PROTECT='1';;
  R)  LITE='R'; HOST='mymodem'; DOMAIN='modem'; NS='a'; ALG='1'; DLNAD='1'; DUMAOS='0'; SAMBA='1'; MULTIAP='1'; POWER='y'; PRNTR='1'; MMPBX='1'; DECT='1'; UPNP='1'; ROOT_PROTECT='0';;
  S)  HOST='s'; DOMAIN='gateway'; ALG='0'; DLNAD='0'; SAMBA='0'; PRNTR='0'; UPNP='0'; WPS='0'; ROOT_PROTECT='1';;
  U)  upgrade;;
  ?)  usage;;
 esac
done

status2text() {
  if [ "$1" = "0" ]
  then
    echo Disabled
  else
    echo Enabled
  fi
}

echo [$SCRIPT]: Applying default hardening rules...

if [ "$(uci -q get cwmpd.cwmpd_config.state)" -eq "1" -o -f /etc/init.d/cwmpd ]
then
  if [ "$CWMP" = 'n' ]
  then
    echo [$SCRIPT]: - Disabling CWMP
    uci set cwmpd.cwmpd_config.state='0'
    uci commit cwmpd
    SRV_cwmp=$(( $SRV_cwmp + 1 ))
    uci -q delete firewall.cwmpd
    uci commit firewall
    SRV_fw=$(( $SRV_fw + 1 ))
    uci -q del_list watchdog.@watchdog[0].pidfile='/var/run/cwmpd.pid'
    uci -q del_list watchdog.@watchdog[0].pidfile='/var/run/cwmpevents.pid'
    uci commit watchdog
    SRV_watchdog=$(( $SRV_watchdog + 2 ))
    PACKAGES_TO_REMOVE="$PACKAGES_TO_REMOVE conf-cwmpd cwmpd"
  else
    echo [$SCRIPT]: - OVERRIDE! CWMP NOT Disabled
  fi
else
  echo [$SCRIPT]: - CWMP already Disabled
fi

if [ -z "$(uci -q get autoreset.vsparc_enabled)" -a -z "$(uci -q get autoreset.thor_enabled)" -a -z "$(uci -q get wifi_doctor_agent.acs)" -a -z "$(uci -q get wifi_doctor_agent.config)" -a -z "$(uci -q get wifi_doctor_agent.as_config)" ]
then
  echo [$SCRIPT]: - Telstra monitoring already Disabled
else
  if [ "$MONITORING" = 'n' ]
  then
    echo [$SCRIPT]: - Disabling Telstra monitoring
    uci -q delete autoreset.vsparc_enabled
    uci -q delete autoreset.thor_enabled
    uci commit autoreset
    SRV_monitor=$(( $SRV_monitor + 2 ))
    uci -q delete wifi_doctor_agent.acs
    uci -q delete wifi_doctor_agent.config
    uci -q delete wifi_doctor_agent.as_config
    uci commit wifi_doctor_agent
    SRV_monitor=$(( $SRV_monitor + 3 ))
    PACKAGES_TO_REMOVE="$PACKAGES_TO_REMOVE libbcmairiq conf-airiq autoreset-tch tls-thor-map wifi-doctor-agent conf-wifi-doctor-agent"
  else
    echo [$SCRIPT]: - OVERRIDE! Telstra monitoring NOT Disabled
  fi
fi

if [ -z "$(uci -q get dhcp.hotspot)" -a -z "$(uci -q get dhcp.fonopen)" -a -z "$(uci -q get network.fonopen)" -a -z "$(uci -q get web.fon)" -a -z "$(uci -q show web.ruleset_main.rules | grep '\bfon\b')" -a -z "$(uci -q show qos.reclassify_1.srcif | grep '\bfonopen\b')" -a -z "$(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\))" -a -z "$(uci -q get wireless.bs2)" -a -z "$(uci -q get wireless.bs3)" ]
then
  echo [$SCRIPT]: - Telstra AIR already removed
else
  if [ "$AIR" = 'n' ]
  then
    echo [$SCRIPT]: - Removing Telstra Air
    SRV_hotspot=$(( $SRV_hotspot + 1 ))
    uci -q delete dhcp.hotspot
    uci -q delete dhcp.fonopen
    uci commit dhcp
    SRV_dhcp=$(( $SRV_dhcp + 2 ))
    uci -q delete network.fonopen
    uci commit network
    SRV_network=$(( $SRV_network + 2 ))
    uci -q delete web.fon
    uci -q del_list web.ruleset_main.rules='fon'
    uci commit web
    SRV_web=$(( $SRV_web + 2 ))
    for wl in $(uci show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | cut -d. -f2)
    do
      ap=$(uci show wireless | grep iface=\'$wl\' | cut -d. -f2)
      echo [$SCRIPT]: - Removing SSID $wl \(AP=$ap\)
      uci delete wireless.$wl
      uci delete wireless.$ap
      SRV_network=$(( $SRV_network + 2 ))
    done
    echo [$SCRIPT]: - Removing Telstra Air Band Steering configuration
    uci -q delete wireless.bs2
    uci -q delete wireless.bs3
    SRV_network=$(( $SRV_network + 2 ))
    uci commit wireless
    PACKAGES_TO_REMOVE="$PACKAGES_TO_REMOVE hotspotd webui-fon"
  else
    echo [$SCRIPT]: - OVERRIDE! Telstra AIR NOT Removed
  fi
fi

if [ "$AIR" = 'n' ]
then
  if [ $(uci show firewall | grep 192.168.20.1 | wc -l) -eq 0 ]
  then
    echo [$SCRIPT]: - Telstra AIR firewall entries already removed
  else
    echo [$SCRIPT]: - Deleting Telstra AIR firewall entries
    while [ $(uci show firewall | grep 192.168.20.1 | wc -l) -gt 0 ]
    do
      uci delete $(uci show firewall | grep -m 1 192.168.20.1 | cut -d. -f1-2)
      SRV_fw=$(( $SRV_fw + 1 ))
    done
    uci commit firewall
  fi
  if [ $(uci show qos | grep "classify.*target='FON'" | wc -l) -eq 0 -a $(uci -q show qos.FON | wc -l) -eq 0 ]
  then
    echo [$SCRIPT]: - Telstra AIR QoS entries already removed
  else
    echo [$SCRIPT]: - Deleting Telstra AIR QoS entries
    uci -q del_list qos.reclassify_1.srcif='fonopen'
    uci -q delete $(uci show qos | grep "classify.*target='FON'" | cut -d. -f1-2)
    uci -q delete qos.FON
    uci commit qos
    SRV_qos=$(( $SRV_qos + 3 ))
  fi
fi

if [ "$NTP" = 'n' ]
then
  for s in $(uci -q get system.ntp.server | tr " " "$IFS")
  do 
    echo $s | grep -q -i telstra
    if [ $? -eq 0 ]
    then
      echo [$SCRIPT]: - Removing Telstra NTP server $s
      uci del_list system.ntp.server="$s"
      SRV_ntp=$(( $SRV_ntp + 1 ))
    fi
  done
  if [ $SRV_ntp -eq 0 ]
  then
    echo [$SCRIPT]: - Telstra NTP servers already removed
  else
    uci commit system
  fi
else
  echo [$SCRIPT]: - OVERRIDE! Telstra NTP servers NOT Removed
fi

if [ "$MONITORING" = 'n' ]
then
  /etc/init.d/lotagent enabled
  if [ $? -eq 0 ]
  then
    echo [$SCRIPT]: - Disabling lotagent \(Telstra logging?\)
    /etc/init.d/lotagent stop
    /etc/init.d/lotagent disable
  else
    echo [$SCRIPT]: - lotagent already Disabled
  fi

  if [ "$(uci -q get bulkdata.global.enabled)" = "1" ]
  then
    echo [$SCRIPT]: - Disabling bulkdata collection \(More logging?\)
    uci set bulkdata.global.enabled='0'
    uci set bulkdata.profile_1.enabled='0'
    uci commit bulkdata
    SRV_bulkdata=$(( $SRV_bulkdata + 1 ))
  else
    echo [$SCRIPT]: - bulkdata collection already disabled
  fi
  grep -q bulkdata /etc/crontabs/root
  if [ $? -eq 1 ]
  then
    echo [$SCRIPT]: - Removing bulkdata cron job
    sed -e '/bulkdata/d' -i /etc/crontabs/root
  else
    echo [$SCRIPT]: - bulkdata cron job already removed
  fi
else
  echo [$SCRIPT]: - OVERRIDE! Telstra logging and data collection NOT Removed
fi

if [ $(uci show mountd | grep -E 'mountd\.(ext[2-4]|fat|hfsplus(journal)*|ntfs)\.options=.*noexec.*' | wc -l) -gt 0 ]
then
  if [ "$NOEXEC" = 'n' ]
  then
    for fs in ext2 ext3 ext4 fat hfsplus hfsplusjournal ntfs
    do
      FS_OPT=$(uci -q get mountd.$fs.options)
      echo $FS_OPT | grep -q noexec
      if [ $? -eq 0 ]
      then
        uci set mountd.$fs.options="$(echo $FS_OPT | sed -e 's/noexec,//' -e 's/,noexec//')"
        SRV_mountd=$(( $SRV_mountd + 1 ))
        echo [$SCRIPT]: - noexec on $fs mounts Disabled
      fi
    done
    if [ $SRV_mountd -gt 0 ]
    then
      uci commit mountd
    fi
  else
    echo [$SCRIPT]: - OVERRIDE! noexec on ext2/3/4, fat, hfsplus, hfsplusjournal and ntfs mounts NOT Disabled
  fi
else
  echo [$SCRIPT]: - noexec on ext2/3/4, fat, hfsplus, hfsplusjournal and ntfs mounts already Disabled
fi

if [ -f authorized_keys ]
then
  if [ "$KEYS" = 'n' ]
  then
    cmp -s authorized_keys /etc/dropbear/authorized_keys
    if [ $? -eq 1 ]
    then
      echo [$SCRIPT]: - Found authorized_keys - replacing /etc/dropbear/authorized_keys
      cp authorized_keys /etc/dropbear/authorized_keys
      chmod 600 /etc/dropbear/authorized_keys
      chown root:root /etc/dropbear/authorized_keys
      SRV_dropbear=$(( $SRV_dropbear + 1 ))
    else
      echo [$SCRIPT]: - /etc/dropbear/authorized_keys already replaced
    fi
  else
    echo [$SCRIPT]: - OVERRIDE! Existing public keys in /etc/dropbear/authorized_keys NOT removed
    grep -q "$(head -n 1 authorized_keys)" /etc/dropbear/authorized_keys
    if [ $? -eq 1 ]
    then
      echo [$SCRIPT]: - OVERRIDE! First key in authorized_keys not found in /etc/dropbear/authorized_keys - Appending entire file
      cat authorized_keys >> /etc/dropbear/authorized_keys
      chmod 600 /etc/dropbear/authorized_keys
      chown root:root /etc/dropbear/authorized_keys
      SRV_dropbear=$(( $SRV_dropbear + 1 ))
    else
      echo [$SCRIPT]: - OVERRIDE! First key in authorized_keys found in /etc/dropbear/authorized_keys - Assuming all keys already added
    fi
  fi
else
  if [ "$KEYS" = 'n' ]
  then
    if [ -z "$(cat /etc/dropbear/authorized_keys)" ]
    then
      echo [$SCRIPT]: - All public keys already removed from /etc/dropbear/authorized_keys
    else
      echo [$SCRIPT]: - Removing all public keys from /etc/dropbear/authorized_keys
      echo > /etc/dropbear/authorized_keys
    fi
  else
    echo [$SCRIPT]: - OVERRIDE! Public keys not removed from /etc/dropbear/authorized_keys
  fi
fi
if [ "$(uci -q get dropbear.lan.enable)" = '1'  -a "$(uci -q get dropbear.lan.enable)" = '1' -a "$(uci -q get dropbear.lan.PasswordAuth)" = 'on' -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = 'on' -a "$(uci -q get dropbear.lan.RootLogin)" = '1'  -a "$(uci -q get dropbear.wan.RootLogin)" = '1' ]
then
  echo [$SCRIPT]: SSH access already correctly configured
else
  # We need to enable dropbear LAN access properly as you can enable/disable via the GUI, and if
  # done without allowing password auth and root login, it can accidently prevent SSH access
  uci set dropbear.lan.enable='1'
  uci set dropbear.lan.PasswordAuth='on'
  uci set dropbear.lan.RootPasswordAuth='on'
  uci set dropbear.lan.RootLogin='1'
  # Not configurable via transformer/GUI, so need to set it on here
  uci set dropbear.wan.RootLogin='1'
  uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
  echo [$SCRIPT]: SSH access correctly configured
fi

cmp -s /rom/etc/rtfd_persistent_filelist.conf /etc/rtfd_persistent_filelist.conf
ROOT_PROTECT_NOW="$?"
if [ "$ROOT_PROTECT" = "u" -o "$ROOT_PROTECT_NOW" = "$ROOT_PROTECT" ]
then
  echo [$SCRIPT]: Reset to Factory Defaults root protection unchanged \[$(status2text $ROOT_PROTECT_NOW)\]
else
  for f in /etc/passwd /etc/shadow /etc/config/dropbear /etc/dropbear/* /etc/rc.d/*dropbear
  do
    if [ "$ROOT_PROTECT" = "1" ]
    then
      grep -q -E "^$f$" /etc/rtfd_persistent_filelist.conf
      if [ $? -eq 1 ]
      then
        echo "$f">>/etc/rtfd_persistent_filelist.conf
      fi
    else
      sed -e "/^$(echo $f | sed -e 's|/|\\/|g')\$/d" -i /etc/rtfd_persistent_filelist.conf
    fi
  done
  echo [$SCRIPT]: Reset to Factory Defaults root protection $(status2text $ROOT_PROTECT)
fi
if [ "$ROOT_PROTECT" = "0" ]
then
  echo -e "[$SCRIPT]:\033[1;32m NOTE: Installation of tch-gui-unhide will ALWAYS enable RTFD protection!\033[0m"
fi

# End of hardening

CURRENT_HOSTNAME="$(uci -q get system.@system[0].hostname)"
if [ "$HOST" = "u" ]
then
  echo [$SCRIPT]: Host name unchanged \[$CURRENT_HOSTNAME\]
else
  case $HOST in
  d) HOSTNAME=$VARIANT;;
  s) HOSTNAME=$VARIANT-$MAC_HEX;;
  *) HOSTNAME=$HOST;;
  esac
  uci -q get dhcp.main.hostname | grep -q "$HOSTNAME"
  if [ $? -eq 0 -a "$(uci -q get system.@system[0].hostname)" = "$HOSTNAME" ]
  then
    echo [$SCRIPT]: Host name is already $HOSTNAME
  else
    echo [$SCRIPT]: Setting the host name to $HOSTNAME
    uci -q get dhcp.main.hostname | grep -q telstra.wifi
    if [ $SRV_multiap -eq 0 -a $? -eq 0 ]
    then
      easymesh=true
    else
      easymesh=false
    fi
    uci -q delete dhcp.main.hostname
    uci add_list dhcp.main.hostname="$HOSTNAME"
    SRV_dnsmasq=$(( $SRV_dnsmasq + 2 ))
    if [ $easymesh = true ]
    then
      echo [$SCRIPT]: Re-adding telstra.wifi hostname for EasyMesh
      uci add_list dhcp.main.hostname='telstra.wifi'
      SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
    fi
    uci commit dhcp
    uci set system.@system[0].hostname="$HOSTNAME"
    uci commit system
    SRV_system=$(( $SRV_system + 1 ))
    export HOSTNAME=$HOSTNAME
  fi
fi
HOSTNAME="$(uci -q get system.@system[0].hostname)"
SERIAL="$(uci get env.var.serial)"
DLNA_NAME="$(uci -q get dlnad.config.friendly_name)"
SAMBA_NAME="$(uci -q get samba.samba.name)"
if [ "$HOSTNAME" = "mymodem" -o "$HOSTNAME" = "mygateway" ]
then
  if [ "$DLNA_NAME" = "$CURRENT_HOSTNAME" -a "$CURRENT_HOSTNAME" != "$HOSTNAME" ]
  then
    echo [$SCRIPT]: Changing DLNAD friendly name from $DLNA_NAME to Telstra Gateway
    uci set dlnad.config.friendly_name="Telstra Gateway"
    uci commit dlnad
    SRV_dlna=$(( $SRV_dlna + 1 ))
  fi
  if [ "$SAMBA_NAME" = "$CURRENT_HOSTNAME" -a "$CURRENT_HOSTNAME" != "$HOSTNAME" ]
  then
    echo [$SCRIPT]: Changing SAMBA host name from $SAMBA_NAME to Telstra-Gateway
    uci set samba.samba.name="Telstra-Gateway"
    uci set samba.samba.description="Technicolor $VARIANT - $SERIAL"
    uci commit samba
    SRV_samba=$(( $SRV_samba + 1 ))
  fi
else
  if [ "$DLNA_NAME" = 'Telstra Modem' -o "$DLNA_NAME" = 'Telstra Gateway' -o \( "$DLNA_NAME" = "$CURRENT_HOSTNAME" -a "$CURRENT_HOSTNAME" != "$HOSTNAME" \) ]
  then
    echo [$SCRIPT]: Changing DLNAD friendly name from $DLNA_NAME to $HOSTNAME
    uci set dlnad.config.friendly_name="$HOSTNAME"
    uci commit dlnad
    SRV_dlna=$(( $SRV_dlna + 1 ))
  fi
  if [ "$SAMBA_NAME" = 'Telstra-Modem' -o "$SAMBA_NAME" = 'Telstra-Gateway' -o \( "$SAMBA_NAME" = "$CURRENT_HOSTNAME" -a "$CURRENT_HOSTNAME" != "$HOSTNAME" \) ]
  then
    echo [$SCRIPT]: Changing SAMBA host name from $SAMBA_NAME to $HOSTNAME
    uci set samba.samba.name="$HOSTNAME"
    uci set samba.samba.description="Technicolor $VARIANT - $SERIAL"
    uci commit samba
    SRV_samba=$(( $SRV_samba + 1 ))
  fi
fi

DOMAIN_NOW="$(uci -q get dhcp.main.domain)"
if [ "$DOMAIN" = "u" -o "$DOMAIN_NOW" = "$DOMAIN" ]
then
  echo [$SCRIPT]: Domain name unchanged \[$DOMAIN_NOW\]
else
  echo [$SCRIPT]: Setting the domain to $DOMAIN
  uci set dhcp.main.domain="$DOMAIN"
  uci commit dhcp
  SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
fi

uci -q get network.wan > /dev/null
if [ $? -eq 0 ]
then
  PEERDNS_NOW="$(uci -q get network.wan.peerdns)"
  WANDNS_NOW="$(uci -q get network.wan.dns)"
  if [ "$NS" = "u" ]
  then
    echo [$SCRIPT]: DNS Servers unchanged \[ $WANDNS_NOW ISP Peer DNS $(status2text $PEERDNS_NOW) \]
  else
    case $NS in
    a) PEERDNS=1; WANDNS1=""; WANDNS2="";;
    c) PEERDNS=0; WANDNS1="1.1.1.1"; WANDNS2="1.0.0.1";;
    g) PEERDNS=0; WANDNS1="8.8.8.8"; WANDNS2="8.8.4.4";;
    f) PEERDNS=0; WANDNS1="208.67.222.123"; WANDNS2="208.67.220.123";;
    o) PEERDNS=0; WANDNS1="208.67.222.222"; WANDNS2="208.67.220.220";;
    *) PEERDNS=0; WANDNS1="$(echo $NS | cut -d, -f1)"; WANDNS2="$(echo $NS | cut -d, -f2)";;
    esac
    if [ "$PEERDNS" = "0" -a -z "$WANDNS1" ]
    then
      echo [$SCRIPT]: No DNS Server IP address specified???
    else
      if [ $PEERDNS -eq 0 ]
      then
        IPv4PATTERN="([^.]|^)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])([^.]|$)"
        echo "$WANDNS1" | grep -q -E $IPv4PATTERN
        if [ $? -eq 1 ]
        then 
          echo [$SCRIPT]: WARNING! Invalid IP address $WANDNS1 IGNORED
          WANDNS1=""
        fi
        if [ ! -z "$WANDNS2" ]
        then
          echo "$WANDNS2" | grep -q -E $IPv4PATTERN
          if [ $? -eq 1 ]
          then 
            echo [$SCRIPT]: WARNING! Invalid IP address $WANDNS2 IGNORED
            WANDNS2=""
          fi
        fi
        if [ -z "$WANDNS1" -a -z "$WANDNS2" ]
        then
          echo [$SCRIPT]: WARNING! No valid IP addresses specified - No DNS Server changes applied
        else
          if [ "$PEERDNS_NOW" = "0" ]
          then
            echo [$SCRIPT]: ISP peer DNS unchanged \[$(status2text $PEERDNS_NOW)\]
          else
            echo [$SCRIPT]: Ignoring ISP defined DNS Servers
            uci set network.wan.peerdns='0'
            SRV_network=$(( $SRV_network + 1 ))
          fi
          if [ "$WANDNS_NOW" = "$WANDNS1 $WANDNS2" ]
          then
            echo [$SCRIPT]: DNS Servers unchanged \[ $WANDNS_NOW \]
          else 
            uci -q delete network.wan.dns
            SRV_network=$(( $SRV_network + 2 ))
            if [ ! -z "$WANDNS1" ]
            then
              uci add_list network.wan.dns="$WANDNS1"
              SRV_network=$(( $SRV_network + 1 ))
            fi
            if [ ! -z "$WANDNS2" ]
            then
              uci add_list network.wan.dns="$WANDNS2"
              SRV_network=$(( $SRV_network + 1 ))
            fi
            echo [$SCRIPT]: DNS Servers changed \[ $WANDNS1 $WANDNS2 \]
          fi
        fi
      else
        if [ "$PEERDNS_NOW" = "1" ]
        then
          echo [$SCRIPT]: ISP peer DNS unchanged \[$(status2text $PEERDNS_NOW)\]
        else
          echo [$SCRIPT]: Using ISP defined DNS Servers
          uci set network.wan.peerdns='1'
          uci -q delete network.wan.dns
          SRV_network=$(( $SRV_network + 2 ))
        fi
      fi
      uci commit network
    fi
  fi
else
  echo [$SCRIPT]: DNS unchanged - no WAN configuration??? Maybe in bridged mode...
fi

DLNA_NOW="$(uci -q get dlnad.config.enabled)"
if [ "$DLNAD" = "u" -o "$DLNA_NOW" = "$DLNAD" ]
then
  echo [$SCRIPT]: Content sharing unchanged \[$(status2text $DLNA_NOW)\]
else
  uci set dlnad.config.enabled="$DLNAD"
  uci commit dlnad
  SRV_dlna=$(( $SRV_dlna + 1 ))
  echo [$SCRIPT]: Content sharing $(status2text $DLNAD)
fi

PRNTR_NOW="$(uci -q get printersharing.config.enabled)"
if [ "$PRNTR" = "u" -o "$PRNTR_NOW" = "$PRNTR" ]
then
  echo [$SCRIPT]: Printer sharing unchanged \[$(status2text $PRNTR_NOW)\]
else
  uci set printersharing.config.enabled="$PRNTR"
  uci commit printersharing
  SRV_cups=$(( $SRV_cups + 1 ))
  echo [$SCRIPT]: Printer sharing $(status2text $PRNTR)
fi

SAMBA_NOW="$(uci -q get samba.samba.filesharing)"
if [ "$SAMBA" = "u" -o "$SAMBA_NOW" = "$SAMBA" ]
then
  echo [$SCRIPT]: File sharing unchanged \[$(status2text $SAMBA_NOW)\]
else
  uci set samba.samba.filesharing="$SAMBA"
  uci commit samba
  SRV_samba=$(( $SRV_samba + 1 ))
  echo [$SCRIPT]: File sharing $(status2text $SAMBA)
fi

MMPBX_NOW="$(uci -q get mmpbx.global.enabled)"
if [ "$MMPBX" = "u" -o "$MMPBX_NOW" = "$MMPBX" ]
then
  echo [$SCRIPT]: Telephony unchanged \[$(status2text $MMPBX_NOW)\]
else
  uci set mmpbx.global.enabled="$MMPBX"
  uci commit mmpbx
  SRV_mmpbxd=$(( $SRV_mmpbxd + 1 ))
  MMPBX_NOW="$MMPBX"
  if [ "$MMPBX" = "1" ]
  then
    echo [$SCRIPT]: Telephony Enabled
  else
    echo [$SCRIPT]: Telephony Disabled
  fi
fi
if [ "$(uci -q get mmpbxmobilenet.VoLTE)" ]
then
  if [ "$(uci -q get mmpbxmobilenet.VoLTE.enabled)" = "1" ]
  then
    echo [$SCRIPT]: VoLTE already Enabled
  else
    echo [$SCRIPT]: Enabling VoLTE backup voice service and SMS reception
    uci set mmpbxmobilenet.VoLTE.enabled='1'
    uci commit mmpbxmobilenet
    SRV_mmpbxd=$(( $SRV_mmpbxd + 1 ))
    uci set mobiled_device_specific.@device[0].ims_pdn_autobringup='1'
    uci set mobiled_sessions.@session[0].activated='1'
    uci set mobiled_sessions.@session[0].autoconnect='1'
    uci set mobiled_sessions.@session[0].optional='1'
    uci commit mobiled_device_specific
    uci commit mobiled_sessions
    SRV_mobiled=$(( $SRV_mobiled + 1 ))
  fi
fi

DECT_NOW="$(uci -q get mmpbx.dectemission.state)"
if [ "$DECT" = "u" -o "$DECT_NOW" = "$DECT" ]
then
  echo [$SCRIPT]: DECT Emission Mode unchanged \[$(status2text $DECT_NOW)\]
else
  uci set mmpbx.dectemission.state="$DECT"
  uci commit mmpbx
  SRV_mmpbxd=$(( $SRV_mmpbxd + 1 ))
  echo [$SCRIPT]: DECT Emission Mode $(status2text $DECT)
fi

if [ "$WPS" = "u" ]
then
  WPS_NOW="$(uci show wireless | grep wps_state=\'1\' | wc -l)"
  if [ "$WPS_NOW" -eq 1 ]
  then
    echo [$SCRIPT]: WPS unchanged \[Enabled on 1 Access Point\]
  else
    echo [$SCRIPT]: WPS unchanged \[Enabled on $WPS_NOW Access Points\]
  fi
else
  for iface in $(uci show wireless | grep ssid= | grep -v -E \(Guest\|BH-\) | cut -d. -f2)
  do
    ap="$(uci show wireless | grep =\'$iface\' | cut -d. -f2)"
    if [ ! -z "$ap" ]
    then
      wps_state="$(uci -q get wireless.$ap.wps_state)"
      if [ "$wps_state" = "$WPS" ]
      then
        echo [$SCRIPT]: WPS State unchanged on SSID $(uci get wireless.$iface.ssid) \[$(status2text $WPS)\]
      else
        uci set wireless.$ap.wps_state="$WPS"
        SRV_hostapd=$(( $SRV_hostapd + 1 ))
        echo [$SCRIPT]: WPS State on SSID $(uci get wireless.$iface.ssid) $(status2text $WPS) 
      fi
    fi
  done
  if [ $SRV_hostapd -gt 0 ]
  then
    uci commit wireless
  fi
fi

if [ "$VERSION" = "17.2" -o "$VERSION" = "18.1.c" ]
then
  if [ "$ALG" = "u" ]
  then
    echo [$SCRIPT]: ALGs unchanged \[$(uci show firewall | grep helper | grep -E "enable='(1|y)'" | wc -l) Enabled\]
  else
    for g in $(uci show firewall | grep '\.helper' | cut -d\' -f2)
    do
      key=$(uci show firewall | grep '\.helper' | grep -i "\b$g" | sed 's/\(.*\)\.helper=.*/\1/')
      G=$(echo $g | tr "[a-z]" "[A-Z]")
      G_NOW="$(uci -q get -q $key.enable)"
      if [ "$G_NOW" != "$ALG" ]
      then
        if [ "$ALG" = "0" ]
        then
          echo [$SCRIPT]: $G ALG Disabled
        else 
          echo [$SCRIPT]: $G ALG Enabled
        fi
        uci set $key.enable="$ALG"
        uci commit firewall
        SRV_fw=$(( $SRV_fw + 1 ))
      else
        echo [$SCRIPT]: $G ALG unchanged \[$(status2text $G_NOW)\]
      fi
    done
  fi
else # 20.3.c
  if [ "$ALG" = "u" ]
  then
    echo [$SCRIPT]: WAN ALGs unchanged \[$(uci -q get $(uci show firewall | grep @zone | grep "wan='1'" | cut -d. -f1-2).helper | wc -w) Enabled\]
  else
    ZONE=$(uci show firewall | grep @zone | grep -m 1 "wan='1'" | cut -d. -f1-2)
    uci -q delete $ZONE.helper
    if [ "$ALG" = "0" ]
    then
      echo [$SCRIPT]: $G All WAN ALGs Disabled
    else
      for g in ftp tftp snmp pptp sip irc amanda rtsp
      do
        uci add_list $ZONE.helper="$g"
        echo [$SCRIPT]: $G ALG Enabled
      done
    fi
    uci commit firewall
    SRV_fw=$(( $SRV_fw + 1 ))
  fi
fi

NATPMP_NOW="$(uci -q get upnpd.config.enable_natpmp)"
UPNP_NOW="$(uci -q get upnpd.config.enable_upnp)"
if [ "$UPNP" = "u" -o \( "$NATPMP_NOW" = "$UPNP" -a "$UPNP_NOW" = "$UPNP" \) ]
then
  echo [$SCRIPT]: UPnP unchanged \[UPnP: $(status2text $UPNP_NOW) NAT-PMP: $(status2text $NATPMP_NOW)\]
else
  uci set upnpd.config.enable_natpmp="$UPNP"
  uci set upnpd.config.enable_upnp="$UPNP"
  uci commit upnpd
  SRV_upnp=$(( $SRV_upnp + 2 ))
  echo [$SCRIPT]: UPnP $(status2text $UPNP)
fi

if [ $SRV_dumaos -ge 0 ]
then
  DUMAOS_NOW="$(uci -q get dumaos.tr69.dumaos_enabled)"
  if [ "$DUMAOS" = "u" -o "$DUMAOS_NOW" = "$DUMAOS" ]
  then
    echo [$SCRIPT]: DumaOS unchanged \[$(status2text $DUMAOS_NOW)\]
  else
    uci set dumaos.tr69.dumaos_enabled="$DUMAOS"
    uci commit dumaos
    SRV_dumaos=$(( $SRV_dumaos + 1 ))
  echo [$SCRIPT]: DumaOS $(status2text $DUMAOS)
  fi
fi

if [ $SRV_multiap -ge 0 ]
then
  AGENT_NOW="$(uci -q get multiap.agent.enabled)"
  CTRLR_NOW="$(uci -q get multiap.controller.enabled)"
  BHAUL_AP_NOW="$(uci -q get wireless.ap6.state)"
  BHAUL_IF_NOW="$(uci -q get wireless.wl1_2.state)"
  if [ "$MULTIAP" = "u" -o \( "$AGENT_NOW" = "$MULTIAP" -a "$CTRLR_NOW" = "$MULTIAP" -a "$BHAUL_AP_NOW" = "$MULTIAP" -a "$BHAUL_IF_NOW" = "$MULTIAP" \) ]
  then
    echo [$SCRIPT]: MultiAP unchanged \[Controller: $(status2text $CTRLR_NOW) Agent: $(status2text $AGENT_NOW) BackHaul SSID: $(status2text $BHAUL_IF_NOW)\]
  else
    uci set multiap.agent.enabled="$MULTIAP"
    uci set multiap.controller.enabled="$MULTIAP"
    uci commit multiap
    SRV_multiap=$(( $SRV_multiap + 2 ))
    uci set wireless.ap6.state="$MULTIAP"
    uci set wireless.wl1_2.state="$MULTIAP"
    SRV_hostapd=$(( $SRV_hostapd + 2 ))
    SRV_network=$(( $SRV_network + 1 ))
    uci commit wireless
    echo [$SCRIPT]: MultiAP $(status2text $MULTIAP)
  fi
elif [ "$MULTIAP" != "u" ]
then
  echo [$SCRIPT]: MultiAP not found on device
fi

PWR_STATUS=$(pwrctl show | grep ENABLED | grep -v "Switch Deep Green Mode" | wc -l)
if [ \( $PWR_STATUS -eq 0 -a "$POWER" = "n" \) -o \( $PWR_STATUS -gt 0 -a "$POWER" = "y" \) ]
then
  POWER='u'
fi
case "$POWER" in
  u)  echo [$SCRIPT]: Power saving settings unchanged \[$(status2text $PWR_STATUS)\];;
  n)  echo [$SCRIPT]: Disabling power saving...
      pwrctl config --cpuspeed 0
      pwrctl config --wait off
      pwrctl config --ethapd off
      pwrctl config --eee off
      pwrctl config --autogreeen off
      uci set power.ethernet.autogreeen='0'
      uci set power.ethernet.eee='0'
      uci commit power;;
  y)  echo [$SCRIPT]: Enabling power saving...
      pwrctl config --cpuspeed 1
      pwrctl config --wait on
      pwrctl config --ethapd on
      pwrctl config --eee on
      pwrctl config --autogreeen on
      uci set power.ethernet.autogreeen='1'
      uci set power.ethernet.eee='1'
      uci commit power;;
esac

# macoers repository URL changed, so need to update if it is the old one
OPKG_DEP=$(grep -c 'www.macoers.com/repository' /etc/opkg/customfeeds.conf)
if [ "$OPKG" = "y" -o $OPKG_DEP -gt 0 ]
then
  cat /proc/cpuinfo | grep -q 'ARMv7 Processor rev 1 (v7l)'
  if [ $? -eq 0 ]
  then
    if [ $OPKG_DEP -gt 0 -o $(sed -e '/^#/d' -e '/^[ \t]*$/d' /etc/opkg/customfeeds.conf | wc -l) -eq 0 ]
    then
      HOMEWARE=$(uci get version.@version[0].version | cut -d. -f1)
      if [ "$HOMEWARE" -eq 17 -o "$HOMEWARE" -eq 18 -o "$HOMEWARE" -eq 20 ]
      then
        ping -c 1 -W 2 -q 1.1.1.1 >/dev/null 2>&1
        if [ $? -eq 0 ]
        then
          echo [$SCRIPT]: Configuring opkg architectures...
          rm /etc/opkg.conf
          echo 'dest root'>/etc/opkg.conf
          echo 'dest ram /tmp'>>/etc/opkg.conf
          echo 'lists_dir ext /var/opkg-lists'>>/etc/opkg.conf
          echo 'option overlay_root /overlay'>>/etc/opkg.conf
          echo 'arch all 1'>>/etc/opkg.conf
          echo 'arch noarch 1'>>/etc/opkg.conf
          echo 'arch arm_cortex-a9 10'>>/etc/opkg.conf
          echo 'arch arm_cortex-a9_neon 20'>>/etc/opkg.conf
          echo 'arch brcm63xx-tch 30'>>/etc/opkg.conf
          if [ $OPKG_DEP -gt 0 ]
          then
            sed -e '/macoers/d' -i /etc/opkg/customfeeds.conf
            echo [$SCRIPT]: Re-configuring opkg for Homeware $HOMEWARE \(repository moved\)...
          else
            echo [$SCRIPT]: Configuring opkg for Homeware $HOMEWARE...
          fi
          rm /etc/opkg/customfeeds.conf
          case "$HOMEWARE" in
            17)
              echo 'src/gz base https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/base'>/etc/opkg/customfeeds.conf
              echo 'src/gz luci https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/luci'>>/etc/opkg/customfeeds.conf
              echo 'src/gz management https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/management'>>/etc/opkg/customfeeds.conf
              echo 'src/gz packages https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/packages'>>/etc/opkg/customfeeds.conf
              echo 'src/gz routing https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/routing'>>/etc/opkg/customfeeds.conf
              echo 'src/gz telephony https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/telephony'>>/etc/opkg/customfeeds.conf
              ;;
          18|20)
              echo 'src/gz chaos_calmer_base_macoers https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/base'>/etc/opkg/customfeeds.conf
              echo 'src/gz chaos_calmer_packages_macoers https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/packages'>>/etc/opkg/customfeeds.conf
              echo 'src/gz chaos_calmer_luci_macoers https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/luci'>>/etc/opkg/customfeeds.conf
              echo 'src/gz chaos_calmer_routing_macoers https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/routing'>>/etc/opkg/customfeeds.conf
              echo 'src/gz chaos_calmer_telephony_macoers https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/telephony'>>/etc/opkg/customfeeds.conf
              echo 'src/gz chaos_calmer_core_macoers https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/target/packages'>>/etc/opkg/customfeeds.conf
              ;;
          esac
          sed -e 's/^src/#src/' -i /etc/opkg/distfeeds.conf
          echo [$SCRIPT]: Downloading and installing packages required for repository access...
          SRC='https://downloads.openwrt.org/releases/packages-21.02/arm_cortex-a9/base/'
          IPK=$(curl -sk $SRC/Packages.gz | gunzip | grep '^Filename: ca-certificates' | cut -d' ' -f2)
          curl -sk $SRC/$IPK -o /tmp/$IPK && opkg --force-overwrite --force-depends --nodeps install /tmp/$IPK 2>&1 | logger -s -t rpc.gui.opkg -p user.info && rm /tmp/$IPK
          echo [$SCRIPT]: Updating local package list
          opkg update | logger -s -t rpc.gui.opkg -p user.info;
        else
          echo [$SCRIPT]: WARNING: No internet connection??? opkg not configured...
        fi
      else
        echo [$SCRIPT]: Sorry!! I do not know how to configure opkg for Firmware Version $(uci get version.@version[0].marketing_version)
      fi
    else
      echo [$SCRIPT]: Looks like opkg has already been configured...
    fi
  else
    echo [$SCRIPT]: Sorry!! I can only configure opkg for ARMv7 devices...
  fi
fi

echo [$SCRIPT]: Applying required service changes...
if [ "$LITE" = 'R' ]
then
  for s in cupsd dumaos lte-doctor-logger mmpbxfwctl mmpbxd mmpbxbrcmdect mud multiap_agent multiap_controller multiap_vendorextensions ndhttpd xl2tpd
  do 
    [ -f /etc/init.d/$s -a ! $(/etc/init.d/$s enabled) ] && { /etc/init.d/$s enable; /etc/init.d/$s start; } > /dev/null 2>&1
  done
fi
/etc/init.d/watchdog-tch reload  > /dev/null 2>&1
[ -f /etc/init.d/cwmpd -a $SRV_cwmp -gt 0 ] && { /etc/init.d/cwmpd disable;/etc/init.d/cwmpd stop; } > /dev/null 2>&1
[ -f /etc/init.d/hotspotd -a $SRV_hotspot -gt 0 ] && { /etc/init.d/hotspotd disable; /etc/init.d/hotspotd stop; } > /dev/null 2>&1
[ -f /etc/init.d/autoreset -a $SRV_monitor -gt 0 ] && { /etc/init.d/autoreset disable; /etc/init.d/autoreset stop; } > /dev/null 2>&1
[ -f /etc/init.d/tls-thor -a $SRV_monitor -gt 0 ] && { /etc/init.d/tls-thor disable; /etc/init.d/tls-thor stop; } > /dev/null 2>&1
[ -f /etc/init.d/wifi-doctor-agent -a $SRV_monitor -gt 0 ] && /etc/init.d/wifi-doctor-agent reload > /dev/null 2>&1
[ $SRV_bulkdata -gt 0 ] && { /etc/init.d/bulkdata disable; /etc/init.d/bulkdata stop; } > /dev/null 2>&1
[ $SRV_ntp -gt 0 ] && /etc/init.d/sysntpd restart > /dev/null 2>&1
[ $SRV_system -gt 0 ] && /etc/init.d/system reload > /dev/null 2>&1
[ $SRV_samba -gt 0 ] && { /etc/init.d/samba reload; /etc/init.d/samba-nmbd reload; } > /dev/null 2>&1
[ $SRV_dlna -gt 0 ] && /etc/init.d/dlnad restart > /dev/null 2>&1
[ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear reload > /dev/null 2>&1
[ $SRV_dhcp -gt 0 ] && /etc/init.d/dnsmasq reload > /dev/null 2>&1
[ $SRV_fw -gt 0 ] && /etc/init.d/firewall reload > /dev/null 2>&1
[ $SRV_hostapd -gt 0 ] && { /etc/init.d/hostapd reload && ubus send config "{'reload':'wireless'}"; } > /dev/null 2>&1
[ $SRV_network -gt 0 ] && /etc/init.d/network reload > /dev/null 2>&1
[ $SRV_mmpbxd -gt 0 ] && /etc/init.d/mmpbxd restart > /dev/null 2>&1
[ $SRV_mobiled -gt 0 ] && /etc/init.d/mobiled restart > /dev/null 2>&1
[ $SRV_multiap -gt 0 ] && { /etc/init.d/multiap_controller restart; /etc/init.d/multiap_agent restart; } > /dev/null 2>&1
[ $SRV_upnp -gt 0 ] && /etc/init.d/miniupnpd-tch restart > /dev/null 2>&1
[ $SRV_dumaos -gt 0 ] && /etc/init.d/dumaos restart > /dev/null 2>&1
[ $SRV_mountd -gt 0 ] && { 
  mnt_path=$(uci get mountd.mountd.path); 
  for f in $(find ${mnt_path} -type l);do 
    echo "[$SCRIPT]: Attempting to unmount $f..."; 
    umount $f; 
  done; 
  echo -e "[$SCRIPT]: \033[1;32mNOTE: You should remove and re-insert any mounted USB device\033[0m"; 
}
[ "$PRNTR_NOW" = "0" -o "$PRNTR" = "0" ] && /etc/init.d/cupsd stop > /dev/null 2>&1
[ "$PRNTR_NOW" = "0" -a "$PRNTR" = "1" ] && /etc/init.d/cupsd restart > /dev/null 2>&1
[ "$DLNA_NOW" = "0" -o "$DLNAD" = "0" ] && /etc/init.d/mud stop > /dev/null 2>&1
[ "$DLNA_NOW" = "0" -a "$DLNAD" = "1" ] && /etc/init.d/mud restart > /dev/null 2>&1
if [ "$LITE" = 'y' ]
then
  [ $SRV_dumaos -gt 0 -a "$DUMAOS" = "0" ] && { /etc/init.d/dumaos disable; /etc/init.d/ndhttpd disable; /etc/init.d/dumaos stop; /etc/init.d/ndhttpd stop; } > /dev/null 2>&1
  [ $SRV_multiap -gt 0 -a "$MULTIAP" = "0" ] && { /etc/init.d/multiap_controller disable; /etc/init.d/multiap_agent disable; /etc/init.d/multiap_controller stop; /etc/init.d/multiap_agent stop; /etc/init.d/multiap_vendorextensions disable; /etc/init.d/multiap_vendorextensions stop; } > /dev/null 2>&1
  [ "$DECT" = "0" ] && { /etc/init.d/mmpbxbrcmdect disable; /etc/init.d/mmpbxbrcmdect stop; } > /dev/null 2>&1
  [ "$DLNAD" = "0" ] && { /etc/init.d/mud disable; /etc/init.d/mud stop; } > /dev/null 2>&1
  [ "$MMPBX" = "0" ] && { /etc/init.d/mmpbxd disable; /etc/init.d/mmpbxfwctl disable; /etc/init.d/mmpbxd stop; /etc/init.d/mmpbxfwctl stop; } > /dev/null 2>&1
  [ "$PRNTR" = "0" ] && { /etc/init.d/cupsd disable; /etc/init.d/cupsd stop; } > /dev/null 2>&1
  [ "$SAMBA" = "0" ] && { /etc/init.d/samba disable; /etc/init.d/samba-nmbd disable; /etc/init.d/samba stop; /etc/init.d/samba-nmbd stop; } > /dev/null 2>&1
  [ "$UPNP" = "0" ] && { /etc/init.d/miniupnpd-tch disable; /etc/init.d/miniupnpd-tch stop; } > /dev/null 2>&1
  { /etc/init.d/lte-doctor-logger disable; /etc/init.d/lte-doctor-logger stop; } > /dev/null 2>&1
  { /etc/init.d/xl2tpd disable; /etc/init.d/xl2tpd stop; } > /dev/null 2>&1
fi

if [ ! -z "$PACKAGES_TO_REMOVE" ]
then
  echo [$SCRIPT]: Removing packages that are no longer required \($PACKAGES_TO_REMOVE\)
  opkg --force-removal-of-dependent-packages remove $PACKAGES_TO_REMOVE
fi
# Previous versions also removed mappings-fon package, but this causes errors to be logged by transformer, so this code undoes the package removal
for f in /rom/usr/lib/opkg/info/mappings-fon.*
do
  if [ ! -f ${f##/rom} ]; then
    cp -p $f ${f##/rom}
  fi
done
for f in $(cat /rom/usr/lib/opkg/info/mappings-fon.list)
do
  if [ ! -f $f ]; then
    cp -p /rom$f $f
  fi
done


echo [$SCRIPT]: Cleaning up broken links in /etc/rc.d
find /etc/rc.d -type l ! -exec test -e {} \; -exec rm {} \;

echo [$SCRIPT]: Done!
echo -e "[$SCRIPT]: \033[1;32mNOTE: If you haven't changed the root password, you should do it now...\033[0m"
